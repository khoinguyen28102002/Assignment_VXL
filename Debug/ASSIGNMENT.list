
ASSIGNMENT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004880  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800498c  0800498c  0001498c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004af4  08004af4  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  08004af4  08004af4  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004af4  08004af4  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004af4  08004af4  00014af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004af8  08004af8  00014af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08004afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  200000d8  08004bd4  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08004bd4  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010758  00000000  00000000  00020101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000264a  00000000  00000000  00030859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  00032ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  00033cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189b7  00000000  00000000  00034958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001010f  00000000  00000000  0004d30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b293  00000000  00000000  0005d41e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e86b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a6c  00000000  00000000  000e8704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d8 	.word	0x200000d8
 8000128:	00000000 	.word	0x00000000
 800012c:	08004974 	.word	0x08004974

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000dc 	.word	0x200000dc
 8000148:	08004974 	.word	0x08004974

0800014c <sendDATA>:

#include "UART.h"
#include "main.h"
#include "global.h"
#include "stdio.h"
void sendDATA(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status_auto) {
 8000150:	4b2b      	ldr	r3, [pc, #172]	; (8000200 <sendDATA+0xb4>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3b06      	subs	r3, #6
 8000156:	2b03      	cmp	r3, #3
 8000158:	d84e      	bhi.n	80001f8 <sendDATA+0xac>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <sendDATA+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000171 	.word	0x08000171
 8000164:	08000193 	.word	0x08000193
 8000168:	080001b5 	.word	0x080001b5
 800016c:	080001d7 	.word	0x080001d7
		case RED1_GREEN2:
			HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!RED1: %d  	GREEN2: %d#\r\n", timeOfPhase1, timeOfPhase2), 1000);
 8000170:	4b24      	ldr	r3, [pc, #144]	; (8000204 <sendDATA+0xb8>)
 8000172:	681a      	ldr	r2, [r3, #0]
 8000174:	4b24      	ldr	r3, [pc, #144]	; (8000208 <sendDATA+0xbc>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4924      	ldr	r1, [pc, #144]	; (800020c <sendDATA+0xc0>)
 800017a:	4825      	ldr	r0, [pc, #148]	; (8000210 <sendDATA+0xc4>)
 800017c:	f003 ffc0 	bl	8004100 <siprintf>
 8000180:	4603      	mov	r3, r0
 8000182:	b29a      	uxth	r2, r3
 8000184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000188:	4921      	ldr	r1, [pc, #132]	; (8000210 <sendDATA+0xc4>)
 800018a:	4822      	ldr	r0, [pc, #136]	; (8000214 <sendDATA+0xc8>)
 800018c:	f003 fafb 	bl	8003786 <HAL_UART_Transmit>
			break;
 8000190:	e033      	b.n	80001fa <sendDATA+0xae>
		case RED1_YELLOW2:
			HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!RED1: %d  	YELLOW2:%d#\r\n", timeOfPhase1, timeOfPhase2), 1000);
 8000192:	4b1c      	ldr	r3, [pc, #112]	; (8000204 <sendDATA+0xb8>)
 8000194:	681a      	ldr	r2, [r3, #0]
 8000196:	4b1c      	ldr	r3, [pc, #112]	; (8000208 <sendDATA+0xbc>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	491f      	ldr	r1, [pc, #124]	; (8000218 <sendDATA+0xcc>)
 800019c:	481c      	ldr	r0, [pc, #112]	; (8000210 <sendDATA+0xc4>)
 800019e:	f003 ffaf 	bl	8004100 <siprintf>
 80001a2:	4603      	mov	r3, r0
 80001a4:	b29a      	uxth	r2, r3
 80001a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001aa:	4919      	ldr	r1, [pc, #100]	; (8000210 <sendDATA+0xc4>)
 80001ac:	4819      	ldr	r0, [pc, #100]	; (8000214 <sendDATA+0xc8>)
 80001ae:	f003 faea 	bl	8003786 <HAL_UART_Transmit>
			break;
 80001b2:	e022      	b.n	80001fa <sendDATA+0xae>
		case GREEN1_RED2:
			HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!RED2: %d  	GREEN1:%d#\r\n", timeOfPhase1, timeOfPhase2), 1000);
 80001b4:	4b13      	ldr	r3, [pc, #76]	; (8000204 <sendDATA+0xb8>)
 80001b6:	681a      	ldr	r2, [r3, #0]
 80001b8:	4b13      	ldr	r3, [pc, #76]	; (8000208 <sendDATA+0xbc>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4917      	ldr	r1, [pc, #92]	; (800021c <sendDATA+0xd0>)
 80001be:	4814      	ldr	r0, [pc, #80]	; (8000210 <sendDATA+0xc4>)
 80001c0:	f003 ff9e 	bl	8004100 <siprintf>
 80001c4:	4603      	mov	r3, r0
 80001c6:	b29a      	uxth	r2, r3
 80001c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001cc:	4910      	ldr	r1, [pc, #64]	; (8000210 <sendDATA+0xc4>)
 80001ce:	4811      	ldr	r0, [pc, #68]	; (8000214 <sendDATA+0xc8>)
 80001d0:	f003 fad9 	bl	8003786 <HAL_UART_Transmit>
			break;
 80001d4:	e011      	b.n	80001fa <sendDATA+0xae>
		case YELLOW1_RED2:
			HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!RED2: %d  	YELLOW1:%d#\r\n", timeOfPhase1, timeOfPhase2), 1000);
 80001d6:	4b0b      	ldr	r3, [pc, #44]	; (8000204 <sendDATA+0xb8>)
 80001d8:	681a      	ldr	r2, [r3, #0]
 80001da:	4b0b      	ldr	r3, [pc, #44]	; (8000208 <sendDATA+0xbc>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4910      	ldr	r1, [pc, #64]	; (8000220 <sendDATA+0xd4>)
 80001e0:	480b      	ldr	r0, [pc, #44]	; (8000210 <sendDATA+0xc4>)
 80001e2:	f003 ff8d 	bl	8004100 <siprintf>
 80001e6:	4603      	mov	r3, r0
 80001e8:	b29a      	uxth	r2, r3
 80001ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001ee:	4908      	ldr	r1, [pc, #32]	; (8000210 <sendDATA+0xc4>)
 80001f0:	4808      	ldr	r0, [pc, #32]	; (8000214 <sendDATA+0xc8>)
 80001f2:	f003 fac8 	bl	8003786 <HAL_UART_Transmit>
			break;
 80001f6:	e000      	b.n	80001fa <sendDATA+0xae>
		default:
			break;
 80001f8:	bf00      	nop
	}
}
 80001fa:	bf00      	nop
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	20000008 	.word	0x20000008
 8000204:	20000158 	.word	0x20000158
 8000208:	20000198 	.word	0x20000198
 800020c:	0800498c 	.word	0x0800498c
 8000210:	2000015c 	.word	0x2000015c
 8000214:	20000230 	.word	0x20000230
 8000218:	080049a8 	.word	0x080049a8
 800021c:	080049c4 	.word	0x080049c4
 8000220:	080049e0 	.word	0x080049e0

08000224 <sendDATA_Manual>:
void sendDATA_Manual(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if(status == MANUAL_MODE){
 8000228:	4b24      	ldr	r3, [pc, #144]	; (80002bc <sendDATA_Manual+0x98>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2bfc      	cmp	r3, #252	; 0xfc
 800022e:	d142      	bne.n	80002b6 <sendDATA_Manual+0x92>
		if(status_manual == MANUAL_1){
 8000230:	4b23      	ldr	r3, [pc, #140]	; (80002c0 <sendDATA_Manual+0x9c>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	2b0c      	cmp	r3, #12
 8000236:	d10c      	bne.n	8000252 <sendDATA_Manual+0x2e>
			HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!P1:GREEN		P2:RED#\r\n"), 1000);
 8000238:	4922      	ldr	r1, [pc, #136]	; (80002c4 <sendDATA_Manual+0xa0>)
 800023a:	4823      	ldr	r0, [pc, #140]	; (80002c8 <sendDATA_Manual+0xa4>)
 800023c:	f003 ff60 	bl	8004100 <siprintf>
 8000240:	4603      	mov	r3, r0
 8000242:	b29a      	uxth	r2, r3
 8000244:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000248:	491f      	ldr	r1, [pc, #124]	; (80002c8 <sendDATA_Manual+0xa4>)
 800024a:	4820      	ldr	r0, [pc, #128]	; (80002cc <sendDATA_Manual+0xa8>)
 800024c:	f003 fa9b 	bl	8003786 <HAL_UART_Transmit>
		}
		else if(status_manual == MANUAL_4){
			HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!P1:RED		P2:YELLOW#\r\n"), 1000);
		}
	}
}
 8000250:	e031      	b.n	80002b6 <sendDATA_Manual+0x92>
		else if(status_manual == MANUAL_2){
 8000252:	4b1b      	ldr	r3, [pc, #108]	; (80002c0 <sendDATA_Manual+0x9c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b0d      	cmp	r3, #13
 8000258:	d10c      	bne.n	8000274 <sendDATA_Manual+0x50>
			HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!P1:YELLOW		P2:RED#\r\n"), 1000);
 800025a:	491d      	ldr	r1, [pc, #116]	; (80002d0 <sendDATA_Manual+0xac>)
 800025c:	481a      	ldr	r0, [pc, #104]	; (80002c8 <sendDATA_Manual+0xa4>)
 800025e:	f003 ff4f 	bl	8004100 <siprintf>
 8000262:	4603      	mov	r3, r0
 8000264:	b29a      	uxth	r2, r3
 8000266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800026a:	4917      	ldr	r1, [pc, #92]	; (80002c8 <sendDATA_Manual+0xa4>)
 800026c:	4817      	ldr	r0, [pc, #92]	; (80002cc <sendDATA_Manual+0xa8>)
 800026e:	f003 fa8a 	bl	8003786 <HAL_UART_Transmit>
}
 8000272:	e020      	b.n	80002b6 <sendDATA_Manual+0x92>
		else if(status_manual == MANUAL_3){
 8000274:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <sendDATA_Manual+0x9c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2b0e      	cmp	r3, #14
 800027a:	d10c      	bne.n	8000296 <sendDATA_Manual+0x72>
			HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!P1:RED		P2:GREEN#\r\n"), 1000);
 800027c:	4915      	ldr	r1, [pc, #84]	; (80002d4 <sendDATA_Manual+0xb0>)
 800027e:	4812      	ldr	r0, [pc, #72]	; (80002c8 <sendDATA_Manual+0xa4>)
 8000280:	f003 ff3e 	bl	8004100 <siprintf>
 8000284:	4603      	mov	r3, r0
 8000286:	b29a      	uxth	r2, r3
 8000288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800028c:	490e      	ldr	r1, [pc, #56]	; (80002c8 <sendDATA_Manual+0xa4>)
 800028e:	480f      	ldr	r0, [pc, #60]	; (80002cc <sendDATA_Manual+0xa8>)
 8000290:	f003 fa79 	bl	8003786 <HAL_UART_Transmit>
}
 8000294:	e00f      	b.n	80002b6 <sendDATA_Manual+0x92>
		else if(status_manual == MANUAL_4){
 8000296:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <sendDATA_Manual+0x9c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b12      	cmp	r3, #18
 800029c:	d10b      	bne.n	80002b6 <sendDATA_Manual+0x92>
			HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!P1:RED		P2:YELLOW#\r\n"), 1000);
 800029e:	490e      	ldr	r1, [pc, #56]	; (80002d8 <sendDATA_Manual+0xb4>)
 80002a0:	4809      	ldr	r0, [pc, #36]	; (80002c8 <sendDATA_Manual+0xa4>)
 80002a2:	f003 ff2d 	bl	8004100 <siprintf>
 80002a6:	4603      	mov	r3, r0
 80002a8:	b29a      	uxth	r2, r3
 80002aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ae:	4906      	ldr	r1, [pc, #24]	; (80002c8 <sendDATA_Manual+0xa4>)
 80002b0:	4806      	ldr	r0, [pc, #24]	; (80002cc <sendDATA_Manual+0xa8>)
 80002b2:	f003 fa68 	bl	8003786 <HAL_UART_Transmit>
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20000000 	.word	0x20000000
 80002c0:	2000000c 	.word	0x2000000c
 80002c4:	080049fc 	.word	0x080049fc
 80002c8:	2000015c 	.word	0x2000015c
 80002cc:	20000230 	.word	0x20000230
 80002d0:	08004a14 	.word	0x08004a14
 80002d4:	08004a2c 	.word	0x08004a2c
 80002d8:	08004a44 	.word	0x08004a44

080002dc <sendVALUE_SETTING>:
void sendVALUE_SETTING(){
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	if(status == TUNING_MODE){
 80002e0:	4b24      	ldr	r3, [pc, #144]	; (8000374 <sendVALUE_SETTING+0x98>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2bfd      	cmp	r3, #253	; 0xfd
 80002e6:	d143      	bne.n	8000370 <sendVALUE_SETTING+0x94>
		if(status_tuning == TUNING_RED_MODE){
 80002e8:	4b23      	ldr	r3, [pc, #140]	; (8000378 <sendVALUE_SETTING+0x9c>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2b0f      	cmp	r3, #15
 80002ee:	d112      	bne.n	8000316 <sendVALUE_SETTING+0x3a>
			HAL_UART_Transmit(&huart2, (void *)buffer_TX, sprintf (buffer_TX,"!TIME RED: %d#\r\n", _time_red+counter), 1000);
 80002f0:	4b22      	ldr	r3, [pc, #136]	; (800037c <sendVALUE_SETTING+0xa0>)
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	4b22      	ldr	r3, [pc, #136]	; (8000380 <sendVALUE_SETTING+0xa4>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4413      	add	r3, r2
 80002fa:	461a      	mov	r2, r3
 80002fc:	4921      	ldr	r1, [pc, #132]	; (8000384 <sendVALUE_SETTING+0xa8>)
 80002fe:	4822      	ldr	r0, [pc, #136]	; (8000388 <sendVALUE_SETTING+0xac>)
 8000300:	f003 fefe 	bl	8004100 <siprintf>
 8000304:	4603      	mov	r3, r0
 8000306:	b29a      	uxth	r2, r3
 8000308:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800030c:	491e      	ldr	r1, [pc, #120]	; (8000388 <sendVALUE_SETTING+0xac>)
 800030e:	481f      	ldr	r0, [pc, #124]	; (800038c <sendVALUE_SETTING+0xb0>)
 8000310:	f003 fa39 	bl	8003786 <HAL_UART_Transmit>
		}
		else if(status_tuning == TUNING_GREEN_MODE){
			HAL_UART_Transmit(&huart2, (void *)buffer_TX, sprintf (buffer_TX,"!TIME GREEN: %d#\r\n", _time_green+counter), 1000);
		}
	}
}
 8000314:	e02c      	b.n	8000370 <sendVALUE_SETTING+0x94>
		else if(status_tuning == TUNING_YELLOW_MODE){
 8000316:	4b18      	ldr	r3, [pc, #96]	; (8000378 <sendVALUE_SETTING+0x9c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b10      	cmp	r3, #16
 800031c:	d112      	bne.n	8000344 <sendVALUE_SETTING+0x68>
			HAL_UART_Transmit(&huart2, (void *)buffer_TX, sprintf (buffer_TX,"!TIME YELLOW: %d#\r\n", _time_yellow+counter), 1000);
 800031e:	4b1c      	ldr	r3, [pc, #112]	; (8000390 <sendVALUE_SETTING+0xb4>)
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	4b17      	ldr	r3, [pc, #92]	; (8000380 <sendVALUE_SETTING+0xa4>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4413      	add	r3, r2
 8000328:	461a      	mov	r2, r3
 800032a:	491a      	ldr	r1, [pc, #104]	; (8000394 <sendVALUE_SETTING+0xb8>)
 800032c:	4816      	ldr	r0, [pc, #88]	; (8000388 <sendVALUE_SETTING+0xac>)
 800032e:	f003 fee7 	bl	8004100 <siprintf>
 8000332:	4603      	mov	r3, r0
 8000334:	b29a      	uxth	r2, r3
 8000336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033a:	4913      	ldr	r1, [pc, #76]	; (8000388 <sendVALUE_SETTING+0xac>)
 800033c:	4813      	ldr	r0, [pc, #76]	; (800038c <sendVALUE_SETTING+0xb0>)
 800033e:	f003 fa22 	bl	8003786 <HAL_UART_Transmit>
}
 8000342:	e015      	b.n	8000370 <sendVALUE_SETTING+0x94>
		else if(status_tuning == TUNING_GREEN_MODE){
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <sendVALUE_SETTING+0x9c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b11      	cmp	r3, #17
 800034a:	d111      	bne.n	8000370 <sendVALUE_SETTING+0x94>
			HAL_UART_Transmit(&huart2, (void *)buffer_TX, sprintf (buffer_TX,"!TIME GREEN: %d#\r\n", _time_green+counter), 1000);
 800034c:	4b12      	ldr	r3, [pc, #72]	; (8000398 <sendVALUE_SETTING+0xbc>)
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <sendVALUE_SETTING+0xa4>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4413      	add	r3, r2
 8000356:	461a      	mov	r2, r3
 8000358:	4910      	ldr	r1, [pc, #64]	; (800039c <sendVALUE_SETTING+0xc0>)
 800035a:	480b      	ldr	r0, [pc, #44]	; (8000388 <sendVALUE_SETTING+0xac>)
 800035c:	f003 fed0 	bl	8004100 <siprintf>
 8000360:	4603      	mov	r3, r0
 8000362:	b29a      	uxth	r2, r3
 8000364:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000368:	4907      	ldr	r1, [pc, #28]	; (8000388 <sendVALUE_SETTING+0xac>)
 800036a:	4808      	ldr	r0, [pc, #32]	; (800038c <sendVALUE_SETTING+0xb0>)
 800036c:	f003 fa0b 	bl	8003786 <HAL_UART_Transmit>
}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000000 	.word	0x20000000
 8000378:	20000010 	.word	0x20000010
 800037c:	20000060 	.word	0x20000060
 8000380:	20000194 	.word	0x20000194
 8000384:	08004a5c 	.word	0x08004a5c
 8000388:	2000015c 	.word	0x2000015c
 800038c:	20000230 	.word	0x20000230
 8000390:	20000064 	.word	0x20000064
 8000394:	08004a70 	.word	0x08004a70
 8000398:	20000068 	.word	0x20000068
 800039c:	08004a84 	.word	0x08004a84

080003a0 <fsm_automatic_run>:
 */

#include "fsm_automatic.h"
#include "global.h"

void fsm_automatic_run(){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	switch (status_auto) {
 80003a4:	4b5e      	ldr	r3, [pc, #376]	; (8000520 <fsm_automatic_run+0x180>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	3b06      	subs	r3, #6
 80003aa:	2b03      	cmp	r3, #3
 80003ac:	f200 80ad 	bhi.w	800050a <fsm_automatic_run+0x16a>
 80003b0:	a201      	add	r2, pc, #4	; (adr r2, 80003b8 <fsm_automatic_run+0x18>)
 80003b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003b6:	bf00      	nop
 80003b8:	0800046b 	.word	0x0800046b
 80003bc:	080004ab 	.word	0x080004ab
 80003c0:	080003c9 	.word	0x080003c9
 80003c4:	0800040b 	.word	0x0800040b
		case GREEN1_RED2:
			turnOnRedLed2();
 80003c8:	f000 ff3c 	bl	8001244 <turnOnRedLed2>
			turnOnGreenLed1();
 80003cc:	f000 ff26 	bl	800121c <turnOnGreenLed1>
			timeOfPhase1 = time_green;
 80003d0:	4b54      	ldr	r3, [pc, #336]	; (8000524 <fsm_automatic_run+0x184>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a54      	ldr	r2, [pc, #336]	; (8000528 <fsm_automatic_run+0x188>)
 80003d6:	6013      	str	r3, [r2, #0]
			timeOfPhase2 = time_red;
 80003d8:	4b54      	ldr	r3, [pc, #336]	; (800052c <fsm_automatic_run+0x18c>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a54      	ldr	r2, [pc, #336]	; (8000530 <fsm_automatic_run+0x190>)
 80003de:	6013      	str	r3, [r2, #0]
			sendDATA();
 80003e0:	f7ff feb4 	bl	800014c <sendDATA>
			time_green--;
 80003e4:	4b4f      	ldr	r3, [pc, #316]	; (8000524 <fsm_automatic_run+0x184>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	3b01      	subs	r3, #1
 80003ea:	4a4e      	ldr	r2, [pc, #312]	; (8000524 <fsm_automatic_run+0x184>)
 80003ec:	6013      	str	r3, [r2, #0]
			time_red--;
 80003ee:	4b4f      	ldr	r3, [pc, #316]	; (800052c <fsm_automatic_run+0x18c>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	3b01      	subs	r3, #1
 80003f4:	4a4d      	ldr	r2, [pc, #308]	; (800052c <fsm_automatic_run+0x18c>)
 80003f6:	6013      	str	r3, [r2, #0]
			if(time_green <= 0){
 80003f8:	4b4a      	ldr	r3, [pc, #296]	; (8000524 <fsm_automatic_run+0x184>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	f300 8086 	bgt.w	800050e <fsm_automatic_run+0x16e>
				status_auto = YELLOW1_RED2;
 8000402:	4b47      	ldr	r3, [pc, #284]	; (8000520 <fsm_automatic_run+0x180>)
 8000404:	2209      	movs	r2, #9
 8000406:	601a      	str	r2, [r3, #0]
			}
			break;
 8000408:	e081      	b.n	800050e <fsm_automatic_run+0x16e>
		case YELLOW1_RED2:
			turnOnYellowLed1();
 800040a:	f000 fef3 	bl	80011f4 <turnOnYellowLed1>
			turnOnRedLed2();
 800040e:	f000 ff19 	bl	8001244 <turnOnRedLed2>
			timeOfPhase1 = time_yellow;
 8000412:	4b48      	ldr	r3, [pc, #288]	; (8000534 <fsm_automatic_run+0x194>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a44      	ldr	r2, [pc, #272]	; (8000528 <fsm_automatic_run+0x188>)
 8000418:	6013      	str	r3, [r2, #0]
			timeOfPhase2 = time_red;
 800041a:	4b44      	ldr	r3, [pc, #272]	; (800052c <fsm_automatic_run+0x18c>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a44      	ldr	r2, [pc, #272]	; (8000530 <fsm_automatic_run+0x190>)
 8000420:	6013      	str	r3, [r2, #0]
			sendDATA();
 8000422:	f7ff fe93 	bl	800014c <sendDATA>
			time_yellow--;
 8000426:	4b43      	ldr	r3, [pc, #268]	; (8000534 <fsm_automatic_run+0x194>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	3b01      	subs	r3, #1
 800042c:	4a41      	ldr	r2, [pc, #260]	; (8000534 <fsm_automatic_run+0x194>)
 800042e:	6013      	str	r3, [r2, #0]
			time_red--;
 8000430:	4b3e      	ldr	r3, [pc, #248]	; (800052c <fsm_automatic_run+0x18c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	3b01      	subs	r3, #1
 8000436:	4a3d      	ldr	r2, [pc, #244]	; (800052c <fsm_automatic_run+0x18c>)
 8000438:	6013      	str	r3, [r2, #0]
			if(time_yellow <= 0 || time_red <= 0){
 800043a:	4b3e      	ldr	r3, [pc, #248]	; (8000534 <fsm_automatic_run+0x194>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	dd03      	ble.n	800044a <fsm_automatic_run+0xaa>
 8000442:	4b3a      	ldr	r3, [pc, #232]	; (800052c <fsm_automatic_run+0x18c>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	2b00      	cmp	r3, #0
 8000448:	dc63      	bgt.n	8000512 <fsm_automatic_run+0x172>
				time_green = _time_green;
 800044a:	4b3b      	ldr	r3, [pc, #236]	; (8000538 <fsm_automatic_run+0x198>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a35      	ldr	r2, [pc, #212]	; (8000524 <fsm_automatic_run+0x184>)
 8000450:	6013      	str	r3, [r2, #0]
				time_red = _time_red;
 8000452:	4b3a      	ldr	r3, [pc, #232]	; (800053c <fsm_automatic_run+0x19c>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a35      	ldr	r2, [pc, #212]	; (800052c <fsm_automatic_run+0x18c>)
 8000458:	6013      	str	r3, [r2, #0]
				time_yellow = _time_yellow;
 800045a:	4b39      	ldr	r3, [pc, #228]	; (8000540 <fsm_automatic_run+0x1a0>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a35      	ldr	r2, [pc, #212]	; (8000534 <fsm_automatic_run+0x194>)
 8000460:	6013      	str	r3, [r2, #0]
				status_auto = RED1_GREEN2;
 8000462:	4b2f      	ldr	r3, [pc, #188]	; (8000520 <fsm_automatic_run+0x180>)
 8000464:	2206      	movs	r2, #6
 8000466:	601a      	str	r2, [r3, #0]
			}
			break;
 8000468:	e053      	b.n	8000512 <fsm_automatic_run+0x172>
		case RED1_GREEN2:
			turnOnRedLed1();
 800046a:	f000 feaf 	bl	80011cc <turnOnRedLed1>
			turnOnGreenLed2();
 800046e:	f000 ff09 	bl	8001284 <turnOnGreenLed2>
			timeOfPhase1 = time_red;
 8000472:	4b2e      	ldr	r3, [pc, #184]	; (800052c <fsm_automatic_run+0x18c>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a2c      	ldr	r2, [pc, #176]	; (8000528 <fsm_automatic_run+0x188>)
 8000478:	6013      	str	r3, [r2, #0]
			timeOfPhase2 = time_green;
 800047a:	4b2a      	ldr	r3, [pc, #168]	; (8000524 <fsm_automatic_run+0x184>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a2c      	ldr	r2, [pc, #176]	; (8000530 <fsm_automatic_run+0x190>)
 8000480:	6013      	str	r3, [r2, #0]
			sendDATA();
 8000482:	f7ff fe63 	bl	800014c <sendDATA>
			time_red--;
 8000486:	4b29      	ldr	r3, [pc, #164]	; (800052c <fsm_automatic_run+0x18c>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	3b01      	subs	r3, #1
 800048c:	4a27      	ldr	r2, [pc, #156]	; (800052c <fsm_automatic_run+0x18c>)
 800048e:	6013      	str	r3, [r2, #0]
			time_green--;
 8000490:	4b24      	ldr	r3, [pc, #144]	; (8000524 <fsm_automatic_run+0x184>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	3b01      	subs	r3, #1
 8000496:	4a23      	ldr	r2, [pc, #140]	; (8000524 <fsm_automatic_run+0x184>)
 8000498:	6013      	str	r3, [r2, #0]
			if(time_green <= 0){
 800049a:	4b22      	ldr	r3, [pc, #136]	; (8000524 <fsm_automatic_run+0x184>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	dc39      	bgt.n	8000516 <fsm_automatic_run+0x176>
				status_auto = RED1_YELLOW2;
 80004a2:	4b1f      	ldr	r3, [pc, #124]	; (8000520 <fsm_automatic_run+0x180>)
 80004a4:	2207      	movs	r2, #7
 80004a6:	601a      	str	r2, [r3, #0]
			}
			break;
 80004a8:	e035      	b.n	8000516 <fsm_automatic_run+0x176>
		case RED1_YELLOW2:
			turnOnRedLed1();
 80004aa:	f000 fe8f 	bl	80011cc <turnOnRedLed1>
			turnOnYellowLed2();
 80004ae:	f000 fed9 	bl	8001264 <turnOnYellowLed2>
			timeOfPhase1 = time_red;
 80004b2:	4b1e      	ldr	r3, [pc, #120]	; (800052c <fsm_automatic_run+0x18c>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a1c      	ldr	r2, [pc, #112]	; (8000528 <fsm_automatic_run+0x188>)
 80004b8:	6013      	str	r3, [r2, #0]
			timeOfPhase2 = time_yellow;
 80004ba:	4b1e      	ldr	r3, [pc, #120]	; (8000534 <fsm_automatic_run+0x194>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a1c      	ldr	r2, [pc, #112]	; (8000530 <fsm_automatic_run+0x190>)
 80004c0:	6013      	str	r3, [r2, #0]
			sendDATA();
 80004c2:	f7ff fe43 	bl	800014c <sendDATA>
			time_red--;
 80004c6:	4b19      	ldr	r3, [pc, #100]	; (800052c <fsm_automatic_run+0x18c>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	3b01      	subs	r3, #1
 80004cc:	4a17      	ldr	r2, [pc, #92]	; (800052c <fsm_automatic_run+0x18c>)
 80004ce:	6013      	str	r3, [r2, #0]
			time_yellow--;
 80004d0:	4b18      	ldr	r3, [pc, #96]	; (8000534 <fsm_automatic_run+0x194>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	3b01      	subs	r3, #1
 80004d6:	4a17      	ldr	r2, [pc, #92]	; (8000534 <fsm_automatic_run+0x194>)
 80004d8:	6013      	str	r3, [r2, #0]
			if(time_yellow <= 0 || time_red <= 0){
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <fsm_automatic_run+0x194>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	dd03      	ble.n	80004ea <fsm_automatic_run+0x14a>
 80004e2:	4b12      	ldr	r3, [pc, #72]	; (800052c <fsm_automatic_run+0x18c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	dc17      	bgt.n	800051a <fsm_automatic_run+0x17a>
				time_green = _time_green;
 80004ea:	4b13      	ldr	r3, [pc, #76]	; (8000538 <fsm_automatic_run+0x198>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a0d      	ldr	r2, [pc, #52]	; (8000524 <fsm_automatic_run+0x184>)
 80004f0:	6013      	str	r3, [r2, #0]
				time_red = _time_red;
 80004f2:	4b12      	ldr	r3, [pc, #72]	; (800053c <fsm_automatic_run+0x19c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a0d      	ldr	r2, [pc, #52]	; (800052c <fsm_automatic_run+0x18c>)
 80004f8:	6013      	str	r3, [r2, #0]
				time_yellow = _time_yellow;
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <fsm_automatic_run+0x1a0>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <fsm_automatic_run+0x194>)
 8000500:	6013      	str	r3, [r2, #0]
				status_auto = GREEN1_RED2;
 8000502:	4b07      	ldr	r3, [pc, #28]	; (8000520 <fsm_automatic_run+0x180>)
 8000504:	2208      	movs	r2, #8
 8000506:	601a      	str	r2, [r3, #0]
			}
			break;
 8000508:	e007      	b.n	800051a <fsm_automatic_run+0x17a>
		default:
			break;
 800050a:	bf00      	nop
 800050c:	e006      	b.n	800051c <fsm_automatic_run+0x17c>
			break;
 800050e:	bf00      	nop
 8000510:	e004      	b.n	800051c <fsm_automatic_run+0x17c>
			break;
 8000512:	bf00      	nop
 8000514:	e002      	b.n	800051c <fsm_automatic_run+0x17c>
			break;
 8000516:	bf00      	nop
 8000518:	e000      	b.n	800051c <fsm_automatic_run+0x17c>
			break;
 800051a:	bf00      	nop
	}
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000008 	.word	0x20000008
 8000524:	20000154 	.word	0x20000154
 8000528:	20000158 	.word	0x20000158
 800052c:	20000190 	.word	0x20000190
 8000530:	20000198 	.word	0x20000198
 8000534:	2000019c 	.word	0x2000019c
 8000538:	20000068 	.word	0x20000068
 800053c:	20000060 	.word	0x20000060
 8000540:	20000064 	.word	0x20000064

08000544 <fsm_manual_run>:

#include "fsm_manual.h"
#include "global.h"
#include "traffic.h"

void fsm_manual_run(){
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	if(timer3_flag){
 8000548:	4b4b      	ldr	r3, [pc, #300]	; (8000678 <fsm_manual_run+0x134>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d005      	beq.n	800055c <fsm_manual_run+0x18>
		sendDATA_Manual();
 8000550:	f7ff fe68 	bl	8000224 <sendDATA_Manual>
		setTimer3(1000);
 8000554:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000558:	f000 ff32 	bl	80013c0 <setTimer3>
	}
	switch (status_manual) {
 800055c:	4b47      	ldr	r3, [pc, #284]	; (800067c <fsm_manual_run+0x138>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	3b0c      	subs	r3, #12
 8000562:	2b07      	cmp	r3, #7
 8000564:	d866      	bhi.n	8000634 <fsm_manual_run+0xf0>
 8000566:	a201      	add	r2, pc, #4	; (adr r2, 800056c <fsm_manual_run+0x28>)
 8000568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800056c:	080005cd 	.word	0x080005cd
 8000570:	080005e7 	.word	0x080005e7
 8000574:	08000601 	.word	0x08000601
 8000578:	08000635 	.word	0x08000635
 800057c:	08000635 	.word	0x08000635
 8000580:	08000635 	.word	0x08000635
 8000584:	0800061b 	.word	0x0800061b
 8000588:	0800058d 	.word	0x0800058d
		case MANUAL_0:
			if(preStatus == GREEN1_RED2){
 800058c:	4b3c      	ldr	r3, [pc, #240]	; (8000680 <fsm_manual_run+0x13c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b08      	cmp	r3, #8
 8000592:	d103      	bne.n	800059c <fsm_manual_run+0x58>
				status_manual = MANUAL_1;
 8000594:	4b39      	ldr	r3, [pc, #228]	; (800067c <fsm_manual_run+0x138>)
 8000596:	220c      	movs	r2, #12
 8000598:	601a      	str	r2, [r3, #0]
				status_manual = MANUAL_3;
			}
			else if(preStatus == RED1_YELLOW2){
				status_manual = MANUAL_4;
			}
			break;
 800059a:	e04d      	b.n	8000638 <fsm_manual_run+0xf4>
			else if(preStatus == YELLOW1_RED2){
 800059c:	4b38      	ldr	r3, [pc, #224]	; (8000680 <fsm_manual_run+0x13c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b09      	cmp	r3, #9
 80005a2:	d103      	bne.n	80005ac <fsm_manual_run+0x68>
				status_manual = MANUAL_2;
 80005a4:	4b35      	ldr	r3, [pc, #212]	; (800067c <fsm_manual_run+0x138>)
 80005a6:	220d      	movs	r2, #13
 80005a8:	601a      	str	r2, [r3, #0]
			break;
 80005aa:	e045      	b.n	8000638 <fsm_manual_run+0xf4>
			else if(preStatus == RED1_GREEN2){
 80005ac:	4b34      	ldr	r3, [pc, #208]	; (8000680 <fsm_manual_run+0x13c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b06      	cmp	r3, #6
 80005b2:	d103      	bne.n	80005bc <fsm_manual_run+0x78>
				status_manual = MANUAL_3;
 80005b4:	4b31      	ldr	r3, [pc, #196]	; (800067c <fsm_manual_run+0x138>)
 80005b6:	220e      	movs	r2, #14
 80005b8:	601a      	str	r2, [r3, #0]
			break;
 80005ba:	e03d      	b.n	8000638 <fsm_manual_run+0xf4>
			else if(preStatus == RED1_YELLOW2){
 80005bc:	4b30      	ldr	r3, [pc, #192]	; (8000680 <fsm_manual_run+0x13c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b07      	cmp	r3, #7
 80005c2:	d139      	bne.n	8000638 <fsm_manual_run+0xf4>
				status_manual = MANUAL_4;
 80005c4:	4b2d      	ldr	r3, [pc, #180]	; (800067c <fsm_manual_run+0x138>)
 80005c6:	2212      	movs	r2, #18
 80005c8:	601a      	str	r2, [r3, #0]
			break;
 80005ca:	e035      	b.n	8000638 <fsm_manual_run+0xf4>
		case MANUAL_1:
			turnOnGreenLed1();
 80005cc:	f000 fe26 	bl	800121c <turnOnGreenLed1>
			turnOnRedLed2();
 80005d0:	f000 fe38 	bl	8001244 <turnOnRedLed2>
			if(Button2IsPressed()){
 80005d4:	f000 fdd8 	bl	8001188 <Button2IsPressed>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d02e      	beq.n	800063c <fsm_manual_run+0xf8>
				status_manual = MANUAL_2;
 80005de:	4b27      	ldr	r3, [pc, #156]	; (800067c <fsm_manual_run+0x138>)
 80005e0:	220d      	movs	r2, #13
 80005e2:	601a      	str	r2, [r3, #0]
			}
			break;
 80005e4:	e02a      	b.n	800063c <fsm_manual_run+0xf8>
		case MANUAL_2:
			turnOnYellowLed1();
 80005e6:	f000 fe05 	bl	80011f4 <turnOnYellowLed1>
			turnOnRedLed2();
 80005ea:	f000 fe2b 	bl	8001244 <turnOnRedLed2>
			if(Button2IsPressed()){
 80005ee:	f000 fdcb 	bl	8001188 <Button2IsPressed>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d023      	beq.n	8000640 <fsm_manual_run+0xfc>
				status_manual = MANUAL_3;
 80005f8:	4b20      	ldr	r3, [pc, #128]	; (800067c <fsm_manual_run+0x138>)
 80005fa:	220e      	movs	r2, #14
 80005fc:	601a      	str	r2, [r3, #0]
			}
			break;
 80005fe:	e01f      	b.n	8000640 <fsm_manual_run+0xfc>
		case MANUAL_3:
			turnOnRedLed1();
 8000600:	f000 fde4 	bl	80011cc <turnOnRedLed1>
			turnOnGreenLed2();
 8000604:	f000 fe3e 	bl	8001284 <turnOnGreenLed2>
			if(Button2IsPressed()){
 8000608:	f000 fdbe 	bl	8001188 <Button2IsPressed>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d018      	beq.n	8000644 <fsm_manual_run+0x100>
				status_manual = MANUAL_4;
 8000612:	4b1a      	ldr	r3, [pc, #104]	; (800067c <fsm_manual_run+0x138>)
 8000614:	2212      	movs	r2, #18
 8000616:	601a      	str	r2, [r3, #0]
			}
			break;
 8000618:	e014      	b.n	8000644 <fsm_manual_run+0x100>
		case MANUAL_4:
			turnOnRedLed1();
 800061a:	f000 fdd7 	bl	80011cc <turnOnRedLed1>
			turnOnYellowLed2();
 800061e:	f000 fe21 	bl	8001264 <turnOnYellowLed2>
			if(Button2IsPressed()){
 8000622:	f000 fdb1 	bl	8001188 <Button2IsPressed>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d00d      	beq.n	8000648 <fsm_manual_run+0x104>
				status_manual = MANUAL_1;
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <fsm_manual_run+0x138>)
 800062e:	220c      	movs	r2, #12
 8000630:	601a      	str	r2, [r3, #0]
			}
			break;
 8000632:	e009      	b.n	8000648 <fsm_manual_run+0x104>
		default:
			break;
 8000634:	bf00      	nop
 8000636:	e008      	b.n	800064a <fsm_manual_run+0x106>
			break;
 8000638:	bf00      	nop
 800063a:	e006      	b.n	800064a <fsm_manual_run+0x106>
			break;
 800063c:	bf00      	nop
 800063e:	e004      	b.n	800064a <fsm_manual_run+0x106>
			break;
 8000640:	bf00      	nop
 8000642:	e002      	b.n	800064a <fsm_manual_run+0x106>
			break;
 8000644:	bf00      	nop
 8000646:	e000      	b.n	800064a <fsm_manual_run+0x106>
			break;
 8000648:	bf00      	nop
	}
	if(Button3IsPressed()){
 800064a:	f000 fda5 	bl	8001198 <Button3IsPressed>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d00e      	beq.n	8000672 <fsm_manual_run+0x12e>
		status = AUTOMATIC_MODE;
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <fsm_manual_run+0x140>)
 8000656:	22fe      	movs	r2, #254	; 0xfe
 8000658:	601a      	str	r2, [r3, #0]
		status_manual = MANUAL_0;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <fsm_manual_run+0x138>)
 800065c:	2213      	movs	r2, #19
 800065e:	601a      	str	r2, [r3, #0]
		status_auto = preStatus;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <fsm_manual_run+0x13c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a08      	ldr	r2, [pc, #32]	; (8000688 <fsm_manual_run+0x144>)
 8000666:	6013      	str	r3, [r2, #0]
		turnOffAllLed();
 8000668:	f000 fe58 	bl	800131c <turnOffAllLed>
		setTimer2(100);
 800066c:	2064      	movs	r0, #100	; 0x64
 800066e:	f000 fe8d 	bl	800138c <setTimer2>
	}
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000134 	.word	0x20000134
 800067c:	2000000c 	.word	0x2000000c
 8000680:	20000004 	.word	0x20000004
 8000684:	20000000 	.word	0x20000000
 8000688:	20000008 	.word	0x20000008

0800068c <RunSystem>:
#include "fsm_tuning.h"
#include "pedestrian.h"
#include "reading_button.h"
#include "main.h"

void RunSystem(){
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	switch (status) {
 8000690:	4b40      	ldr	r3, [pc, #256]	; (8000794 <RunSystem+0x108>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	3bfb      	subs	r3, #251	; 0xfb
 8000696:	2b04      	cmp	r3, #4
 8000698:	d870      	bhi.n	800077c <RunSystem+0xf0>
 800069a:	a201      	add	r2, pc, #4	; (adr r2, 80006a0 <RunSystem+0x14>)
 800069c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a0:	08000767 	.word	0x08000767
 80006a4:	0800072d 	.word	0x0800072d
 80006a8:	0800074d 	.word	0x0800074d
 80006ac:	080006cd 	.word	0x080006cd
 80006b0:	080006b5 	.word	0x080006b5
		case INIT:
			init_traffic_light();
 80006b4:	f001 f86c 	bl	8001790 <init_traffic_light>
			status = AUTOMATIC_MODE;
 80006b8:	4b36      	ldr	r3, [pc, #216]	; (8000794 <RunSystem+0x108>)
 80006ba:	22fe      	movs	r2, #254	; 0xfe
 80006bc:	601a      	str	r2, [r3, #0]
			status_auto = GREEN1_RED2;
 80006be:	4b36      	ldr	r3, [pc, #216]	; (8000798 <RunSystem+0x10c>)
 80006c0:	2208      	movs	r2, #8
 80006c2:	601a      	str	r2, [r3, #0]
			setTimer2(100);
 80006c4:	2064      	movs	r0, #100	; 0x64
 80006c6:	f000 fe61 	bl	800138c <setTimer2>
			break;
 80006ca:	e060      	b.n	800078e <RunSystem+0x102>
		case AUTOMATIC_MODE:
			if(timer2_flag == 1){
 80006cc:	4b33      	ldr	r3, [pc, #204]	; (800079c <RunSystem+0x110>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d105      	bne.n	80006e0 <RunSystem+0x54>
				fsm_automatic_run();
 80006d4:	f7ff fe64 	bl	80003a0 <fsm_automatic_run>
				setTimer2(1000);
 80006d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006dc:	f000 fe56 	bl	800138c <setTimer2>
			}
			if(Button1IsPressed()){
 80006e0:	f000 fd4a 	bl	8001178 <Button1IsPressed>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d00e      	beq.n	8000708 <RunSystem+0x7c>
				preStatus = status_auto;
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <RunSystem+0x10c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a2c      	ldr	r2, [pc, #176]	; (80007a0 <RunSystem+0x114>)
 80006f0:	6013      	str	r3, [r2, #0]
				turnOffAllLed();
 80006f2:	f000 fe13 	bl	800131c <turnOffAllLed>
				status = MANUAL_MODE;
 80006f6:	4b27      	ldr	r3, [pc, #156]	; (8000794 <RunSystem+0x108>)
 80006f8:	22fc      	movs	r2, #252	; 0xfc
 80006fa:	601a      	str	r2, [r3, #0]
				status_manual = MANUAL_0;
 80006fc:	4b29      	ldr	r3, [pc, #164]	; (80007a4 <RunSystem+0x118>)
 80006fe:	2213      	movs	r2, #19
 8000700:	601a      	str	r2, [r3, #0]
				setTimer3(100);
 8000702:	2064      	movs	r0, #100	; 0x64
 8000704:	f000 fe5c 	bl	80013c0 <setTimer3>
			}
			if(Button4IsPressed()){
 8000708:	f000 fd4e 	bl	80011a8 <Button4IsPressed>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d036      	beq.n	8000780 <RunSystem+0xf4>
				preStatus = status_auto;
 8000712:	4b21      	ldr	r3, [pc, #132]	; (8000798 <RunSystem+0x10c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a22      	ldr	r2, [pc, #136]	; (80007a0 <RunSystem+0x114>)
 8000718:	6013      	str	r3, [r2, #0]
				turnOffAllLed();
 800071a:	f000 fdff 	bl	800131c <turnOffAllLed>
				status = PEDES_MODE;
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <RunSystem+0x108>)
 8000720:	22fb      	movs	r2, #251	; 0xfb
 8000722:	601a      	str	r2, [r3, #0]
				setTimer2(100);
 8000724:	2064      	movs	r0, #100	; 0x64
 8000726:	f000 fe31 	bl	800138c <setTimer2>
			}
			break;
 800072a:	e029      	b.n	8000780 <RunSystem+0xf4>
		case MANUAL_MODE:
			fsm_manual_run();
 800072c:	f7ff ff0a 	bl	8000544 <fsm_manual_run>
			if(Button1IsPressed()){
 8000730:	f000 fd22 	bl	8001178 <Button1IsPressed>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d024      	beq.n	8000784 <RunSystem+0xf8>
				status = TUNING_MODE;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <RunSystem+0x108>)
 800073c:	22fd      	movs	r2, #253	; 0xfd
 800073e:	601a      	str	r2, [r3, #0]
				setTimer3(100);
 8000740:	2064      	movs	r0, #100	; 0x64
 8000742:	f000 fe3d 	bl	80013c0 <setTimer3>
				turnOffAllLed();
 8000746:	f000 fde9 	bl	800131c <turnOffAllLed>
			}
			break;
 800074a:	e01b      	b.n	8000784 <RunSystem+0xf8>
		case TUNING_MODE:
			fsm_tuning_run();
 800074c:	f000 f82c 	bl	80007a8 <fsm_tuning_run>
			if(Button1IsPressed()){
 8000750:	f000 fd12 	bl	8001178 <Button1IsPressed>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d016      	beq.n	8000788 <RunSystem+0xfc>
				status = AUTOMATIC_MODE;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <RunSystem+0x108>)
 800075c:	22fe      	movs	r2, #254	; 0xfe
 800075e:	601a      	str	r2, [r3, #0]
				turnOffAllLed();
 8000760:	f000 fddc 	bl	800131c <turnOffAllLed>
			}
			break;
 8000764:	e010      	b.n	8000788 <RunSystem+0xfc>
		case PEDES_MODE:
			if(timer2_flag){
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <RunSystem+0x110>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d00e      	beq.n	800078c <RunSystem+0x100>
				pedestrian_run();
 800076e:	f000 fb4d 	bl	8000e0c <pedestrian_run>
				setTimer2(1000);
 8000772:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000776:	f000 fe09 	bl	800138c <setTimer2>
			}
			break;
 800077a:	e007      	b.n	800078c <RunSystem+0x100>
		default:
			break;
 800077c:	bf00      	nop
 800077e:	e006      	b.n	800078e <RunSystem+0x102>
			break;
 8000780:	bf00      	nop
 8000782:	e004      	b.n	800078e <RunSystem+0x102>
			break;
 8000784:	bf00      	nop
 8000786:	e002      	b.n	800078e <RunSystem+0x102>
			break;
 8000788:	bf00      	nop
 800078a:	e000      	b.n	800078e <RunSystem+0x102>
			break;
 800078c:	bf00      	nop
	}
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000000 	.word	0x20000000
 8000798:	20000008 	.word	0x20000008
 800079c:	2000012c 	.word	0x2000012c
 80007a0:	20000004 	.word	0x20000004
 80007a4:	2000000c 	.word	0x2000000c

080007a8 <fsm_tuning_run>:

#include "global.h"
#include "traffic.h"
#include "fsm_tuning.h"

void fsm_tuning_run(){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	switch (status_tuning) {
 80007ac:	4b88      	ldr	r3, [pc, #544]	; (80009d0 <fsm_tuning_run+0x228>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b11      	cmp	r3, #17
 80007b2:	f000 80b3 	beq.w	800091c <fsm_tuning_run+0x174>
 80007b6:	2b11      	cmp	r3, #17
 80007b8:	f300 8101 	bgt.w	80009be <fsm_tuning_run+0x216>
 80007bc:	2b0f      	cmp	r3, #15
 80007be:	d002      	beq.n	80007c6 <fsm_tuning_run+0x1e>
 80007c0:	2b10      	cmp	r3, #16
 80007c2:	d05b      	beq.n	800087c <fsm_tuning_run+0xd4>
				counter = 0;
				status = AUTOMATIC_MODE;
			}
			break;
		default:
			break;
 80007c4:	e0fb      	b.n	80009be <fsm_tuning_run+0x216>
			turnOnRedLed1();
 80007c6:	f000 fd01 	bl	80011cc <turnOnRedLed1>
			turnOnRedLed2();
 80007ca:	f000 fd3b 	bl	8001244 <turnOnRedLed2>
			if(Button2IsPressed()){
 80007ce:	f000 fcdb 	bl	8001188 <Button2IsPressed>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d006      	beq.n	80007e6 <fsm_tuning_run+0x3e>
				counter++;
 80007d8:	4b7e      	ldr	r3, [pc, #504]	; (80009d4 <fsm_tuning_run+0x22c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	3301      	adds	r3, #1
 80007de:	4a7d      	ldr	r2, [pc, #500]	; (80009d4 <fsm_tuning_run+0x22c>)
 80007e0:	6013      	str	r3, [r2, #0]
				sendVALUE_SETTING();
 80007e2:	f7ff fd7b 	bl	80002dc <sendVALUE_SETTING>
			if(Button4IsPressed()){
 80007e6:	f000 fcdf 	bl	80011a8 <Button4IsPressed>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d006      	beq.n	80007fe <fsm_tuning_run+0x56>
				counter--;
 80007f0:	4b78      	ldr	r3, [pc, #480]	; (80009d4 <fsm_tuning_run+0x22c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	3b01      	subs	r3, #1
 80007f6:	4a77      	ldr	r2, [pc, #476]	; (80009d4 <fsm_tuning_run+0x22c>)
 80007f8:	6013      	str	r3, [r2, #0]
				sendVALUE_SETTING();
 80007fa:	f7ff fd6f 	bl	80002dc <sendVALUE_SETTING>
			if(Button1IsPressed()){
 80007fe:	f000 fcbb 	bl	8001178 <Button1IsPressed>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d00a      	beq.n	800081e <fsm_tuning_run+0x76>
				status = TUNING_YELLOW_MODE;
 8000808:	4b73      	ldr	r3, [pc, #460]	; (80009d8 <fsm_tuning_run+0x230>)
 800080a:	2210      	movs	r2, #16
 800080c:	601a      	str	r2, [r3, #0]
				counter = 0;
 800080e:	4b71      	ldr	r3, [pc, #452]	; (80009d4 <fsm_tuning_run+0x22c>)
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
				setTimer3(100);
 8000814:	2064      	movs	r0, #100	; 0x64
 8000816:	f000 fdd3 	bl	80013c0 <setTimer3>
				turnOffAllLed();
 800081a:	f000 fd7f 	bl	800131c <turnOffAllLed>
			if(Button3IsPressed()){
 800081e:	f000 fcbb 	bl	8001198 <Button3IsPressed>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	f000 80cc 	beq.w	80009c2 <fsm_tuning_run+0x21a>
				_time_red += counter;
 800082a:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <fsm_tuning_run+0x234>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	4b69      	ldr	r3, [pc, #420]	; (80009d4 <fsm_tuning_run+0x22c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4413      	add	r3, r2
 8000834:	4a69      	ldr	r2, [pc, #420]	; (80009dc <fsm_tuning_run+0x234>)
 8000836:	6013      	str	r3, [r2, #0]
				_time_yellow += (int) counter/3;
 8000838:	4b66      	ldr	r3, [pc, #408]	; (80009d4 <fsm_tuning_run+0x22c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a68      	ldr	r2, [pc, #416]	; (80009e0 <fsm_tuning_run+0x238>)
 800083e:	fb82 1203 	smull	r1, r2, r2, r3
 8000842:	17db      	asrs	r3, r3, #31
 8000844:	1ad2      	subs	r2, r2, r3
 8000846:	4b67      	ldr	r3, [pc, #412]	; (80009e4 <fsm_tuning_run+0x23c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4413      	add	r3, r2
 800084c:	4a65      	ldr	r2, [pc, #404]	; (80009e4 <fsm_tuning_run+0x23c>)
 800084e:	6013      	str	r3, [r2, #0]
				_time_green += counter - ((int) counter/3);
 8000850:	4b60      	ldr	r3, [pc, #384]	; (80009d4 <fsm_tuning_run+0x22c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a62      	ldr	r2, [pc, #392]	; (80009e0 <fsm_tuning_run+0x238>)
 8000856:	fb82 1203 	smull	r1, r2, r2, r3
 800085a:	17db      	asrs	r3, r3, #31
 800085c:	1a9a      	subs	r2, r3, r2
 800085e:	4b5d      	ldr	r3, [pc, #372]	; (80009d4 <fsm_tuning_run+0x22c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	441a      	add	r2, r3
 8000864:	4b60      	ldr	r3, [pc, #384]	; (80009e8 <fsm_tuning_run+0x240>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4413      	add	r3, r2
 800086a:	4a5f      	ldr	r2, [pc, #380]	; (80009e8 <fsm_tuning_run+0x240>)
 800086c:	6013      	str	r3, [r2, #0]
				counter = 0;
 800086e:	4b59      	ldr	r3, [pc, #356]	; (80009d4 <fsm_tuning_run+0x22c>)
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
				status = AUTOMATIC_MODE;
 8000874:	4b58      	ldr	r3, [pc, #352]	; (80009d8 <fsm_tuning_run+0x230>)
 8000876:	22fe      	movs	r2, #254	; 0xfe
 8000878:	601a      	str	r2, [r3, #0]
			break;
 800087a:	e0a2      	b.n	80009c2 <fsm_tuning_run+0x21a>
			turnOnYellowLed1();
 800087c:	f000 fcba 	bl	80011f4 <turnOnYellowLed1>
			turnOnYellowLed2();
 8000880:	f000 fcf0 	bl	8001264 <turnOnYellowLed2>
			if(Button2IsPressed()){
 8000884:	f000 fc80 	bl	8001188 <Button2IsPressed>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d006      	beq.n	800089c <fsm_tuning_run+0xf4>
				counter++;
 800088e:	4b51      	ldr	r3, [pc, #324]	; (80009d4 <fsm_tuning_run+0x22c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	3301      	adds	r3, #1
 8000894:	4a4f      	ldr	r2, [pc, #316]	; (80009d4 <fsm_tuning_run+0x22c>)
 8000896:	6013      	str	r3, [r2, #0]
				sendVALUE_SETTING();
 8000898:	f7ff fd20 	bl	80002dc <sendVALUE_SETTING>
			if(Button4IsPressed()){
 800089c:	f000 fc84 	bl	80011a8 <Button4IsPressed>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d006      	beq.n	80008b4 <fsm_tuning_run+0x10c>
				counter--;
 80008a6:	4b4b      	ldr	r3, [pc, #300]	; (80009d4 <fsm_tuning_run+0x22c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	4a49      	ldr	r2, [pc, #292]	; (80009d4 <fsm_tuning_run+0x22c>)
 80008ae:	6013      	str	r3, [r2, #0]
				sendVALUE_SETTING();
 80008b0:	f7ff fd14 	bl	80002dc <sendVALUE_SETTING>
			if(Button1IsPressed()){
 80008b4:	f000 fc60 	bl	8001178 <Button1IsPressed>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d00a      	beq.n	80008d4 <fsm_tuning_run+0x12c>
				status = TUNING_GREEN_MODE;
 80008be:	4b46      	ldr	r3, [pc, #280]	; (80009d8 <fsm_tuning_run+0x230>)
 80008c0:	2211      	movs	r2, #17
 80008c2:	601a      	str	r2, [r3, #0]
				counter = 0;
 80008c4:	4b43      	ldr	r3, [pc, #268]	; (80009d4 <fsm_tuning_run+0x22c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
				setTimer3(100);
 80008ca:	2064      	movs	r0, #100	; 0x64
 80008cc:	f000 fd78 	bl	80013c0 <setTimer3>
				turnOffAllLed();
 80008d0:	f000 fd24 	bl	800131c <turnOffAllLed>
			if(Button3IsPressed()){
 80008d4:	f000 fc60 	bl	8001198 <Button3IsPressed>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d073      	beq.n	80009c6 <fsm_tuning_run+0x21e>
				_time_yellow += counter;
 80008de:	4b41      	ldr	r3, [pc, #260]	; (80009e4 <fsm_tuning_run+0x23c>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	4b3c      	ldr	r3, [pc, #240]	; (80009d4 <fsm_tuning_run+0x22c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	4a3e      	ldr	r2, [pc, #248]	; (80009e4 <fsm_tuning_run+0x23c>)
 80008ea:	6013      	str	r3, [r2, #0]
				_time_red += counter*3;
 80008ec:	4b39      	ldr	r3, [pc, #228]	; (80009d4 <fsm_tuning_run+0x22c>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4613      	mov	r3, r2
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	441a      	add	r2, r3
 80008f6:	4b39      	ldr	r3, [pc, #228]	; (80009dc <fsm_tuning_run+0x234>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	4a37      	ldr	r2, [pc, #220]	; (80009dc <fsm_tuning_run+0x234>)
 80008fe:	6013      	str	r3, [r2, #0]
				_time_green = _time_red - _time_yellow;
 8000900:	4b36      	ldr	r3, [pc, #216]	; (80009dc <fsm_tuning_run+0x234>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b37      	ldr	r3, [pc, #220]	; (80009e4 <fsm_tuning_run+0x23c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	4a37      	ldr	r2, [pc, #220]	; (80009e8 <fsm_tuning_run+0x240>)
 800090c:	6013      	str	r3, [r2, #0]
				counter = 0;
 800090e:	4b31      	ldr	r3, [pc, #196]	; (80009d4 <fsm_tuning_run+0x22c>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
				status = AUTOMATIC_MODE;
 8000914:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <fsm_tuning_run+0x230>)
 8000916:	22fe      	movs	r2, #254	; 0xfe
 8000918:	601a      	str	r2, [r3, #0]
			break;
 800091a:	e054      	b.n	80009c6 <fsm_tuning_run+0x21e>
			turnOnGreenLed1();
 800091c:	f000 fc7e 	bl	800121c <turnOnGreenLed1>
			turnOnGreenLed2();
 8000920:	f000 fcb0 	bl	8001284 <turnOnGreenLed2>
			if(Button2IsPressed()){
 8000924:	f000 fc30 	bl	8001188 <Button2IsPressed>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d006      	beq.n	800093c <fsm_tuning_run+0x194>
				counter++;
 800092e:	4b29      	ldr	r3, [pc, #164]	; (80009d4 <fsm_tuning_run+0x22c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3301      	adds	r3, #1
 8000934:	4a27      	ldr	r2, [pc, #156]	; (80009d4 <fsm_tuning_run+0x22c>)
 8000936:	6013      	str	r3, [r2, #0]
				sendVALUE_SETTING();
 8000938:	f7ff fcd0 	bl	80002dc <sendVALUE_SETTING>
			if(Button4IsPressed()){
 800093c:	f000 fc34 	bl	80011a8 <Button4IsPressed>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d006      	beq.n	8000954 <fsm_tuning_run+0x1ac>
				counter--;
 8000946:	4b23      	ldr	r3, [pc, #140]	; (80009d4 <fsm_tuning_run+0x22c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	3b01      	subs	r3, #1
 800094c:	4a21      	ldr	r2, [pc, #132]	; (80009d4 <fsm_tuning_run+0x22c>)
 800094e:	6013      	str	r3, [r2, #0]
				sendVALUE_SETTING();
 8000950:	f7ff fcc4 	bl	80002dc <sendVALUE_SETTING>
			if(Button1IsPressed()){
 8000954:	f000 fc10 	bl	8001178 <Button1IsPressed>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d00a      	beq.n	8000974 <fsm_tuning_run+0x1cc>
				status = TUNING_RED_MODE;
 800095e:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <fsm_tuning_run+0x230>)
 8000960:	220f      	movs	r2, #15
 8000962:	601a      	str	r2, [r3, #0]
				counter = 0;
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <fsm_tuning_run+0x22c>)
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
				setTimer3(100);
 800096a:	2064      	movs	r0, #100	; 0x64
 800096c:	f000 fd28 	bl	80013c0 <setTimer3>
				turnOffAllLed();
 8000970:	f000 fcd4 	bl	800131c <turnOffAllLed>
			if(Button3IsPressed()){
 8000974:	f000 fc10 	bl	8001198 <Button3IsPressed>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d025      	beq.n	80009ca <fsm_tuning_run+0x222>
				_time_green += counter;
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <fsm_tuning_run+0x240>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <fsm_tuning_run+0x22c>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a17      	ldr	r2, [pc, #92]	; (80009e8 <fsm_tuning_run+0x240>)
 800098a:	6013      	str	r3, [r2, #0]
				_time_yellow += (int) counter/2;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <fsm_tuning_run+0x22c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	0fda      	lsrs	r2, r3, #31
 8000992:	4413      	add	r3, r2
 8000994:	105b      	asrs	r3, r3, #1
 8000996:	461a      	mov	r2, r3
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <fsm_tuning_run+0x23c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4413      	add	r3, r2
 800099e:	4a11      	ldr	r2, [pc, #68]	; (80009e4 <fsm_tuning_run+0x23c>)
 80009a0:	6013      	str	r3, [r2, #0]
				_time_red = _time_green + _time_yellow;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <fsm_tuning_run+0x240>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <fsm_tuning_run+0x23c>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <fsm_tuning_run+0x234>)
 80009ae:	6013      	str	r3, [r2, #0]
				counter = 0;
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <fsm_tuning_run+0x22c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
				status = AUTOMATIC_MODE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <fsm_tuning_run+0x230>)
 80009b8:	22fe      	movs	r2, #254	; 0xfe
 80009ba:	601a      	str	r2, [r3, #0]
			break;
 80009bc:	e005      	b.n	80009ca <fsm_tuning_run+0x222>
			break;
 80009be:	bf00      	nop
 80009c0:	e004      	b.n	80009cc <fsm_tuning_run+0x224>
			break;
 80009c2:	bf00      	nop
 80009c4:	e002      	b.n	80009cc <fsm_tuning_run+0x224>
			break;
 80009c6:	bf00      	nop
 80009c8:	e000      	b.n	80009cc <fsm_tuning_run+0x224>
			break;
 80009ca:	bf00      	nop
	}
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000010 	.word	0x20000010
 80009d4:	20000194 	.word	0x20000194
 80009d8:	20000000 	.word	0x20000000
 80009dc:	20000060 	.word	0x20000060
 80009e0:	55555556 	.word	0x55555556
 80009e4:	20000064 	.word	0x20000064
 80009e8:	20000068 	.word	0x20000068

080009ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f0:	f000 ff18 	bl	8001824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f4:	f000 f85c 	bl	8000ab0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f8:	f000 f988 	bl	8000d0c <MX_GPIO_Init>
  MX_TIM2_Init();
 80009fc:	f000 f89a 	bl	8000b34 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a00:	f000 f8e4 	bl	8000bcc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000a04:	f000 f958 	bl	8000cb8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  status = INIT;
 8000a08:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <main+0xa4>)
 8000a0a:	22ff      	movs	r2, #255	; 0xff
 8000a0c:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4820      	ldr	r0, [pc, #128]	; (8000a94 <main+0xa8>)
 8000a12:	f002 f807 	bl	8002a24 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000a16:	4820      	ldr	r0, [pc, #128]	; (8000a98 <main+0xac>)
 8000a18:	f001 ff5a 	bl	80028d0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(100);
 8000a1c:	2064      	movs	r0, #100	; 0x64
 8000a1e:	f000 fc9b 	bl	8001358 <setTimer1>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(timer1_flag){
 8000a22:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <main+0xb0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d005      	beq.n	8000a36 <main+0x4a>
		  testLed();
 8000a2a:	f000 fbc5 	bl	80011b8 <testLed>
		  setTimer1(500);
 8000a2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a32:	f000 fc91 	bl	8001358 <setTimer1>
	  }
	  RunSystem();
 8000a36:	f7ff fe29 	bl	800068c <RunSystem>
	  if(status_pedestrian == PEDES_3){
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <main+0xb4>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b1e      	cmp	r3, #30
 8000a40:	d1ef      	bne.n	8000a22 <main+0x36>
		  if(timer3_flag == 1){
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <main+0xb8>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d1eb      	bne.n	8000a22 <main+0x36>
			  if(count_ped_buzzer%10 == 0){
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <main+0xbc>)
 8000a4c:	6819      	ldr	r1, [r3, #0]
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <main+0xc0>)
 8000a50:	fb83 2301 	smull	r2, r3, r3, r1
 8000a54:	109a      	asrs	r2, r3, #2
 8000a56:	17cb      	asrs	r3, r1, #31
 8000a58:	1ad2      	subs	r2, r2, r3
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	4413      	add	r3, r2
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	1aca      	subs	r2, r1, r3
 8000a64:	2a00      	cmp	r2, #0
 8000a66:	d105      	bne.n	8000a74 <main+0x88>
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, count_ped_buzzer);
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <main+0xbc>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <main+0xa8>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	635a      	str	r2, [r3, #52]	; 0x34
 8000a72:	e003      	b.n	8000a7c <main+0x90>
			  }
			  else{
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <main+0xa8>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	635a      	str	r2, [r3, #52]	; 0x34
			  }
			  count_ped_buzzer += 5;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <main+0xbc>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3305      	adds	r3, #5
 8000a82:	4a09      	ldr	r2, [pc, #36]	; (8000aa8 <main+0xbc>)
 8000a84:	6013      	str	r3, [r2, #0]
			  setTimer3(250);
 8000a86:	20fa      	movs	r0, #250	; 0xfa
 8000a88:	f000 fc9a 	bl	80013c0 <setTimer3>
	  if(timer1_flag){
 8000a8c:	e7c9      	b.n	8000a22 <main+0x36>
 8000a8e:	bf00      	nop
 8000a90:	20000000 	.word	0x20000000
 8000a94:	200001a0 	.word	0x200001a0
 8000a98:	200001e8 	.word	0x200001e8
 8000a9c:	20000124 	.word	0x20000124
 8000aa0:	20000014 	.word	0x20000014
 8000aa4:	20000134 	.word	0x20000134
 8000aa8:	20000148 	.word	0x20000148
 8000aac:	66666667 	.word	0x66666667

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b090      	sub	sp, #64	; 0x40
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0318 	add.w	r3, r7, #24
 8000aba:	2228      	movs	r2, #40	; 0x28
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f003 fb16 	bl	80040f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ada:	2310      	movs	r3, #16
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000ae6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000aea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aec:	f107 0318 	add.w	r3, r7, #24
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 fa83 	bl	8001ffc <HAL_RCC_OscConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000afc:	f000 f980 	bl	8000e00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b00:	230f      	movs	r3, #15
 8000b02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b04:	2302      	movs	r3, #2
 8000b06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2102      	movs	r1, #2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 fcee 	bl	80024fc <HAL_RCC_ClockConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b26:	f000 f96b 	bl	8000e00 <Error_Handler>
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	3740      	adds	r7, #64	; 0x40
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3a:	f107 0308 	add.w	r3, r7, #8
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b48:	463b      	mov	r3, r7
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b50:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <MX_TIM2_Init+0x94>)
 8000b52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <MX_TIM2_Init+0x94>)
 8000b5a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000b5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b60:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <MX_TIM2_Init+0x94>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <MX_TIM2_Init+0x94>)
 8000b68:	2209      	movs	r2, #9
 8000b6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <MX_TIM2_Init+0x94>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <MX_TIM2_Init+0x94>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b78:	4813      	ldr	r0, [pc, #76]	; (8000bc8 <MX_TIM2_Init+0x94>)
 8000b7a:	f001 fe59 	bl	8002830 <HAL_TIM_Base_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b84:	f000 f93c 	bl	8000e00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b8e:	f107 0308 	add.w	r3, r7, #8
 8000b92:	4619      	mov	r1, r3
 8000b94:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <MX_TIM2_Init+0x94>)
 8000b96:	f002 f9ad 	bl	8002ef4 <HAL_TIM_ConfigClockSource>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ba0:	f000 f92e 	bl	8000e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bac:	463b      	mov	r3, r7
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_TIM2_Init+0x94>)
 8000bb2:	f002 fd2b 	bl	800360c <HAL_TIMEx_MasterConfigSynchronization>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bbc:	f000 f920 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200001e8 	.word	0x200001e8

08000bcc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08e      	sub	sp, #56	; 0x38
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be0:	f107 0320 	add.w	r3, r7, #32
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
 8000bf8:	615a      	str	r2, [r3, #20]
 8000bfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bfc:	4b2c      	ldr	r3, [pc, #176]	; (8000cb0 <MX_TIM3_Init+0xe4>)
 8000bfe:	4a2d      	ldr	r2, [pc, #180]	; (8000cb4 <MX_TIM3_Init+0xe8>)
 8000c00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000c02:	4b2b      	ldr	r3, [pc, #172]	; (8000cb0 <MX_TIM3_Init+0xe4>)
 8000c04:	223f      	movs	r2, #63	; 0x3f
 8000c06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c08:	4b29      	ldr	r3, [pc, #164]	; (8000cb0 <MX_TIM3_Init+0xe4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c0e:	4b28      	ldr	r3, [pc, #160]	; (8000cb0 <MX_TIM3_Init+0xe4>)
 8000c10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c16:	4b26      	ldr	r3, [pc, #152]	; (8000cb0 <MX_TIM3_Init+0xe4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c1c:	4b24      	ldr	r3, [pc, #144]	; (8000cb0 <MX_TIM3_Init+0xe4>)
 8000c1e:	2280      	movs	r2, #128	; 0x80
 8000c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c22:	4823      	ldr	r0, [pc, #140]	; (8000cb0 <MX_TIM3_Init+0xe4>)
 8000c24:	f001 fe04 	bl	8002830 <HAL_TIM_Base_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c2e:	f000 f8e7 	bl	8000e00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	481c      	ldr	r0, [pc, #112]	; (8000cb0 <MX_TIM3_Init+0xe4>)
 8000c40:	f002 f958 	bl	8002ef4 <HAL_TIM_ConfigClockSource>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c4a:	f000 f8d9 	bl	8000e00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c4e:	4818      	ldr	r0, [pc, #96]	; (8000cb0 <MX_TIM3_Init+0xe4>)
 8000c50:	f001 fe90 	bl	8002974 <HAL_TIM_PWM_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c5a:	f000 f8d1 	bl	8000e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c66:	f107 0320 	add.w	r3, r7, #32
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4810      	ldr	r0, [pc, #64]	; (8000cb0 <MX_TIM3_Init+0xe4>)
 8000c6e:	f002 fccd 	bl	800360c <HAL_TIMEx_MasterConfigSynchronization>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c78:	f000 f8c2 	bl	8000e00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c7c:	2360      	movs	r3, #96	; 0x60
 8000c7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	4619      	mov	r1, r3
 8000c92:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <MX_TIM3_Init+0xe4>)
 8000c94:	f002 f870 	bl	8002d78 <HAL_TIM_PWM_ConfigChannel>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000c9e:	f000 f8af 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ca2:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <MX_TIM3_Init+0xe4>)
 8000ca4:	f000 fc6e 	bl	8001584 <HAL_TIM_MspPostInit>

}
 8000ca8:	bf00      	nop
 8000caa:	3738      	adds	r7, #56	; 0x38
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200001a0 	.word	0x200001a0
 8000cb4:	40000400 	.word	0x40000400

08000cb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <MX_USART2_UART_Init+0x50>)
 8000cc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cc4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cde:	220c      	movs	r2, #12
 8000ce0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cf0:	f002 fcfc 	bl	80036ec <HAL_UART_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cfa:	f000 f881 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000230 	.word	0x20000230
 8000d08:	40004400 	.word	0x40004400

08000d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d12:	f107 0308 	add.w	r3, r7, #8
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d20:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <MX_GPIO_Init+0xd0>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a2d      	ldr	r2, [pc, #180]	; (8000ddc <MX_GPIO_Init+0xd0>)
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <MX_GPIO_Init+0xd0>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d38:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <MX_GPIO_Init+0xd0>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a27      	ldr	r2, [pc, #156]	; (8000ddc <MX_GPIO_Init+0xd0>)
 8000d3e:	f043 0308 	orr.w	r3, r3, #8
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <MX_GPIO_Init+0xd0>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 0308 	and.w	r3, r3, #8
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000d56:	4822      	ldr	r0, [pc, #136]	; (8000de0 <MX_GPIO_Init+0xd4>)
 8000d58:	f001 f91f 	bl	8001f9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000d62:	4820      	ldr	r0, [pc, #128]	; (8000de4 <MX_GPIO_Init+0xd8>)
 8000d64:	f001 f919 	bl	8001f9a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8000d68:	2313      	movs	r3, #19
 8000d6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	f107 0308 	add.w	r3, r7, #8
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4819      	ldr	r0, [pc, #100]	; (8000de0 <MX_GPIO_Init+0xd4>)
 8000d7c:	f000 ff72 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = LED_Pin|D7_Pin|D2_Pin;
 8000d80:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000d84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	4619      	mov	r1, r3
 8000d98:	4811      	ldr	r0, [pc, #68]	; (8000de0 <MX_GPIO_Init+0xd4>)
 8000d9a:	f000 ff63 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	4619      	mov	r1, r3
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <MX_GPIO_Init+0xd8>)
 8000db2:	f000 ff57 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000db6:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000dba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_GPIO_Init+0xd8>)
 8000dd0:	f000 ff48 	bl	8001c64 <HAL_GPIO_Init>

}
 8000dd4:	bf00      	nop
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010800 	.word	0x40010800
 8000de4:	40010c00 	.word	0x40010c00

08000de8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	timerRun();
 8000df0:	f000 fb00 	bl	80013f4 <timerRun>
	ReadingButton();
 8000df4:	f000 f8ce 	bl	8000f94 <ReadingButton>
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e04:	b672      	cpsid	i
}
 8000e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <Error_Handler+0x8>
	...

08000e0c <pedestrian_run>:
 */

#include "global.h"
#include "pedestrian.h"

void pedestrian_run(){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
		sendDATA();
 8000e10:	f7ff f99c 	bl	800014c <sendDATA>
		switch (status_pedestrian) {
 8000e14:	4b54      	ldr	r3, [pc, #336]	; (8000f68 <pedestrian_run+0x15c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3b1b      	subs	r3, #27
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	f200 809d 	bhi.w	8000f5a <pedestrian_run+0x14e>
 8000e20:	a201      	add	r2, pc, #4	; (adr r2, 8000e28 <pedestrian_run+0x1c>)
 8000e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e26:	bf00      	nop
 8000e28:	08000e39 	.word	0x08000e39
 8000e2c:	08000e57 	.word	0x08000e57
 8000e30:	08000e9f 	.word	0x08000e9f
 8000e34:	08000efb 	.word	0x08000efb
			case PEDES_0:
				status_pedestrian = PEDES_1;
 8000e38:	4b4b      	ldr	r3, [pc, #300]	; (8000f68 <pedestrian_run+0x15c>)
 8000e3a:	221c      	movs	r2, #28
 8000e3c:	601a      	str	r2, [r3, #0]
				status_auto = YELLOW1_RED2;
 8000e3e:	4b4b      	ldr	r3, [pc, #300]	; (8000f6c <pedestrian_run+0x160>)
 8000e40:	2209      	movs	r2, #9
 8000e42:	601a      	str	r2, [r3, #0]
				time_yellow = _time_yellow;
 8000e44:	4b4a      	ldr	r3, [pc, #296]	; (8000f70 <pedestrian_run+0x164>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a4a      	ldr	r2, [pc, #296]	; (8000f74 <pedestrian_run+0x168>)
 8000e4a:	6013      	str	r3, [r2, #0]
				time_red = _time_red;
 8000e4c:	4b4a      	ldr	r3, [pc, #296]	; (8000f78 <pedestrian_run+0x16c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a4a      	ldr	r2, [pc, #296]	; (8000f7c <pedestrian_run+0x170>)
 8000e52:	6013      	str	r3, [r2, #0]
				break;
 8000e54:	e086      	b.n	8000f64 <pedestrian_run+0x158>
			case PEDES_1:
				turnOnYellowLed1();
 8000e56:	f000 f9cd 	bl	80011f4 <turnOnYellowLed1>
				turnOnRedLed2();
 8000e5a:	f000 f9f3 	bl	8001244 <turnOnRedLed2>
				turnOnPesRedLed();
 8000e5e:	f000 fa21 	bl	80012a4 <turnOnPesRedLed>
				timeOfPhase1 = time_yellow;
 8000e62:	4b44      	ldr	r3, [pc, #272]	; (8000f74 <pedestrian_run+0x168>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a46      	ldr	r2, [pc, #280]	; (8000f80 <pedestrian_run+0x174>)
 8000e68:	6013      	str	r3, [r2, #0]
				timeOfPhase2 = time_yellow;
 8000e6a:	4b42      	ldr	r3, [pc, #264]	; (8000f74 <pedestrian_run+0x168>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a45      	ldr	r2, [pc, #276]	; (8000f84 <pedestrian_run+0x178>)
 8000e70:	6013      	str	r3, [r2, #0]
				sendDATA();
 8000e72:	f7ff f96b 	bl	800014c <sendDATA>
				time_yellow--;
 8000e76:	4b3f      	ldr	r3, [pc, #252]	; (8000f74 <pedestrian_run+0x168>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	4a3d      	ldr	r2, [pc, #244]	; (8000f74 <pedestrian_run+0x168>)
 8000e7e:	6013      	str	r3, [r2, #0]
				if(time_yellow <= 0){
 8000e80:	4b3c      	ldr	r3, [pc, #240]	; (8000f74 <pedestrian_run+0x168>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	dc6a      	bgt.n	8000f5e <pedestrian_run+0x152>
					time_yellow = _time_yellow;
 8000e88:	4b39      	ldr	r3, [pc, #228]	; (8000f70 <pedestrian_run+0x164>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a39      	ldr	r2, [pc, #228]	; (8000f74 <pedestrian_run+0x168>)
 8000e8e:	6013      	str	r3, [r2, #0]
					status_auto = RED1_GREEN2;
 8000e90:	4b36      	ldr	r3, [pc, #216]	; (8000f6c <pedestrian_run+0x160>)
 8000e92:	2206      	movs	r2, #6
 8000e94:	601a      	str	r2, [r3, #0]
					status_pedestrian = PEDES_2;
 8000e96:	4b34      	ldr	r3, [pc, #208]	; (8000f68 <pedestrian_run+0x15c>)
 8000e98:	221d      	movs	r2, #29
 8000e9a:	601a      	str	r2, [r3, #0]
				}
				break;
 8000e9c:	e05f      	b.n	8000f5e <pedestrian_run+0x152>
			case PEDES_2:
				turnOnRedLed1();
 8000e9e:	f000 f995 	bl	80011cc <turnOnRedLed1>
				turnOnGreenLed2();
 8000ea2:	f000 f9ef 	bl	8001284 <turnOnGreenLed2>
				turnOnPesGreenLed();
 8000ea6:	f000 fa11 	bl	80012cc <turnOnPesGreenLed>
				timeOfPhase1 = time_red;
 8000eaa:	4b34      	ldr	r3, [pc, #208]	; (8000f7c <pedestrian_run+0x170>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a34      	ldr	r2, [pc, #208]	; (8000f80 <pedestrian_run+0x174>)
 8000eb0:	6013      	str	r3, [r2, #0]
				timeOfPhase2 = time_green;
 8000eb2:	4b35      	ldr	r3, [pc, #212]	; (8000f88 <pedestrian_run+0x17c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a33      	ldr	r2, [pc, #204]	; (8000f84 <pedestrian_run+0x178>)
 8000eb8:	6013      	str	r3, [r2, #0]
				sendDATA();
 8000eba:	f7ff f947 	bl	800014c <sendDATA>
				time_green--;
 8000ebe:	4b32      	ldr	r3, [pc, #200]	; (8000f88 <pedestrian_run+0x17c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	4a30      	ldr	r2, [pc, #192]	; (8000f88 <pedestrian_run+0x17c>)
 8000ec6:	6013      	str	r3, [r2, #0]
				time_red--;
 8000ec8:	4b2c      	ldr	r3, [pc, #176]	; (8000f7c <pedestrian_run+0x170>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	4a2b      	ldr	r2, [pc, #172]	; (8000f7c <pedestrian_run+0x170>)
 8000ed0:	6013      	str	r3, [r2, #0]
				if(time_green == 0){
 8000ed2:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <pedestrian_run+0x17c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d143      	bne.n	8000f62 <pedestrian_run+0x156>
					turnOffPesLed();
 8000eda:	f000 fa0b 	bl	80012f4 <turnOffPesLed>
					time_green = _time_green;
 8000ede:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <pedestrian_run+0x180>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a29      	ldr	r2, [pc, #164]	; (8000f88 <pedestrian_run+0x17c>)
 8000ee4:	6013      	str	r3, [r2, #0]
					status_auto = RED1_YELLOW2;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <pedestrian_run+0x160>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
					setTimer3(100);
 8000eec:	2064      	movs	r0, #100	; 0x64
 8000eee:	f000 fa67 	bl	80013c0 <setTimer3>
					status_pedestrian = PEDES_3;
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <pedestrian_run+0x15c>)
 8000ef4:	221e      	movs	r2, #30
 8000ef6:	601a      	str	r2, [r3, #0]
				}
				break;
 8000ef8:	e033      	b.n	8000f62 <pedestrian_run+0x156>
			case PEDES_3:
				turnOnRedLed1();
 8000efa:	f000 f967 	bl	80011cc <turnOnRedLed1>
				turnOnYellowLed2();
 8000efe:	f000 f9b1 	bl	8001264 <turnOnYellowLed2>
				timeOfPhase1 = time_red;
 8000f02:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <pedestrian_run+0x170>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a1e      	ldr	r2, [pc, #120]	; (8000f80 <pedestrian_run+0x174>)
 8000f08:	6013      	str	r3, [r2, #0]
				timeOfPhase2 = time_yellow;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <pedestrian_run+0x168>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a1d      	ldr	r2, [pc, #116]	; (8000f84 <pedestrian_run+0x178>)
 8000f10:	6013      	str	r3, [r2, #0]
				sendDATA();
 8000f12:	f7ff f91b 	bl	800014c <sendDATA>
				time_red--;
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <pedestrian_run+0x170>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	4a17      	ldr	r2, [pc, #92]	; (8000f7c <pedestrian_run+0x170>)
 8000f1e:	6013      	str	r3, [r2, #0]
				time_yellow--;
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <pedestrian_run+0x168>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	3b01      	subs	r3, #1
 8000f26:	4a13      	ldr	r2, [pc, #76]	; (8000f74 <pedestrian_run+0x168>)
 8000f28:	6013      	str	r3, [r2, #0]
				if(time_yellow <= 0 || time_red <= 0){
 8000f2a:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <pedestrian_run+0x168>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	dd03      	ble.n	8000f3a <pedestrian_run+0x12e>
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <pedestrian_run+0x170>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	dc0f      	bgt.n	8000f5a <pedestrian_run+0x14e>
					turnOnPesRedLed();
 8000f3a:	f000 f9b3 	bl	80012a4 <turnOnPesRedLed>
					status_auto = GREEN1_RED2;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <pedestrian_run+0x160>)
 8000f40:	2208      	movs	r2, #8
 8000f42:	601a      	str	r2, [r3, #0]
					timeOfPhase1 = time_green;
 8000f44:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <pedestrian_run+0x17c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <pedestrian_run+0x174>)
 8000f4a:	6013      	str	r3, [r2, #0]
					timeOfPhase2 = time_red;
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <pedestrian_run+0x170>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0c      	ldr	r2, [pc, #48]	; (8000f84 <pedestrian_run+0x178>)
 8000f52:	6013      	str	r3, [r2, #0]
					status = AUTOMATIC_MODE;
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <pedestrian_run+0x184>)
 8000f56:	22fe      	movs	r2, #254	; 0xfe
 8000f58:	601a      	str	r2, [r3, #0]
				}
			default:
				break;
 8000f5a:	bf00      	nop
 8000f5c:	e002      	b.n	8000f64 <pedestrian_run+0x158>
				break;
 8000f5e:	bf00      	nop
 8000f60:	e000      	b.n	8000f64 <pedestrian_run+0x158>
				break;
 8000f62:	bf00      	nop
		}
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000014 	.word	0x20000014
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	20000064 	.word	0x20000064
 8000f74:	2000019c 	.word	0x2000019c
 8000f78:	20000060 	.word	0x20000060
 8000f7c:	20000190 	.word	0x20000190
 8000f80:	20000158 	.word	0x20000158
 8000f84:	20000198 	.word	0x20000198
 8000f88:	20000154 	.word	0x20000154
 8000f8c:	20000068 	.word	0x20000068
 8000f90:	20000000 	.word	0x20000000

08000f94 <ReadingButton>:
int button_flag[NUM_OF_BUTTON] = {0,0,0,0};
int buttonBuffer[NUM_OF_BUTTON] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int counterForButtonPress3s[NUM_OF_BUTTON] = {0,0,0,0};
int flagForButtonPress3s[NUM_OF_BUTTON] = {0,0,0,0};

void ReadingButton(){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_OF_BUTTON; i++){
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	e0b1      	b.n	8001104 <ReadingButton+0x170>
		  KeyReg2[i] = KeyReg1[i];
 8000fa0:	4a5d      	ldr	r2, [pc, #372]	; (8001118 <ReadingButton+0x184>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fa8:	495c      	ldr	r1, [pc, #368]	; (800111c <ReadingButton+0x188>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  KeyReg1[i] = KeyReg0[i];
 8000fb0:	4a5b      	ldr	r2, [pc, #364]	; (8001120 <ReadingButton+0x18c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fb8:	4957      	ldr	r1, [pc, #348]	; (8001118 <ReadingButton+0x184>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d836      	bhi.n	8001034 <ReadingButton+0xa0>
 8000fc6:	a201      	add	r2, pc, #4	; (adr r2, 8000fcc <ReadingButton+0x38>)
 8000fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fcc:	08000fdd 	.word	0x08000fdd
 8000fd0:	08000ff3 	.word	0x08000ff3
 8000fd4:	08001009 	.word	0x08001009
 8000fd8:	0800101f 	.word	0x0800101f
		  switch (i) {
			case 0:
				  KeyReg0[i] = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 8000fdc:	2102      	movs	r1, #2
 8000fde:	4851      	ldr	r0, [pc, #324]	; (8001124 <ReadingButton+0x190>)
 8000fe0:	f000 ffc4 	bl	8001f6c <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4a4d      	ldr	r2, [pc, #308]	; (8001120 <ReadingButton+0x18c>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000ff0:	e021      	b.n	8001036 <ReadingButton+0xa2>
			case 1:
				  KeyReg0[i] = HAL_GPIO_ReadPin(A2_GPIO_Port, A2_Pin);
 8000ff2:	2110      	movs	r1, #16
 8000ff4:	484b      	ldr	r0, [pc, #300]	; (8001124 <ReadingButton+0x190>)
 8000ff6:	f000 ffb9 	bl	8001f6c <HAL_GPIO_ReadPin>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4a48      	ldr	r2, [pc, #288]	; (8001120 <ReadingButton+0x18c>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8001006:	e016      	b.n	8001036 <ReadingButton+0xa2>
			case 2:
				  KeyReg0[i] = HAL_GPIO_ReadPin(A3_GPIO_Port, A3_Pin);
 8001008:	2101      	movs	r1, #1
 800100a:	4847      	ldr	r0, [pc, #284]	; (8001128 <ReadingButton+0x194>)
 800100c:	f000 ffae 	bl	8001f6c <HAL_GPIO_ReadPin>
 8001010:	4603      	mov	r3, r0
 8001012:	4619      	mov	r1, r3
 8001014:	4a42      	ldr	r2, [pc, #264]	; (8001120 <ReadingButton+0x18c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800101c:	e00b      	b.n	8001036 <ReadingButton+0xa2>
			case 3:
				  KeyReg0[i] = HAL_GPIO_ReadPin(A0_GPIO_Port, A0_Pin);
 800101e:	2101      	movs	r1, #1
 8001020:	4840      	ldr	r0, [pc, #256]	; (8001124 <ReadingButton+0x190>)
 8001022:	f000 ffa3 	bl	8001f6c <HAL_GPIO_ReadPin>
 8001026:	4603      	mov	r3, r0
 8001028:	4619      	mov	r1, r3
 800102a:	4a3d      	ldr	r2, [pc, #244]	; (8001120 <ReadingButton+0x18c>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8001032:	e000      	b.n	8001036 <ReadingButton+0xa2>
			default:
				break;
 8001034:	bf00      	nop
		  }
		  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8001036:	4a38      	ldr	r2, [pc, #224]	; (8001118 <ReadingButton+0x184>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800103e:	4938      	ldr	r1, [pc, #224]	; (8001120 <ReadingButton+0x18c>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001046:	429a      	cmp	r2, r3
 8001048:	d159      	bne.n	80010fe <ReadingButton+0x16a>
 800104a:	4a33      	ldr	r2, [pc, #204]	; (8001118 <ReadingButton+0x184>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001052:	4932      	ldr	r1, [pc, #200]	; (800111c <ReadingButton+0x188>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800105a:	429a      	cmp	r2, r3
 800105c:	d14f      	bne.n	80010fe <ReadingButton+0x16a>
			  if(buttonBuffer[i] != KeyReg2[i]){
 800105e:	4a33      	ldr	r2, [pc, #204]	; (800112c <ReadingButton+0x198>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001066:	492d      	ldr	r1, [pc, #180]	; (800111c <ReadingButton+0x188>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800106e:	429a      	cmp	r2, r3
 8001070:	d01f      	beq.n	80010b2 <ReadingButton+0x11e>
				  buttonBuffer[i] = KeyReg2[i];
 8001072:	4a2a      	ldr	r2, [pc, #168]	; (800111c <ReadingButton+0x188>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800107a:	492c      	ldr	r1, [pc, #176]	; (800112c <ReadingButton+0x198>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  if(buttonBuffer[i] == PRESSED_STATE){
 8001082:	4a2a      	ldr	r2, [pc, #168]	; (800112c <ReadingButton+0x198>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10b      	bne.n	80010a6 <ReadingButton+0x112>
					  button_flag[i] = 1;
 800108e:	4a28      	ldr	r2, [pc, #160]	; (8001130 <ReadingButton+0x19c>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2101      	movs	r1, #1
 8001094:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					  counterForButtonPress3s[i] = 300;
 8001098:	4a26      	ldr	r2, [pc, #152]	; (8001134 <ReadingButton+0x1a0>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80010a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80010a4:	e02b      	b.n	80010fe <ReadingButton+0x16a>
				  }
				  else {
					  flagForButtonPress3s[i] = 0;
 80010a6:	4a24      	ldr	r2, [pc, #144]	; (8001138 <ReadingButton+0x1a4>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2100      	movs	r1, #0
 80010ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80010b0:	e025      	b.n	80010fe <ReadingButton+0x16a>
				  }
			  }
			  else{
				  counterForButtonPress3s[i]--;
 80010b2:	4a20      	ldr	r2, [pc, #128]	; (8001134 <ReadingButton+0x1a0>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ba:	1e5a      	subs	r2, r3, #1
 80010bc:	491d      	ldr	r1, [pc, #116]	; (8001134 <ReadingButton+0x1a0>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  if(counterForButtonPress3s[i] <= 0){
 80010c4:	4a1b      	ldr	r2, [pc, #108]	; (8001134 <ReadingButton+0x1a0>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	dc16      	bgt.n	80010fe <ReadingButton+0x16a>
					  if(buttonBuffer[i] == PRESSED_STATE){
 80010d0:	4a16      	ldr	r2, [pc, #88]	; (800112c <ReadingButton+0x198>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d105      	bne.n	80010e8 <ReadingButton+0x154>
						  flagForButtonPress3s[i] = 1;
 80010dc:	4a16      	ldr	r2, [pc, #88]	; (8001138 <ReadingButton+0x1a4>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2101      	movs	r1, #1
 80010e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80010e6:	e004      	b.n	80010f2 <ReadingButton+0x15e>
					  }
					  else{
						  flagForButtonPress3s[i] = 0;
 80010e8:	4a13      	ldr	r2, [pc, #76]	; (8001138 <ReadingButton+0x1a4>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2100      	movs	r1, #0
 80010ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					  }
					  counterForButtonPress3s[i] = 300;
 80010f2:	4a10      	ldr	r2, [pc, #64]	; (8001134 <ReadingButton+0x1a0>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80010fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUM_OF_BUTTON; i++){
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b03      	cmp	r3, #3
 8001108:	f77f af4a 	ble.w	8000fa0 <ReadingButton+0xc>
				  }
			  }
		  }
	}
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000038 	.word	0x20000038
 800111c:	20000048 	.word	0x20000048
 8001120:	20000028 	.word	0x20000028
 8001124:	40010800 	.word	0x40010800
 8001128:	40010c00 	.word	0x40010c00
 800112c:	20000018 	.word	0x20000018
 8001130:	20000114 	.word	0x20000114
 8001134:	200000f4 	.word	0x200000f4
 8001138:	20000104 	.word	0x20000104

0800113c <isButtonPress>:


int isButtonPress(int index){
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	if(index >= NUM_OF_BUTTON) return 0;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b03      	cmp	r3, #3
 8001148:	dd01      	ble.n	800114e <isButtonPress+0x12>
 800114a:	2300      	movs	r3, #0
 800114c:	e00d      	b.n	800116a <isButtonPress+0x2e>
	if(button_flag[index] == 1){
 800114e:	4a09      	ldr	r2, [pc, #36]	; (8001174 <isButtonPress+0x38>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d106      	bne.n	8001168 <isButtonPress+0x2c>
		button_flag[index] = 0;
 800115a:	4a06      	ldr	r2, [pc, #24]	; (8001174 <isButtonPress+0x38>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2100      	movs	r1, #0
 8001160:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <isButtonPress+0x2e>
	}
	return 0;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	20000114 	.word	0x20000114

08001178 <Button1IsPressed>:
int Button1IsPressed(){
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	return isButtonPress(0);
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff ffdd 	bl	800113c <isButtonPress>
 8001182:	4603      	mov	r3, r0
}
 8001184:	4618      	mov	r0, r3
 8001186:	bd80      	pop	{r7, pc}

08001188 <Button2IsPressed>:
int Button2IsPressed(){
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	return isButtonPress(1);
 800118c:	2001      	movs	r0, #1
 800118e:	f7ff ffd5 	bl	800113c <isButtonPress>
 8001192:	4603      	mov	r3, r0
}
 8001194:	4618      	mov	r0, r3
 8001196:	bd80      	pop	{r7, pc}

08001198 <Button3IsPressed>:
int Button3IsPressed(){
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	return isButtonPress(2);
 800119c:	2002      	movs	r0, #2
 800119e:	f7ff ffcd 	bl	800113c <isButtonPress>
 80011a2:	4603      	mov	r3, r0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <Button4IsPressed>:
int Button4IsPressed(){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	return isButtonPress(3);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f7ff ffc5 	bl	800113c <isButtonPress>
 80011b2:	4603      	mov	r3, r0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <testLed>:



#include "main.h"
#include "setting_led.h"
void testLed(){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(PORTA, LED_Pin);
 80011bc:	2120      	movs	r1, #32
 80011be:	4802      	ldr	r0, [pc, #8]	; (80011c8 <testLed+0x10>)
 80011c0:	f000 ff03 	bl	8001fca <HAL_GPIO_TogglePin>
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40010800 	.word	0x40010800

080011cc <turnOnRedLed1>:
void turnOnRedLed1(){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 80011d0:	2201      	movs	r2, #1
 80011d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <turnOnRedLed1+0x20>)
 80011d8:	f000 fedf 	bl	8001f9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2108      	movs	r1, #8
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <turnOnRedLed1+0x24>)
 80011e2:	f000 feda 	bl	8001f9a <HAL_GPIO_WritePin>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40010800 	.word	0x40010800
 80011f0:	40010c00 	.word	0x40010c00

080011f4 <turnOnYellowLed1>:
void turnOnYellowLed1(){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <turnOnYellowLed1+0x20>)
 8001200:	f000 fecb 	bl	8001f9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8001204:	2201      	movs	r2, #1
 8001206:	2108      	movs	r1, #8
 8001208:	4803      	ldr	r0, [pc, #12]	; (8001218 <turnOnYellowLed1+0x24>)
 800120a:	f000 fec6 	bl	8001f9a <HAL_GPIO_WritePin>
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40010800 	.word	0x40010800
 8001218:	40010c00 	.word	0x40010c00

0800121c <turnOnGreenLed1>:
void turnOnGreenLed1(){
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <turnOnGreenLed1+0x20>)
 8001228:	f000 feb7 	bl	8001f9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 800122c:	2201      	movs	r2, #1
 800122e:	2108      	movs	r1, #8
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <turnOnGreenLed1+0x24>)
 8001232:	f000 feb2 	bl	8001f9a <HAL_GPIO_WritePin>
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40010800 	.word	0x40010800
 8001240:	40010c00 	.word	0x40010c00

08001244 <turnOnRedLed2>:


void turnOnRedLed2(){
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8001248:	2201      	movs	r2, #1
 800124a:	2120      	movs	r1, #32
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <turnOnRedLed2+0x1c>)
 800124e:	f000 fea4 	bl	8001f9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2110      	movs	r1, #16
 8001256:	4802      	ldr	r0, [pc, #8]	; (8001260 <turnOnRedLed2+0x1c>)
 8001258:	f000 fe9f 	bl	8001f9a <HAL_GPIO_WritePin>
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40010c00 	.word	0x40010c00

08001264 <turnOnYellowLed2>:
void turnOnYellowLed2(){
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8001268:	2201      	movs	r2, #1
 800126a:	2120      	movs	r1, #32
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <turnOnYellowLed2+0x1c>)
 800126e:	f000 fe94 	bl	8001f9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8001272:	2201      	movs	r2, #1
 8001274:	2110      	movs	r1, #16
 8001276:	4802      	ldr	r0, [pc, #8]	; (8001280 <turnOnYellowLed2+0x1c>)
 8001278:	f000 fe8f 	bl	8001f9a <HAL_GPIO_WritePin>
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40010c00 	.word	0x40010c00

08001284 <turnOnGreenLed2>:
void turnOnGreenLed2(){
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2120      	movs	r1, #32
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <turnOnGreenLed2+0x1c>)
 800128e:	f000 fe84 	bl	8001f9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8001292:	2201      	movs	r2, #1
 8001294:	2110      	movs	r1, #16
 8001296:	4802      	ldr	r0, [pc, #8]	; (80012a0 <turnOnGreenLed2+0x1c>)
 8001298:	f000 fe7f 	bl	8001f9a <HAL_GPIO_WritePin>
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40010c00 	.word	0x40010c00

080012a4 <turnOnPesRedLed>:


void turnOnPesRedLed(){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 80012a8:	2201      	movs	r2, #1
 80012aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <turnOnPesRedLed+0x20>)
 80012b0:	f000 fe73 	bl	8001f9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ba:	4803      	ldr	r0, [pc, #12]	; (80012c8 <turnOnPesRedLed+0x24>)
 80012bc:	f000 fe6d 	bl	8001f9a <HAL_GPIO_WritePin>
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40010c00 	.word	0x40010c00
 80012c8:	40010800 	.word	0x40010800

080012cc <turnOnPesGreenLed>:
void turnOnPesGreenLed(){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <turnOnPesGreenLed+0x20>)
 80012d8:	f000 fe5f 	bl	8001f9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 80012dc:	2201      	movs	r2, #1
 80012de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e2:	4803      	ldr	r0, [pc, #12]	; (80012f0 <turnOnPesGreenLed+0x24>)
 80012e4:	f000 fe59 	bl	8001f9a <HAL_GPIO_WritePin>
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40010c00 	.word	0x40010c00
 80012f0:	40010800 	.word	0x40010800

080012f4 <turnOffPesLed>:
void turnOffPesLed(){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <turnOffPesLed+0x20>)
 8001300:	f000 fe4b 	bl	8001f9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 7180 	mov.w	r1, #256	; 0x100
 800130a:	4803      	ldr	r0, [pc, #12]	; (8001318 <turnOffPesLed+0x24>)
 800130c:	f000 fe45 	bl	8001f9a <HAL_GPIO_WritePin>
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40010c00 	.word	0x40010c00
 8001318:	40010800 	.word	0x40010800

0800131c <turnOffAllLed>:

void turnOffAllLed(){
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001326:	480a      	ldr	r0, [pc, #40]	; (8001350 <turnOffAllLed+0x34>)
 8001328:	f000 fe37 	bl	8001f9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin,0);
 800132c:	2200      	movs	r2, #0
 800132e:	2108      	movs	r1, #8
 8001330:	4808      	ldr	r0, [pc, #32]	; (8001354 <turnOffAllLed+0x38>)
 8001332:	f000 fe32 	bl	8001f9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2120      	movs	r1, #32
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <turnOffAllLed+0x38>)
 800133c:	f000 fe2d 	bl	8001f9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin,0);
 8001340:	2200      	movs	r2, #0
 8001342:	2110      	movs	r1, #16
 8001344:	4803      	ldr	r0, [pc, #12]	; (8001354 <turnOffAllLed+0x38>)
 8001346:	f000 fe28 	bl	8001f9a <HAL_GPIO_WritePin>
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40010800 	.word	0x40010800
 8001354:	40010c00 	.word	0x40010c00

08001358 <setTimer1>:
int timer3_counter = 0;
int timer3_flag = 0;
int timer4_counter = 0;
int timer4_flag = 0;
int TIME_CYCLE = 10;
void setTimer1(int duration){
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIME_CYCLE;
 8001360:	4b07      	ldr	r3, [pc, #28]	; (8001380 <setTimer1+0x28>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	fb92 f3f3 	sdiv	r3, r2, r3
 800136a:	4a06      	ldr	r2, [pc, #24]	; (8001384 <setTimer1+0x2c>)
 800136c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <setTimer1+0x30>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000058 	.word	0x20000058
 8001384:	20000128 	.word	0x20000128
 8001388:	20000124 	.word	0x20000124

0800138c <setTimer2>:
void setTimer2(int duration){
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIME_CYCLE;
 8001394:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <setTimer2+0x28>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	fb92 f3f3 	sdiv	r3, r2, r3
 800139e:	4a06      	ldr	r2, [pc, #24]	; (80013b8 <setTimer2+0x2c>)
 80013a0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <setTimer2+0x30>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000058 	.word	0x20000058
 80013b8:	20000130 	.word	0x20000130
 80013bc:	2000012c 	.word	0x2000012c

080013c0 <setTimer3>:
void setTimer3(int duration){
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIME_CYCLE;
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <setTimer3+0x28>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80013d2:	4a06      	ldr	r2, [pc, #24]	; (80013ec <setTimer3+0x2c>)
 80013d4:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <setTimer3+0x30>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000058 	.word	0x20000058
 80013ec:	20000138 	.word	0x20000138
 80013f0:	20000134 	.word	0x20000134

080013f4 <timerRun>:
void setTimer4(int duration){
	timer4_counter = duration/TIME_CYCLE;
	timer4_flag = 0;
}

void timerRun(){
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <timerRun+0x8c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	dd0b      	ble.n	8001418 <timerRun+0x24>
		timer1_counter--;
 8001400:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <timerRun+0x8c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	3b01      	subs	r3, #1
 8001406:	4a1e      	ldr	r2, [pc, #120]	; (8001480 <timerRun+0x8c>)
 8001408:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <timerRun+0x8c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	dc02      	bgt.n	8001418 <timerRun+0x24>
			timer1_flag = 1;
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <timerRun+0x90>)
 8001414:	2201      	movs	r2, #1
 8001416:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <timerRun+0x94>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	dd0b      	ble.n	8001438 <timerRun+0x44>
		timer2_counter--;
 8001420:	4b19      	ldr	r3, [pc, #100]	; (8001488 <timerRun+0x94>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	3b01      	subs	r3, #1
 8001426:	4a18      	ldr	r2, [pc, #96]	; (8001488 <timerRun+0x94>)
 8001428:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <timerRun+0x94>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	dc02      	bgt.n	8001438 <timerRun+0x44>
			timer2_flag = 1;
 8001432:	4b16      	ldr	r3, [pc, #88]	; (800148c <timerRun+0x98>)
 8001434:	2201      	movs	r2, #1
 8001436:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <timerRun+0x9c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	dd0b      	ble.n	8001458 <timerRun+0x64>
		timer3_counter--;
 8001440:	4b13      	ldr	r3, [pc, #76]	; (8001490 <timerRun+0x9c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3b01      	subs	r3, #1
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <timerRun+0x9c>)
 8001448:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <timerRun+0x9c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	dc02      	bgt.n	8001458 <timerRun+0x64>
			timer3_flag = 1;
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <timerRun+0xa0>)
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <timerRun+0xa4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	dd0b      	ble.n	8001478 <timerRun+0x84>
		timer4_counter--;
 8001460:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <timerRun+0xa4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	3b01      	subs	r3, #1
 8001466:	4a0c      	ldr	r2, [pc, #48]	; (8001498 <timerRun+0xa4>)
 8001468:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <timerRun+0xa4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	dc02      	bgt.n	8001478 <timerRun+0x84>
			timer4_flag = 1;
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <timerRun+0xa8>)
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	20000128 	.word	0x20000128
 8001484:	20000124 	.word	0x20000124
 8001488:	20000130 	.word	0x20000130
 800148c:	2000012c 	.word	0x2000012c
 8001490:	20000138 	.word	0x20000138
 8001494:	20000134 	.word	0x20000134
 8001498:	20000140 	.word	0x20000140
 800149c:	2000013c 	.word	0x2000013c

080014a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_MspInit+0x5c>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	4a14      	ldr	r2, [pc, #80]	; (80014fc <HAL_MspInit+0x5c>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6193      	str	r3, [r2, #24]
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_MspInit+0x5c>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_MspInit+0x5c>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <HAL_MspInit+0x5c>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c8:	61d3      	str	r3, [r2, #28]
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_MspInit+0x5c>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_MspInit+0x60>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <HAL_MspInit+0x60>)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f2:	bf00      	nop
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010000 	.word	0x40010000

08001504 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001514:	d114      	bne.n	8001540 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001516:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_TIM_Base_MspInit+0x78>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	4a18      	ldr	r2, [pc, #96]	; (800157c <HAL_TIM_Base_MspInit+0x78>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	61d3      	str	r3, [r2, #28]
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <HAL_TIM_Base_MspInit+0x78>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	201c      	movs	r0, #28
 8001534:	f000 faaf 	bl	8001a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001538:	201c      	movs	r0, #28
 800153a:	f000 fac8 	bl	8001ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800153e:	e018      	b.n	8001572 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <HAL_TIM_Base_MspInit+0x7c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d113      	bne.n	8001572 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <HAL_TIM_Base_MspInit+0x78>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	4a0b      	ldr	r2, [pc, #44]	; (800157c <HAL_TIM_Base_MspInit+0x78>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	61d3      	str	r3, [r2, #28]
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_TIM_Base_MspInit+0x78>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	201d      	movs	r0, #29
 8001568:	f000 fa95 	bl	8001a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800156c:	201d      	movs	r0, #29
 800156e:	f000 faae 	bl	8001ace <HAL_NVIC_EnableIRQ>
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40021000 	.word	0x40021000
 8001580:	40000400 	.word	0x40000400

08001584 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <HAL_TIM_MspPostInit+0x58>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d117      	bne.n	80015d4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <HAL_TIM_MspPostInit+0x5c>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4a0d      	ldr	r2, [pc, #52]	; (80015e0 <HAL_TIM_MspPostInit+0x5c>)
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	6193      	str	r3, [r2, #24]
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_TIM_MspPostInit+0x5c>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_CH1_Pin;
 80015bc:	2340      	movs	r3, #64	; 0x40
 80015be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2302      	movs	r3, #2
 80015c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	4619      	mov	r1, r3
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <HAL_TIM_MspPostInit+0x60>)
 80015d0:	f000 fb48 	bl	8001c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015d4:	bf00      	nop
 80015d6:	3720      	adds	r7, #32
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40000400 	.word	0x40000400
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40010800 	.word	0x40010800

080015e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 0310 	add.w	r3, r7, #16
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a1f      	ldr	r2, [pc, #124]	; (8001680 <HAL_UART_MspInit+0x98>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d137      	bne.n	8001678 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <HAL_UART_MspInit+0x9c>)
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	4a1d      	ldr	r2, [pc, #116]	; (8001684 <HAL_UART_MspInit+0x9c>)
 800160e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001612:	61d3      	str	r3, [r2, #28]
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <HAL_UART_MspInit+0x9c>)
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b18      	ldr	r3, [pc, #96]	; (8001684 <HAL_UART_MspInit+0x9c>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a17      	ldr	r2, [pc, #92]	; (8001684 <HAL_UART_MspInit+0x9c>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <HAL_UART_MspInit+0x9c>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin;
 8001638:	2304      	movs	r3, #4
 800163a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	4619      	mov	r1, r3
 800164a:	480f      	ldr	r0, [pc, #60]	; (8001688 <HAL_UART_MspInit+0xa0>)
 800164c:	f000 fb0a 	bl	8001c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART_RX_Pin;
 8001650:	2308      	movs	r3, #8
 8001652:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	4619      	mov	r1, r3
 8001662:	4809      	ldr	r0, [pc, #36]	; (8001688 <HAL_UART_MspInit+0xa0>)
 8001664:	f000 fafe 	bl	8001c64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2100      	movs	r1, #0
 800166c:	2026      	movs	r0, #38	; 0x26
 800166e:	f000 fa12 	bl	8001a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001672:	2026      	movs	r0, #38	; 0x26
 8001674:	f000 fa2b 	bl	8001ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001678:	bf00      	nop
 800167a:	3720      	adds	r7, #32
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40004400 	.word	0x40004400
 8001684:	40021000 	.word	0x40021000
 8001688:	40010800 	.word	0x40010800

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <NMI_Handler+0x4>

08001692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <HardFault_Handler+0x4>

08001698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <MemManage_Handler+0x4>

0800169e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <BusFault_Handler+0x4>

080016a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <UsageFault_Handler+0x4>

080016aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d2:	f000 f8ed 	bl	80018b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <TIM2_IRQHandler+0x10>)
 80016e2:	f001 fa41 	bl	8002b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200001e8 	.word	0x200001e8

080016f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <TIM3_IRQHandler+0x10>)
 80016f6:	f001 fa37 	bl	8002b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200001a0 	.word	0x200001a0

08001704 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <USART2_IRQHandler+0x10>)
 800170a:	f002 f8cf 	bl	80038ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000230 	.word	0x20000230

08001718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001720:	4a14      	ldr	r2, [pc, #80]	; (8001774 <_sbrk+0x5c>)
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <_sbrk+0x60>)
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d102      	bne.n	800173a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <_sbrk+0x64>)
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <_sbrk+0x68>)
 8001738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	429a      	cmp	r2, r3
 8001746:	d207      	bcs.n	8001758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001748:	f002 fca8 	bl	800409c <__errno>
 800174c:	4603      	mov	r3, r0
 800174e:	220c      	movs	r2, #12
 8001750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
 8001756:	e009      	b.n	800176c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <_sbrk+0x64>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175e:	4b07      	ldr	r3, [pc, #28]	; (800177c <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <_sbrk+0x64>)
 8001768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176a:	68fb      	ldr	r3, [r7, #12]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20005000 	.word	0x20005000
 8001778:	00000400 	.word	0x00000400
 800177c:	20000144 	.word	0x20000144
 8001780:	20000288 	.word	0x20000288

08001784 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <init_traffic_light>:
int _time_green = 15;

//initialize countdown value for each traffic light
int time_pes = 5;
int count_ped_buzzer = 0;
void init_traffic_light(){
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	turnOffAllLed();
 8001794:	f7ff fdc2 	bl	800131c <turnOffAllLed>
	time_red = _time_red;
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <init_traffic_light+0x2c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <init_traffic_light+0x30>)
 800179e:	6013      	str	r3, [r2, #0]
	time_yellow = _time_yellow;
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <init_traffic_light+0x34>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a08      	ldr	r2, [pc, #32]	; (80017c8 <init_traffic_light+0x38>)
 80017a6:	6013      	str	r3, [r2, #0]
	time_green = _time_green;
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <init_traffic_light+0x3c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <init_traffic_light+0x40>)
 80017ae:	6013      	str	r3, [r2, #0]
	counter = 0;
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <init_traffic_light+0x44>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000060 	.word	0x20000060
 80017c0:	20000190 	.word	0x20000190
 80017c4:	20000064 	.word	0x20000064
 80017c8:	2000019c 	.word	0x2000019c
 80017cc:	20000068 	.word	0x20000068
 80017d0:	20000154 	.word	0x20000154
 80017d4:	20000194 	.word	0x20000194

080017d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d8:	480c      	ldr	r0, [pc, #48]	; (800180c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017da:	490d      	ldr	r1, [pc, #52]	; (8001810 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017dc:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e0:	e002      	b.n	80017e8 <LoopCopyDataInit>

080017e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e6:	3304      	adds	r3, #4

080017e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ec:	d3f9      	bcc.n	80017e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017f0:	4c0a      	ldr	r4, [pc, #40]	; (800181c <LoopFillZerobss+0x22>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f4:	e001      	b.n	80017fa <LoopFillZerobss>

080017f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f8:	3204      	adds	r2, #4

080017fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017fc:	d3fb      	bcc.n	80017f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017fe:	f7ff ffc1 	bl	8001784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001802:	f002 fc51 	bl	80040a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001806:	f7ff f8f1 	bl	80009ec <main>
  bx lr
 800180a:	4770      	bx	lr
  ldr r0, =_sdata
 800180c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001810:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8001814:	08004afc 	.word	0x08004afc
  ldr r2, =_sbss
 8001818:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 800181c:	20000288 	.word	0x20000288

08001820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001820:	e7fe      	b.n	8001820 <ADC1_2_IRQHandler>
	...

08001824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_Init+0x28>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a07      	ldr	r2, [pc, #28]	; (800184c <HAL_Init+0x28>)
 800182e:	f043 0310 	orr.w	r3, r3, #16
 8001832:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001834:	2003      	movs	r0, #3
 8001836:	f000 f923 	bl	8001a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183a:	200f      	movs	r0, #15
 800183c:	f000 f808 	bl	8001850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001840:	f7ff fe2e 	bl	80014a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40022000 	.word	0x40022000

08001850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_InitTick+0x54>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_InitTick+0x58>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4619      	mov	r1, r3
 8001862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001866:	fbb3 f3f1 	udiv	r3, r3, r1
 800186a:	fbb2 f3f3 	udiv	r3, r2, r3
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f93b 	bl	8001aea <HAL_SYSTICK_Config>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e00e      	b.n	800189c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b0f      	cmp	r3, #15
 8001882:	d80a      	bhi.n	800189a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001884:	2200      	movs	r2, #0
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f000 f903 	bl	8001a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001890:	4a06      	ldr	r2, [pc, #24]	; (80018ac <HAL_InitTick+0x5c>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	e000      	b.n	800189c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	2000005c 	.word	0x2000005c
 80018a8:	20000070 	.word	0x20000070
 80018ac:	2000006c 	.word	0x2000006c

080018b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_IncTick+0x1c>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_IncTick+0x20>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	4a03      	ldr	r2, [pc, #12]	; (80018d0 <HAL_IncTick+0x20>)
 80018c2:	6013      	str	r3, [r2, #0]
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	20000070 	.word	0x20000070
 80018d0:	20000274 	.word	0x20000274

080018d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return uwTick;
 80018d8:	4b02      	ldr	r3, [pc, #8]	; (80018e4 <HAL_GetTick+0x10>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	20000274 	.word	0x20000274

080018e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <__NVIC_SetPriorityGrouping+0x44>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001904:	4013      	ands	r3, r2
 8001906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191a:	4a04      	ldr	r2, [pc, #16]	; (800192c <__NVIC_SetPriorityGrouping+0x44>)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	60d3      	str	r3, [r2, #12]
}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <__NVIC_GetPriorityGrouping+0x18>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	f003 0307 	and.w	r3, r3, #7
}
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	2b00      	cmp	r3, #0
 800195c:	db0b      	blt.n	8001976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	f003 021f 	and.w	r2, r3, #31
 8001964:	4906      	ldr	r1, [pc, #24]	; (8001980 <__NVIC_EnableIRQ+0x34>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	095b      	lsrs	r3, r3, #5
 800196c:	2001      	movs	r0, #1
 800196e:	fa00 f202 	lsl.w	r2, r0, r2
 8001972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	e000e100 	.word	0xe000e100

08001984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	6039      	str	r1, [r7, #0]
 800198e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001994:	2b00      	cmp	r3, #0
 8001996:	db0a      	blt.n	80019ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	490c      	ldr	r1, [pc, #48]	; (80019d0 <__NVIC_SetPriority+0x4c>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	0112      	lsls	r2, r2, #4
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	440b      	add	r3, r1
 80019a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ac:	e00a      	b.n	80019c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4908      	ldr	r1, [pc, #32]	; (80019d4 <__NVIC_SetPriority+0x50>)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	3b04      	subs	r3, #4
 80019bc:	0112      	lsls	r2, r2, #4
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	440b      	add	r3, r1
 80019c2:	761a      	strb	r2, [r3, #24]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000e100 	.word	0xe000e100
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f1c3 0307 	rsb	r3, r3, #7
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	bf28      	it	cs
 80019f6:	2304      	movcs	r3, #4
 80019f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3304      	adds	r3, #4
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d902      	bls.n	8001a08 <NVIC_EncodePriority+0x30>
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3b03      	subs	r3, #3
 8001a06:	e000      	b.n	8001a0a <NVIC_EncodePriority+0x32>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43da      	mvns	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	43d9      	mvns	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	4313      	orrs	r3, r2
         );
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3724      	adds	r7, #36	; 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a4c:	d301      	bcc.n	8001a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00f      	b.n	8001a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <SysTick_Config+0x40>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5a:	210f      	movs	r1, #15
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a60:	f7ff ff90 	bl	8001984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <SysTick_Config+0x40>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <SysTick_Config+0x40>)
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	e000e010 	.word	0xe000e010

08001a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ff2d 	bl	80018e8 <__NVIC_SetPriorityGrouping>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa8:	f7ff ff42 	bl	8001930 <__NVIC_GetPriorityGrouping>
 8001aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	6978      	ldr	r0, [r7, #20]
 8001ab4:	f7ff ff90 	bl	80019d8 <NVIC_EncodePriority>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff5f 	bl	8001984 <__NVIC_SetPriority>
}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff35 	bl	800194c <__NVIC_EnableIRQ>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffa2 	bl	8001a3c <SysTick_Config>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b085      	sub	sp, #20
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d008      	beq.n	8001b2a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e020      	b.n	8001b6c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 020e 	bic.w	r2, r2, #14
 8001b38:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0201 	bic.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b52:	2101      	movs	r1, #1
 8001b54:	fa01 f202 	lsl.w	r2, r1, r2
 8001b58:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
	...

08001b78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d005      	beq.n	8001b9a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2204      	movs	r2, #4
 8001b92:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	e051      	b.n	8001c3e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 020e 	bic.w	r2, r2, #14
 8001ba8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0201 	bic.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a22      	ldr	r2, [pc, #136]	; (8001c48 <HAL_DMA_Abort_IT+0xd0>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d029      	beq.n	8001c18 <HAL_DMA_Abort_IT+0xa0>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a20      	ldr	r2, [pc, #128]	; (8001c4c <HAL_DMA_Abort_IT+0xd4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d022      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x9c>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a1f      	ldr	r2, [pc, #124]	; (8001c50 <HAL_DMA_Abort_IT+0xd8>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d01a      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x96>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a1d      	ldr	r2, [pc, #116]	; (8001c54 <HAL_DMA_Abort_IT+0xdc>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d012      	beq.n	8001c08 <HAL_DMA_Abort_IT+0x90>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <HAL_DMA_Abort_IT+0xe0>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d00a      	beq.n	8001c02 <HAL_DMA_Abort_IT+0x8a>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1a      	ldr	r2, [pc, #104]	; (8001c5c <HAL_DMA_Abort_IT+0xe4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d102      	bne.n	8001bfc <HAL_DMA_Abort_IT+0x84>
 8001bf6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001bfa:	e00e      	b.n	8001c1a <HAL_DMA_Abort_IT+0xa2>
 8001bfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c00:	e00b      	b.n	8001c1a <HAL_DMA_Abort_IT+0xa2>
 8001c02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c06:	e008      	b.n	8001c1a <HAL_DMA_Abort_IT+0xa2>
 8001c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0c:	e005      	b.n	8001c1a <HAL_DMA_Abort_IT+0xa2>
 8001c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c12:	e002      	b.n	8001c1a <HAL_DMA_Abort_IT+0xa2>
 8001c14:	2310      	movs	r3, #16
 8001c16:	e000      	b.n	8001c1a <HAL_DMA_Abort_IT+0xa2>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	4a11      	ldr	r2, [pc, #68]	; (8001c60 <HAL_DMA_Abort_IT+0xe8>)
 8001c1c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	4798      	blx	r3
    } 
  }
  return status;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40020008 	.word	0x40020008
 8001c4c:	4002001c 	.word	0x4002001c
 8001c50:	40020030 	.word	0x40020030
 8001c54:	40020044 	.word	0x40020044
 8001c58:	40020058 	.word	0x40020058
 8001c5c:	4002006c 	.word	0x4002006c
 8001c60:	40020000 	.word	0x40020000

08001c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b08b      	sub	sp, #44	; 0x2c
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c72:	2300      	movs	r3, #0
 8001c74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c76:	e169      	b.n	8001f4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	69fa      	ldr	r2, [r7, #28]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	f040 8158 	bne.w	8001f46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4a9a      	ldr	r2, [pc, #616]	; (8001f04 <HAL_GPIO_Init+0x2a0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d05e      	beq.n	8001d5e <HAL_GPIO_Init+0xfa>
 8001ca0:	4a98      	ldr	r2, [pc, #608]	; (8001f04 <HAL_GPIO_Init+0x2a0>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d875      	bhi.n	8001d92 <HAL_GPIO_Init+0x12e>
 8001ca6:	4a98      	ldr	r2, [pc, #608]	; (8001f08 <HAL_GPIO_Init+0x2a4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d058      	beq.n	8001d5e <HAL_GPIO_Init+0xfa>
 8001cac:	4a96      	ldr	r2, [pc, #600]	; (8001f08 <HAL_GPIO_Init+0x2a4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d86f      	bhi.n	8001d92 <HAL_GPIO_Init+0x12e>
 8001cb2:	4a96      	ldr	r2, [pc, #600]	; (8001f0c <HAL_GPIO_Init+0x2a8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d052      	beq.n	8001d5e <HAL_GPIO_Init+0xfa>
 8001cb8:	4a94      	ldr	r2, [pc, #592]	; (8001f0c <HAL_GPIO_Init+0x2a8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d869      	bhi.n	8001d92 <HAL_GPIO_Init+0x12e>
 8001cbe:	4a94      	ldr	r2, [pc, #592]	; (8001f10 <HAL_GPIO_Init+0x2ac>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d04c      	beq.n	8001d5e <HAL_GPIO_Init+0xfa>
 8001cc4:	4a92      	ldr	r2, [pc, #584]	; (8001f10 <HAL_GPIO_Init+0x2ac>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d863      	bhi.n	8001d92 <HAL_GPIO_Init+0x12e>
 8001cca:	4a92      	ldr	r2, [pc, #584]	; (8001f14 <HAL_GPIO_Init+0x2b0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d046      	beq.n	8001d5e <HAL_GPIO_Init+0xfa>
 8001cd0:	4a90      	ldr	r2, [pc, #576]	; (8001f14 <HAL_GPIO_Init+0x2b0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d85d      	bhi.n	8001d92 <HAL_GPIO_Init+0x12e>
 8001cd6:	2b12      	cmp	r3, #18
 8001cd8:	d82a      	bhi.n	8001d30 <HAL_GPIO_Init+0xcc>
 8001cda:	2b12      	cmp	r3, #18
 8001cdc:	d859      	bhi.n	8001d92 <HAL_GPIO_Init+0x12e>
 8001cde:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <HAL_GPIO_Init+0x80>)
 8001ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce4:	08001d5f 	.word	0x08001d5f
 8001ce8:	08001d39 	.word	0x08001d39
 8001cec:	08001d4b 	.word	0x08001d4b
 8001cf0:	08001d8d 	.word	0x08001d8d
 8001cf4:	08001d93 	.word	0x08001d93
 8001cf8:	08001d93 	.word	0x08001d93
 8001cfc:	08001d93 	.word	0x08001d93
 8001d00:	08001d93 	.word	0x08001d93
 8001d04:	08001d93 	.word	0x08001d93
 8001d08:	08001d93 	.word	0x08001d93
 8001d0c:	08001d93 	.word	0x08001d93
 8001d10:	08001d93 	.word	0x08001d93
 8001d14:	08001d93 	.word	0x08001d93
 8001d18:	08001d93 	.word	0x08001d93
 8001d1c:	08001d93 	.word	0x08001d93
 8001d20:	08001d93 	.word	0x08001d93
 8001d24:	08001d93 	.word	0x08001d93
 8001d28:	08001d41 	.word	0x08001d41
 8001d2c:	08001d55 	.word	0x08001d55
 8001d30:	4a79      	ldr	r2, [pc, #484]	; (8001f18 <HAL_GPIO_Init+0x2b4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d013      	beq.n	8001d5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d36:	e02c      	b.n	8001d92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	623b      	str	r3, [r7, #32]
          break;
 8001d3e:	e029      	b.n	8001d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	3304      	adds	r3, #4
 8001d46:	623b      	str	r3, [r7, #32]
          break;
 8001d48:	e024      	b.n	8001d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	3308      	adds	r3, #8
 8001d50:	623b      	str	r3, [r7, #32]
          break;
 8001d52:	e01f      	b.n	8001d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	330c      	adds	r3, #12
 8001d5a:	623b      	str	r3, [r7, #32]
          break;
 8001d5c:	e01a      	b.n	8001d94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d102      	bne.n	8001d6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d66:	2304      	movs	r3, #4
 8001d68:	623b      	str	r3, [r7, #32]
          break;
 8001d6a:	e013      	b.n	8001d94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d105      	bne.n	8001d80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d74:	2308      	movs	r3, #8
 8001d76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69fa      	ldr	r2, [r7, #28]
 8001d7c:	611a      	str	r2, [r3, #16]
          break;
 8001d7e:	e009      	b.n	8001d94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d80:	2308      	movs	r3, #8
 8001d82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	615a      	str	r2, [r3, #20]
          break;
 8001d8a:	e003      	b.n	8001d94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	623b      	str	r3, [r7, #32]
          break;
 8001d90:	e000      	b.n	8001d94 <HAL_GPIO_Init+0x130>
          break;
 8001d92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2bff      	cmp	r3, #255	; 0xff
 8001d98:	d801      	bhi.n	8001d9e <HAL_GPIO_Init+0x13a>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	e001      	b.n	8001da2 <HAL_GPIO_Init+0x13e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3304      	adds	r3, #4
 8001da2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	2bff      	cmp	r3, #255	; 0xff
 8001da8:	d802      	bhi.n	8001db0 <HAL_GPIO_Init+0x14c>
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	e002      	b.n	8001db6 <HAL_GPIO_Init+0x152>
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	3b08      	subs	r3, #8
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	210f      	movs	r1, #15
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	6a39      	ldr	r1, [r7, #32]
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 80b1 	beq.w	8001f46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001de4:	4b4d      	ldr	r3, [pc, #308]	; (8001f1c <HAL_GPIO_Init+0x2b8>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	4a4c      	ldr	r2, [pc, #304]	; (8001f1c <HAL_GPIO_Init+0x2b8>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6193      	str	r3, [r2, #24]
 8001df0:	4b4a      	ldr	r3, [pc, #296]	; (8001f1c <HAL_GPIO_Init+0x2b8>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dfc:	4a48      	ldr	r2, [pc, #288]	; (8001f20 <HAL_GPIO_Init+0x2bc>)
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	089b      	lsrs	r3, r3, #2
 8001e02:	3302      	adds	r3, #2
 8001e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	220f      	movs	r2, #15
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a40      	ldr	r2, [pc, #256]	; (8001f24 <HAL_GPIO_Init+0x2c0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d013      	beq.n	8001e50 <HAL_GPIO_Init+0x1ec>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a3f      	ldr	r2, [pc, #252]	; (8001f28 <HAL_GPIO_Init+0x2c4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d00d      	beq.n	8001e4c <HAL_GPIO_Init+0x1e8>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a3e      	ldr	r2, [pc, #248]	; (8001f2c <HAL_GPIO_Init+0x2c8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d007      	beq.n	8001e48 <HAL_GPIO_Init+0x1e4>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a3d      	ldr	r2, [pc, #244]	; (8001f30 <HAL_GPIO_Init+0x2cc>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d101      	bne.n	8001e44 <HAL_GPIO_Init+0x1e0>
 8001e40:	2303      	movs	r3, #3
 8001e42:	e006      	b.n	8001e52 <HAL_GPIO_Init+0x1ee>
 8001e44:	2304      	movs	r3, #4
 8001e46:	e004      	b.n	8001e52 <HAL_GPIO_Init+0x1ee>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e002      	b.n	8001e52 <HAL_GPIO_Init+0x1ee>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <HAL_GPIO_Init+0x1ee>
 8001e50:	2300      	movs	r3, #0
 8001e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e54:	f002 0203 	and.w	r2, r2, #3
 8001e58:	0092      	lsls	r2, r2, #2
 8001e5a:	4093      	lsls	r3, r2
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e62:	492f      	ldr	r1, [pc, #188]	; (8001f20 <HAL_GPIO_Init+0x2bc>)
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	089b      	lsrs	r3, r3, #2
 8001e68:	3302      	adds	r3, #2
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d006      	beq.n	8001e8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e7c:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	492c      	ldr	r1, [pc, #176]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]
 8001e88:	e006      	b.n	8001e98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e8a:	4b2a      	ldr	r3, [pc, #168]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	4928      	ldr	r1, [pc, #160]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d006      	beq.n	8001eb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ea4:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	4922      	ldr	r1, [pc, #136]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
 8001eb0:	e006      	b.n	8001ec0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eb2:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	491e      	ldr	r1, [pc, #120]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d006      	beq.n	8001eda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	4918      	ldr	r1, [pc, #96]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	608b      	str	r3, [r1, #8]
 8001ed8:	e006      	b.n	8001ee8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eda:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	4914      	ldr	r1, [pc, #80]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d021      	beq.n	8001f38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	490e      	ldr	r1, [pc, #56]	; (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60cb      	str	r3, [r1, #12]
 8001f00:	e021      	b.n	8001f46 <HAL_GPIO_Init+0x2e2>
 8001f02:	bf00      	nop
 8001f04:	10320000 	.word	0x10320000
 8001f08:	10310000 	.word	0x10310000
 8001f0c:	10220000 	.word	0x10220000
 8001f10:	10210000 	.word	0x10210000
 8001f14:	10120000 	.word	0x10120000
 8001f18:	10110000 	.word	0x10110000
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40010000 	.word	0x40010000
 8001f24:	40010800 	.word	0x40010800
 8001f28:	40010c00 	.word	0x40010c00
 8001f2c:	40011000 	.word	0x40011000
 8001f30:	40011400 	.word	0x40011400
 8001f34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	4909      	ldr	r1, [pc, #36]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	3301      	adds	r3, #1
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	fa22 f303 	lsr.w	r3, r2, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f47f ae8e 	bne.w	8001c78 <HAL_GPIO_Init+0x14>
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
 8001f60:	372c      	adds	r7, #44	; 0x2c
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr
 8001f68:	40010400 	.word	0x40010400

08001f6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	887b      	ldrh	r3, [r7, #2]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f84:	2301      	movs	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	e001      	b.n	8001f8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr

08001f9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	807b      	strh	r3, [r7, #2]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001faa:	787b      	ldrb	r3, [r7, #1]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fb0:	887a      	ldrh	r2, [r7, #2]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fb6:	e003      	b.n	8001fc0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fb8:	887b      	ldrh	r3, [r7, #2]
 8001fba:	041a      	lsls	r2, r3, #16
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	611a      	str	r2, [r3, #16]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr

08001fca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fdc:	887a      	ldrh	r2, [r7, #2]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	041a      	lsls	r2, r3, #16
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	43d9      	mvns	r1, r3
 8001fe8:	887b      	ldrh	r3, [r7, #2]
 8001fea:	400b      	ands	r3, r1
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	611a      	str	r2, [r3, #16]
}
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e26c      	b.n	80024e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 8087 	beq.w	800212a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800201c:	4b92      	ldr	r3, [pc, #584]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 030c 	and.w	r3, r3, #12
 8002024:	2b04      	cmp	r3, #4
 8002026:	d00c      	beq.n	8002042 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002028:	4b8f      	ldr	r3, [pc, #572]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	2b08      	cmp	r3, #8
 8002032:	d112      	bne.n	800205a <HAL_RCC_OscConfig+0x5e>
 8002034:	4b8c      	ldr	r3, [pc, #560]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002040:	d10b      	bne.n	800205a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002042:	4b89      	ldr	r3, [pc, #548]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d06c      	beq.n	8002128 <HAL_RCC_OscConfig+0x12c>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d168      	bne.n	8002128 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e246      	b.n	80024e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002062:	d106      	bne.n	8002072 <HAL_RCC_OscConfig+0x76>
 8002064:	4b80      	ldr	r3, [pc, #512]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a7f      	ldr	r2, [pc, #508]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 800206a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	e02e      	b.n	80020d0 <HAL_RCC_OscConfig+0xd4>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10c      	bne.n	8002094 <HAL_RCC_OscConfig+0x98>
 800207a:	4b7b      	ldr	r3, [pc, #492]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a7a      	ldr	r2, [pc, #488]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 8002080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	4b78      	ldr	r3, [pc, #480]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a77      	ldr	r2, [pc, #476]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 800208c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	e01d      	b.n	80020d0 <HAL_RCC_OscConfig+0xd4>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800209c:	d10c      	bne.n	80020b8 <HAL_RCC_OscConfig+0xbc>
 800209e:	4b72      	ldr	r3, [pc, #456]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a71      	ldr	r2, [pc, #452]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	4b6f      	ldr	r3, [pc, #444]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a6e      	ldr	r2, [pc, #440]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	e00b      	b.n	80020d0 <HAL_RCC_OscConfig+0xd4>
 80020b8:	4b6b      	ldr	r3, [pc, #428]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a6a      	ldr	r2, [pc, #424]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 80020be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	4b68      	ldr	r3, [pc, #416]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a67      	ldr	r2, [pc, #412]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d013      	beq.n	8002100 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7ff fbfc 	bl	80018d4 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e0:	f7ff fbf8 	bl	80018d4 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	; 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e1fa      	b.n	80024e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f2:	4b5d      	ldr	r3, [pc, #372]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0xe4>
 80020fe:	e014      	b.n	800212a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7ff fbe8 	bl	80018d4 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002108:	f7ff fbe4 	bl	80018d4 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b64      	cmp	r3, #100	; 0x64
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e1e6      	b.n	80024e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211a:	4b53      	ldr	r3, [pc, #332]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x10c>
 8002126:	e000      	b.n	800212a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d063      	beq.n	80021fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002136:	4b4c      	ldr	r3, [pc, #304]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00b      	beq.n	800215a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002142:	4b49      	ldr	r3, [pc, #292]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b08      	cmp	r3, #8
 800214c:	d11c      	bne.n	8002188 <HAL_RCC_OscConfig+0x18c>
 800214e:	4b46      	ldr	r3, [pc, #280]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d116      	bne.n	8002188 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215a:	4b43      	ldr	r3, [pc, #268]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d005      	beq.n	8002172 <HAL_RCC_OscConfig+0x176>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d001      	beq.n	8002172 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e1ba      	b.n	80024e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002172:	4b3d      	ldr	r3, [pc, #244]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4939      	ldr	r1, [pc, #228]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 8002182:	4313      	orrs	r3, r2
 8002184:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002186:	e03a      	b.n	80021fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d020      	beq.n	80021d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002190:	4b36      	ldr	r3, [pc, #216]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002192:	2201      	movs	r2, #1
 8002194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002196:	f7ff fb9d 	bl	80018d4 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219e:	f7ff fb99 	bl	80018d4 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e19b      	b.n	80024e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b0:	4b2d      	ldr	r3, [pc, #180]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0f0      	beq.n	800219e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021bc:	4b2a      	ldr	r3, [pc, #168]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4927      	ldr	r1, [pc, #156]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	600b      	str	r3, [r1, #0]
 80021d0:	e015      	b.n	80021fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021d2:	4b26      	ldr	r3, [pc, #152]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7ff fb7c 	bl	80018d4 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e0:	f7ff fb78 	bl	80018d4 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e17a      	b.n	80024e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f2:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d03a      	beq.n	8002280 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d019      	beq.n	8002246 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002212:	4b17      	ldr	r3, [pc, #92]	; (8002270 <HAL_RCC_OscConfig+0x274>)
 8002214:	2201      	movs	r2, #1
 8002216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002218:	f7ff fb5c 	bl	80018d4 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002220:	f7ff fb58 	bl	80018d4 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e15a      	b.n	80024e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002232:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <HAL_RCC_OscConfig+0x26c>)
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800223e:	2001      	movs	r0, #1
 8002240:	f000 fad8 	bl	80027f4 <RCC_Delay>
 8002244:	e01c      	b.n	8002280 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002246:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <HAL_RCC_OscConfig+0x274>)
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224c:	f7ff fb42 	bl	80018d4 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002252:	e00f      	b.n	8002274 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002254:	f7ff fb3e 	bl	80018d4 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d908      	bls.n	8002274 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e140      	b.n	80024e8 <HAL_RCC_OscConfig+0x4ec>
 8002266:	bf00      	nop
 8002268:	40021000 	.word	0x40021000
 800226c:	42420000 	.word	0x42420000
 8002270:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002274:	4b9e      	ldr	r3, [pc, #632]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1e9      	bne.n	8002254 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80a6 	beq.w	80023da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002292:	4b97      	ldr	r3, [pc, #604]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10d      	bne.n	80022ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	4b94      	ldr	r3, [pc, #592]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	4a93      	ldr	r2, [pc, #588]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a8:	61d3      	str	r3, [r2, #28]
 80022aa:	4b91      	ldr	r3, [pc, #580]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b6:	2301      	movs	r3, #1
 80022b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ba:	4b8e      	ldr	r3, [pc, #568]	; (80024f4 <HAL_RCC_OscConfig+0x4f8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d118      	bne.n	80022f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022c6:	4b8b      	ldr	r3, [pc, #556]	; (80024f4 <HAL_RCC_OscConfig+0x4f8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a8a      	ldr	r2, [pc, #552]	; (80024f4 <HAL_RCC_OscConfig+0x4f8>)
 80022cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d2:	f7ff faff 	bl	80018d4 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022da:	f7ff fafb 	bl	80018d4 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b64      	cmp	r3, #100	; 0x64
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e0fd      	b.n	80024e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ec:	4b81      	ldr	r3, [pc, #516]	; (80024f4 <HAL_RCC_OscConfig+0x4f8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f0      	beq.n	80022da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d106      	bne.n	800230e <HAL_RCC_OscConfig+0x312>
 8002300:	4b7b      	ldr	r3, [pc, #492]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4a7a      	ldr	r2, [pc, #488]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	6213      	str	r3, [r2, #32]
 800230c:	e02d      	b.n	800236a <HAL_RCC_OscConfig+0x36e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10c      	bne.n	8002330 <HAL_RCC_OscConfig+0x334>
 8002316:	4b76      	ldr	r3, [pc, #472]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	4a75      	ldr	r2, [pc, #468]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 800231c:	f023 0301 	bic.w	r3, r3, #1
 8002320:	6213      	str	r3, [r2, #32]
 8002322:	4b73      	ldr	r3, [pc, #460]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4a72      	ldr	r2, [pc, #456]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 8002328:	f023 0304 	bic.w	r3, r3, #4
 800232c:	6213      	str	r3, [r2, #32]
 800232e:	e01c      	b.n	800236a <HAL_RCC_OscConfig+0x36e>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	2b05      	cmp	r3, #5
 8002336:	d10c      	bne.n	8002352 <HAL_RCC_OscConfig+0x356>
 8002338:	4b6d      	ldr	r3, [pc, #436]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	4a6c      	ldr	r2, [pc, #432]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 800233e:	f043 0304 	orr.w	r3, r3, #4
 8002342:	6213      	str	r3, [r2, #32]
 8002344:	4b6a      	ldr	r3, [pc, #424]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4a69      	ldr	r2, [pc, #420]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6213      	str	r3, [r2, #32]
 8002350:	e00b      	b.n	800236a <HAL_RCC_OscConfig+0x36e>
 8002352:	4b67      	ldr	r3, [pc, #412]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4a66      	ldr	r2, [pc, #408]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 8002358:	f023 0301 	bic.w	r3, r3, #1
 800235c:	6213      	str	r3, [r2, #32]
 800235e:	4b64      	ldr	r3, [pc, #400]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4a63      	ldr	r2, [pc, #396]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 8002364:	f023 0304 	bic.w	r3, r3, #4
 8002368:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d015      	beq.n	800239e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002372:	f7ff faaf 	bl	80018d4 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002378:	e00a      	b.n	8002390 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237a:	f7ff faab 	bl	80018d4 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	f241 3288 	movw	r2, #5000	; 0x1388
 8002388:	4293      	cmp	r3, r2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e0ab      	b.n	80024e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002390:	4b57      	ldr	r3, [pc, #348]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0ee      	beq.n	800237a <HAL_RCC_OscConfig+0x37e>
 800239c:	e014      	b.n	80023c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239e:	f7ff fa99 	bl	80018d4 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a4:	e00a      	b.n	80023bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a6:	f7ff fa95 	bl	80018d4 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e095      	b.n	80024e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023bc:	4b4c      	ldr	r3, [pc, #304]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1ee      	bne.n	80023a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023c8:	7dfb      	ldrb	r3, [r7, #23]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d105      	bne.n	80023da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ce:	4b48      	ldr	r3, [pc, #288]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	4a47      	ldr	r2, [pc, #284]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 8081 	beq.w	80024e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023e4:	4b42      	ldr	r3, [pc, #264]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d061      	beq.n	80024b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d146      	bne.n	8002486 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f8:	4b3f      	ldr	r3, [pc, #252]	; (80024f8 <HAL_RCC_OscConfig+0x4fc>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fe:	f7ff fa69 	bl	80018d4 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002406:	f7ff fa65 	bl	80018d4 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e067      	b.n	80024e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002418:	4b35      	ldr	r3, [pc, #212]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f0      	bne.n	8002406 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800242c:	d108      	bne.n	8002440 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800242e:	4b30      	ldr	r3, [pc, #192]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	492d      	ldr	r1, [pc, #180]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002440:	4b2b      	ldr	r3, [pc, #172]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a19      	ldr	r1, [r3, #32]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	430b      	orrs	r3, r1
 8002452:	4927      	ldr	r1, [pc, #156]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002458:	4b27      	ldr	r3, [pc, #156]	; (80024f8 <HAL_RCC_OscConfig+0x4fc>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245e:	f7ff fa39 	bl	80018d4 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002466:	f7ff fa35 	bl	80018d4 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e037      	b.n	80024e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002478:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x46a>
 8002484:	e02f      	b.n	80024e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002486:	4b1c      	ldr	r3, [pc, #112]	; (80024f8 <HAL_RCC_OscConfig+0x4fc>)
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7ff fa22 	bl	80018d4 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002494:	f7ff fa1e 	bl	80018d4 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e020      	b.n	80024e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a6:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x498>
 80024b2:	e018      	b.n	80024e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e013      	b.n	80024e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d106      	bne.n	80024e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024de:	429a      	cmp	r2, r3
 80024e0:	d001      	beq.n	80024e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40007000 	.word	0x40007000
 80024f8:	42420060 	.word	0x42420060

080024fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0d0      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002510:	4b6a      	ldr	r3, [pc, #424]	; (80026bc <HAL_RCC_ClockConfig+0x1c0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d910      	bls.n	8002540 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b67      	ldr	r3, [pc, #412]	; (80026bc <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 0207 	bic.w	r2, r3, #7
 8002526:	4965      	ldr	r1, [pc, #404]	; (80026bc <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b63      	ldr	r3, [pc, #396]	; (80026bc <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0b8      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d020      	beq.n	800258e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002558:	4b59      	ldr	r3, [pc, #356]	; (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	4a58      	ldr	r2, [pc, #352]	; (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002562:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002570:	4b53      	ldr	r3, [pc, #332]	; (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	4a52      	ldr	r2, [pc, #328]	; (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800257a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800257c:	4b50      	ldr	r3, [pc, #320]	; (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	494d      	ldr	r1, [pc, #308]	; (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d040      	beq.n	800261c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d107      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	4b47      	ldr	r3, [pc, #284]	; (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d115      	bne.n	80025da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e07f      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d107      	bne.n	80025ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ba:	4b41      	ldr	r3, [pc, #260]	; (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e073      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ca:	4b3d      	ldr	r3, [pc, #244]	; (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e06b      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025da:	4b39      	ldr	r3, [pc, #228]	; (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f023 0203 	bic.w	r2, r3, #3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4936      	ldr	r1, [pc, #216]	; (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025ec:	f7ff f972 	bl	80018d4 <HAL_GetTick>
 80025f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f2:	e00a      	b.n	800260a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f4:	f7ff f96e 	bl	80018d4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e053      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260a:	4b2d      	ldr	r3, [pc, #180]	; (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 020c 	and.w	r2, r3, #12
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	429a      	cmp	r2, r3
 800261a:	d1eb      	bne.n	80025f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800261c:	4b27      	ldr	r3, [pc, #156]	; (80026bc <HAL_RCC_ClockConfig+0x1c0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d210      	bcs.n	800264c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262a:	4b24      	ldr	r3, [pc, #144]	; (80026bc <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 0207 	bic.w	r2, r3, #7
 8002632:	4922      	ldr	r1, [pc, #136]	; (80026bc <HAL_RCC_ClockConfig+0x1c0>)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b20      	ldr	r3, [pc, #128]	; (80026bc <HAL_RCC_ClockConfig+0x1c0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e032      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002658:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4916      	ldr	r1, [pc, #88]	; (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	4313      	orrs	r3, r2
 8002668:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d009      	beq.n	800268a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002676:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	490e      	ldr	r1, [pc, #56]	; (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	4313      	orrs	r3, r2
 8002688:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800268a:	f000 f821 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 800268e:	4602      	mov	r2, r0
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	490a      	ldr	r1, [pc, #40]	; (80026c4 <HAL_RCC_ClockConfig+0x1c8>)
 800269c:	5ccb      	ldrb	r3, [r1, r3]
 800269e:	fa22 f303 	lsr.w	r3, r2, r3
 80026a2:	4a09      	ldr	r2, [pc, #36]	; (80026c8 <HAL_RCC_ClockConfig+0x1cc>)
 80026a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026a6:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_RCC_ClockConfig+0x1d0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff f8d0 	bl	8001850 <HAL_InitTick>

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40022000 	.word	0x40022000
 80026c0:	40021000 	.word	0x40021000
 80026c4:	08004aa8 	.word	0x08004aa8
 80026c8:	2000005c 	.word	0x2000005c
 80026cc:	2000006c 	.word	0x2000006c

080026d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d0:	b490      	push	{r4, r7}
 80026d2:	b08a      	sub	sp, #40	; 0x28
 80026d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026d6:	4b2a      	ldr	r3, [pc, #168]	; (8002780 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026d8:	1d3c      	adds	r4, r7, #4
 80026da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026e0:	f240 2301 	movw	r3, #513	; 0x201
 80026e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	2300      	movs	r3, #0
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	2300      	movs	r3, #0
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026fa:	4b22      	ldr	r3, [pc, #136]	; (8002784 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	2b04      	cmp	r3, #4
 8002708:	d002      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x40>
 800270a:	2b08      	cmp	r3, #8
 800270c:	d003      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0x46>
 800270e:	e02d      	b.n	800276c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002710:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002712:	623b      	str	r3, [r7, #32]
      break;
 8002714:	e02d      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	0c9b      	lsrs	r3, r3, #18
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002722:	4413      	add	r3, r2
 8002724:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002728:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d013      	beq.n	800275c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002734:	4b13      	ldr	r3, [pc, #76]	; (8002784 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	0c5b      	lsrs	r3, r3, #17
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002742:	4413      	add	r3, r2
 8002744:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002748:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	4a0e      	ldr	r2, [pc, #56]	; (8002788 <HAL_RCC_GetSysClockFreq+0xb8>)
 800274e:	fb02 f203 	mul.w	r2, r2, r3
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	fbb2 f3f3 	udiv	r3, r2, r3
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
 800275a:	e004      	b.n	8002766 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	4a0b      	ldr	r2, [pc, #44]	; (800278c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002760:	fb02 f303 	mul.w	r3, r2, r3
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	623b      	str	r3, [r7, #32]
      break;
 800276a:	e002      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_RCC_GetSysClockFreq+0xb8>)
 800276e:	623b      	str	r3, [r7, #32]
      break;
 8002770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002772:	6a3b      	ldr	r3, [r7, #32]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3728      	adds	r7, #40	; 0x28
 8002778:	46bd      	mov	sp, r7
 800277a:	bc90      	pop	{r4, r7}
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	08004a98 	.word	0x08004a98
 8002784:	40021000 	.word	0x40021000
 8002788:	007a1200 	.word	0x007a1200
 800278c:	003d0900 	.word	0x003d0900

08002790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002794:	4b02      	ldr	r3, [pc, #8]	; (80027a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002796:	681b      	ldr	r3, [r3, #0]
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	2000005c 	.word	0x2000005c

080027a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027a8:	f7ff fff2 	bl	8002790 <HAL_RCC_GetHCLKFreq>
 80027ac:	4602      	mov	r2, r0
 80027ae:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	4903      	ldr	r1, [pc, #12]	; (80027c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ba:	5ccb      	ldrb	r3, [r1, r3]
 80027bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000
 80027c8:	08004ab8 	.word	0x08004ab8

080027cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027d0:	f7ff ffde 	bl	8002790 <HAL_RCC_GetHCLKFreq>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	0adb      	lsrs	r3, r3, #11
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	4903      	ldr	r1, [pc, #12]	; (80027f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027e2:	5ccb      	ldrb	r3, [r1, r3]
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40021000 	.word	0x40021000
 80027f0:	08004ab8 	.word	0x08004ab8

080027f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027fc:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <RCC_Delay+0x34>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0a      	ldr	r2, [pc, #40]	; (800282c <RCC_Delay+0x38>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	0a5b      	lsrs	r3, r3, #9
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	fb02 f303 	mul.w	r3, r2, r3
 800280e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002810:	bf00      	nop
  }
  while (Delay --);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1e5a      	subs	r2, r3, #1
 8002816:	60fa      	str	r2, [r7, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f9      	bne.n	8002810 <RCC_Delay+0x1c>
}
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr
 8002828:	2000005c 	.word	0x2000005c
 800282c:	10624dd3 	.word	0x10624dd3

08002830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e041      	b.n	80028c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7fe fe54 	bl	8001504 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3304      	adds	r3, #4
 800286c:	4619      	mov	r1, r3
 800286e:	4610      	mov	r0, r2
 8002870:	f000 fc28 	bl	80030c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d001      	beq.n	80028e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e03a      	b.n	800295e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a18      	ldr	r2, [pc, #96]	; (8002968 <HAL_TIM_Base_Start_IT+0x98>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00e      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x58>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002912:	d009      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x58>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a14      	ldr	r2, [pc, #80]	; (800296c <HAL_TIM_Base_Start_IT+0x9c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d004      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x58>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a13      	ldr	r2, [pc, #76]	; (8002970 <HAL_TIM_Base_Start_IT+0xa0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d111      	bne.n	800294c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2b06      	cmp	r3, #6
 8002938:	d010      	beq.n	800295c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0201 	orr.w	r2, r2, #1
 8002948:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800294a:	e007      	b.n	800295c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	40012c00 	.word	0x40012c00
 800296c:	40000400 	.word	0x40000400
 8002970:	40000800 	.word	0x40000800

08002974 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e041      	b.n	8002a0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f839 	bl	8002a12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3304      	adds	r3, #4
 80029b0:	4619      	mov	r1, r3
 80029b2:	4610      	mov	r0, r2
 80029b4:	f000 fb86 	bl	80030c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d109      	bne.n	8002a48 <HAL_TIM_PWM_Start+0x24>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	bf14      	ite	ne
 8002a40:	2301      	movne	r3, #1
 8002a42:	2300      	moveq	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	e022      	b.n	8002a8e <HAL_TIM_PWM_Start+0x6a>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d109      	bne.n	8002a62 <HAL_TIM_PWM_Start+0x3e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	bf14      	ite	ne
 8002a5a:	2301      	movne	r3, #1
 8002a5c:	2300      	moveq	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	e015      	b.n	8002a8e <HAL_TIM_PWM_Start+0x6a>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d109      	bne.n	8002a7c <HAL_TIM_PWM_Start+0x58>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	bf14      	ite	ne
 8002a74:	2301      	movne	r3, #1
 8002a76:	2300      	moveq	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	e008      	b.n	8002a8e <HAL_TIM_PWM_Start+0x6a>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	bf14      	ite	ne
 8002a88:	2301      	movne	r3, #1
 8002a8a:	2300      	moveq	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e05e      	b.n	8002b54 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d104      	bne.n	8002aa6 <HAL_TIM_PWM_Start+0x82>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aa4:	e013      	b.n	8002ace <HAL_TIM_PWM_Start+0xaa>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d104      	bne.n	8002ab6 <HAL_TIM_PWM_Start+0x92>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab4:	e00b      	b.n	8002ace <HAL_TIM_PWM_Start+0xaa>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d104      	bne.n	8002ac6 <HAL_TIM_PWM_Start+0xa2>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ac4:	e003      	b.n	8002ace <HAL_TIM_PWM_Start+0xaa>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	6839      	ldr	r1, [r7, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 fd74 	bl	80035c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a1e      	ldr	r2, [pc, #120]	; (8002b5c <HAL_TIM_PWM_Start+0x138>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d107      	bne.n	8002af6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002af4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a18      	ldr	r2, [pc, #96]	; (8002b5c <HAL_TIM_PWM_Start+0x138>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d00e      	beq.n	8002b1e <HAL_TIM_PWM_Start+0xfa>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b08:	d009      	beq.n	8002b1e <HAL_TIM_PWM_Start+0xfa>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a14      	ldr	r2, [pc, #80]	; (8002b60 <HAL_TIM_PWM_Start+0x13c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d004      	beq.n	8002b1e <HAL_TIM_PWM_Start+0xfa>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a12      	ldr	r2, [pc, #72]	; (8002b64 <HAL_TIM_PWM_Start+0x140>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d111      	bne.n	8002b42 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b06      	cmp	r3, #6
 8002b2e:	d010      	beq.n	8002b52 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b40:	e007      	b.n	8002b52 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f042 0201 	orr.w	r2, r2, #1
 8002b50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40012c00 	.word	0x40012c00
 8002b60:	40000400 	.word	0x40000400
 8002b64:	40000800 	.word	0x40000800

08002b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d122      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d11b      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0202 	mvn.w	r2, #2
 8002b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fa6f 	bl	800308e <HAL_TIM_IC_CaptureCallback>
 8002bb0:	e005      	b.n	8002bbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fa62 	bl	800307c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 fa71 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d122      	bne.n	8002c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d11b      	bne.n	8002c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0204 	mvn.w	r2, #4
 8002be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2202      	movs	r2, #2
 8002bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fa45 	bl	800308e <HAL_TIM_IC_CaptureCallback>
 8002c04:	e005      	b.n	8002c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fa38 	bl	800307c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 fa47 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d122      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d11b      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f06f 0208 	mvn.w	r2, #8
 8002c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2204      	movs	r2, #4
 8002c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fa1b 	bl	800308e <HAL_TIM_IC_CaptureCallback>
 8002c58:	e005      	b.n	8002c66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fa0e 	bl	800307c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 fa1d 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f003 0310 	and.w	r3, r3, #16
 8002c76:	2b10      	cmp	r3, #16
 8002c78:	d122      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0310 	and.w	r3, r3, #16
 8002c84:	2b10      	cmp	r3, #16
 8002c86:	d11b      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0210 	mvn.w	r2, #16
 8002c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2208      	movs	r2, #8
 8002c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f9f1 	bl	800308e <HAL_TIM_IC_CaptureCallback>
 8002cac:	e005      	b.n	8002cba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f9e4 	bl	800307c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f9f3 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d10e      	bne.n	8002cec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d107      	bne.n	8002cec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0201 	mvn.w	r2, #1
 8002ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fe f87e 	bl	8000de8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf6:	2b80      	cmp	r3, #128	; 0x80
 8002cf8:	d10e      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d04:	2b80      	cmp	r3, #128	; 0x80
 8002d06:	d107      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fce1 	bl	80036da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d22:	2b40      	cmp	r3, #64	; 0x40
 8002d24:	d10e      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d30:	2b40      	cmp	r3, #64	; 0x40
 8002d32:	d107      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f9b7 	bl	80030b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f003 0320 	and.w	r3, r3, #32
 8002d4e:	2b20      	cmp	r3, #32
 8002d50:	d10e      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0320 	and.w	r3, r3, #32
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	d107      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f06f 0220 	mvn.w	r2, #32
 8002d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fcac 	bl	80036c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d70:	bf00      	nop
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e0ac      	b.n	8002eec <HAL_TIM_PWM_ConfigChannel+0x174>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b0c      	cmp	r3, #12
 8002d9e:	f200 809f 	bhi.w	8002ee0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002da2:	a201      	add	r2, pc, #4	; (adr r2, 8002da8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da8:	08002ddd 	.word	0x08002ddd
 8002dac:	08002ee1 	.word	0x08002ee1
 8002db0:	08002ee1 	.word	0x08002ee1
 8002db4:	08002ee1 	.word	0x08002ee1
 8002db8:	08002e1d 	.word	0x08002e1d
 8002dbc:	08002ee1 	.word	0x08002ee1
 8002dc0:	08002ee1 	.word	0x08002ee1
 8002dc4:	08002ee1 	.word	0x08002ee1
 8002dc8:	08002e5f 	.word	0x08002e5f
 8002dcc:	08002ee1 	.word	0x08002ee1
 8002dd0:	08002ee1 	.word	0x08002ee1
 8002dd4:	08002ee1 	.word	0x08002ee1
 8002dd8:	08002e9f 	.word	0x08002e9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68b9      	ldr	r1, [r7, #8]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 f9d0 	bl	8003188 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699a      	ldr	r2, [r3, #24]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0208 	orr.w	r2, r2, #8
 8002df6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699a      	ldr	r2, [r3, #24]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0204 	bic.w	r2, r2, #4
 8002e06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6999      	ldr	r1, [r3, #24]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	691a      	ldr	r2, [r3, #16]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	619a      	str	r2, [r3, #24]
      break;
 8002e1a:	e062      	b.n	8002ee2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68b9      	ldr	r1, [r7, #8]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fa16 	bl	8003254 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699a      	ldr	r2, [r3, #24]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6999      	ldr	r1, [r3, #24]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	021a      	lsls	r2, r3, #8
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	619a      	str	r2, [r3, #24]
      break;
 8002e5c:	e041      	b.n	8002ee2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68b9      	ldr	r1, [r7, #8]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fa5f 	bl	8003328 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69da      	ldr	r2, [r3, #28]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0208 	orr.w	r2, r2, #8
 8002e78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	69da      	ldr	r2, [r3, #28]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0204 	bic.w	r2, r2, #4
 8002e88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	69d9      	ldr	r1, [r3, #28]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	61da      	str	r2, [r3, #28]
      break;
 8002e9c:	e021      	b.n	8002ee2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 faa9 	bl	80033fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	69da      	ldr	r2, [r3, #28]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69da      	ldr	r2, [r3, #28]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	69d9      	ldr	r1, [r3, #28]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	021a      	lsls	r2, r3, #8
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	61da      	str	r2, [r3, #28]
      break;
 8002ede:	e000      	b.n	8002ee2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002ee0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_TIM_ConfigClockSource+0x18>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e0b3      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x180>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f44:	d03e      	beq.n	8002fc4 <HAL_TIM_ConfigClockSource+0xd0>
 8002f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f4a:	f200 8087 	bhi.w	800305c <HAL_TIM_ConfigClockSource+0x168>
 8002f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f52:	f000 8085 	beq.w	8003060 <HAL_TIM_ConfigClockSource+0x16c>
 8002f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5a:	d87f      	bhi.n	800305c <HAL_TIM_ConfigClockSource+0x168>
 8002f5c:	2b70      	cmp	r3, #112	; 0x70
 8002f5e:	d01a      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0xa2>
 8002f60:	2b70      	cmp	r3, #112	; 0x70
 8002f62:	d87b      	bhi.n	800305c <HAL_TIM_ConfigClockSource+0x168>
 8002f64:	2b60      	cmp	r3, #96	; 0x60
 8002f66:	d050      	beq.n	800300a <HAL_TIM_ConfigClockSource+0x116>
 8002f68:	2b60      	cmp	r3, #96	; 0x60
 8002f6a:	d877      	bhi.n	800305c <HAL_TIM_ConfigClockSource+0x168>
 8002f6c:	2b50      	cmp	r3, #80	; 0x50
 8002f6e:	d03c      	beq.n	8002fea <HAL_TIM_ConfigClockSource+0xf6>
 8002f70:	2b50      	cmp	r3, #80	; 0x50
 8002f72:	d873      	bhi.n	800305c <HAL_TIM_ConfigClockSource+0x168>
 8002f74:	2b40      	cmp	r3, #64	; 0x40
 8002f76:	d058      	beq.n	800302a <HAL_TIM_ConfigClockSource+0x136>
 8002f78:	2b40      	cmp	r3, #64	; 0x40
 8002f7a:	d86f      	bhi.n	800305c <HAL_TIM_ConfigClockSource+0x168>
 8002f7c:	2b30      	cmp	r3, #48	; 0x30
 8002f7e:	d064      	beq.n	800304a <HAL_TIM_ConfigClockSource+0x156>
 8002f80:	2b30      	cmp	r3, #48	; 0x30
 8002f82:	d86b      	bhi.n	800305c <HAL_TIM_ConfigClockSource+0x168>
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	d060      	beq.n	800304a <HAL_TIM_ConfigClockSource+0x156>
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	d867      	bhi.n	800305c <HAL_TIM_ConfigClockSource+0x168>
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d05c      	beq.n	800304a <HAL_TIM_ConfigClockSource+0x156>
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d05a      	beq.n	800304a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f94:	e062      	b.n	800305c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6818      	ldr	r0, [r3, #0]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	6899      	ldr	r1, [r3, #8]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f000 faee 	bl	8003586 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fb8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	609a      	str	r2, [r3, #8]
      break;
 8002fc2:	e04e      	b.n	8003062 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6818      	ldr	r0, [r3, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	6899      	ldr	r1, [r3, #8]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f000 fad7 	bl	8003586 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fe6:	609a      	str	r2, [r3, #8]
      break;
 8002fe8:	e03b      	b.n	8003062 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6859      	ldr	r1, [r3, #4]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f000 fa4e 	bl	8003498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2150      	movs	r1, #80	; 0x50
 8003002:	4618      	mov	r0, r3
 8003004:	f000 faa5 	bl	8003552 <TIM_ITRx_SetConfig>
      break;
 8003008:	e02b      	b.n	8003062 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6859      	ldr	r1, [r3, #4]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	461a      	mov	r2, r3
 8003018:	f000 fa6c 	bl	80034f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2160      	movs	r1, #96	; 0x60
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fa95 	bl	8003552 <TIM_ITRx_SetConfig>
      break;
 8003028:	e01b      	b.n	8003062 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	6859      	ldr	r1, [r3, #4]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	461a      	mov	r2, r3
 8003038:	f000 fa2e 	bl	8003498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2140      	movs	r1, #64	; 0x40
 8003042:	4618      	mov	r0, r3
 8003044:	f000 fa85 	bl	8003552 <TIM_ITRx_SetConfig>
      break;
 8003048:	e00b      	b.n	8003062 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4619      	mov	r1, r3
 8003054:	4610      	mov	r0, r2
 8003056:	f000 fa7c 	bl	8003552 <TIM_ITRx_SetConfig>
        break;
 800305a:	e002      	b.n	8003062 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800305c:	bf00      	nop
 800305e:	e000      	b.n	8003062 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003060:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr

080030b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a29      	ldr	r2, [pc, #164]	; (800317c <TIM_Base_SetConfig+0xb8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d00b      	beq.n	80030f4 <TIM_Base_SetConfig+0x30>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e2:	d007      	beq.n	80030f4 <TIM_Base_SetConfig+0x30>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a26      	ldr	r2, [pc, #152]	; (8003180 <TIM_Base_SetConfig+0xbc>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d003      	beq.n	80030f4 <TIM_Base_SetConfig+0x30>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a25      	ldr	r2, [pc, #148]	; (8003184 <TIM_Base_SetConfig+0xc0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d108      	bne.n	8003106 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a1c      	ldr	r2, [pc, #112]	; (800317c <TIM_Base_SetConfig+0xb8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00b      	beq.n	8003126 <TIM_Base_SetConfig+0x62>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003114:	d007      	beq.n	8003126 <TIM_Base_SetConfig+0x62>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a19      	ldr	r2, [pc, #100]	; (8003180 <TIM_Base_SetConfig+0xbc>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d003      	beq.n	8003126 <TIM_Base_SetConfig+0x62>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a18      	ldr	r2, [pc, #96]	; (8003184 <TIM_Base_SetConfig+0xc0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d108      	bne.n	8003138 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800312c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4313      	orrs	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a07      	ldr	r2, [pc, #28]	; (800317c <TIM_Base_SetConfig+0xb8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d103      	bne.n	800316c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	615a      	str	r2, [r3, #20]
}
 8003172:	bf00      	nop
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr
 800317c:	40012c00 	.word	0x40012c00
 8003180:	40000400 	.word	0x40000400
 8003184:	40000800 	.word	0x40000800

08003188 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	f023 0201 	bic.w	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0303 	bic.w	r3, r3, #3
 80031be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f023 0302 	bic.w	r3, r3, #2
 80031d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a1c      	ldr	r2, [pc, #112]	; (8003250 <TIM_OC1_SetConfig+0xc8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d10c      	bne.n	80031fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f023 0308 	bic.w	r3, r3, #8
 80031ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f023 0304 	bic.w	r3, r3, #4
 80031fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a13      	ldr	r2, [pc, #76]	; (8003250 <TIM_OC1_SetConfig+0xc8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d111      	bne.n	800322a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800320c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	621a      	str	r2, [r3, #32]
}
 8003244:	bf00      	nop
 8003246:	371c      	adds	r7, #28
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40012c00 	.word	0x40012c00

08003254 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f023 0210 	bic.w	r2, r3, #16
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800328a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	021b      	lsls	r3, r3, #8
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f023 0320 	bic.w	r3, r3, #32
 800329e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a1d      	ldr	r2, [pc, #116]	; (8003324 <TIM_OC2_SetConfig+0xd0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d10d      	bne.n	80032d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a14      	ldr	r2, [pc, #80]	; (8003324 <TIM_OC2_SetConfig+0xd0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d113      	bne.n	8003300 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	621a      	str	r2, [r3, #32]
}
 800331a:	bf00      	nop
 800331c:	371c      	adds	r7, #28
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr
 8003324:	40012c00 	.word	0x40012c00

08003328 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0303 	bic.w	r3, r3, #3
 800335e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	021b      	lsls	r3, r3, #8
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a1d      	ldr	r2, [pc, #116]	; (80033f8 <TIM_OC3_SetConfig+0xd0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d10d      	bne.n	80033a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800338c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	021b      	lsls	r3, r3, #8
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	4313      	orrs	r3, r2
 8003398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a14      	ldr	r2, [pc, #80]	; (80033f8 <TIM_OC3_SetConfig+0xd0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d113      	bne.n	80033d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	621a      	str	r2, [r3, #32]
}
 80033ec:	bf00      	nop
 80033ee:	371c      	adds	r7, #28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40012c00 	.word	0x40012c00

080033fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	031b      	lsls	r3, r3, #12
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a0f      	ldr	r2, [pc, #60]	; (8003494 <TIM_OC4_SetConfig+0x98>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d109      	bne.n	8003470 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003462:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	019b      	lsls	r3, r3, #6
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	621a      	str	r2, [r3, #32]
}
 800348a:	bf00      	nop
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr
 8003494:	40012c00 	.word	0x40012c00

08003498 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	f023 0201 	bic.w	r2, r3, #1
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f023 030a 	bic.w	r3, r3, #10
 80034d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	621a      	str	r2, [r3, #32]
}
 80034ea:	bf00      	nop
 80034ec:	371c      	adds	r7, #28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr

080034f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f023 0210 	bic.w	r2, r3, #16
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800351e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	031b      	lsls	r3, r3, #12
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	4313      	orrs	r3, r2
 8003528:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003530:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	621a      	str	r2, [r3, #32]
}
 8003548:	bf00      	nop
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr

08003552 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003552:	b480      	push	{r7}
 8003554:	b085      	sub	sp, #20
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003568:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	f043 0307 	orr.w	r3, r3, #7
 8003574:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	609a      	str	r2, [r3, #8]
}
 800357c:	bf00      	nop
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr

08003586 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003586:	b480      	push	{r7}
 8003588:	b087      	sub	sp, #28
 800358a:	af00      	add	r7, sp, #0
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
 8003592:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	021a      	lsls	r2, r3, #8
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	609a      	str	r2, [r3, #8]
}
 80035ba:	bf00      	nop
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f003 031f 	and.w	r3, r3, #31
 80035d6:	2201      	movs	r2, #1
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a1a      	ldr	r2, [r3, #32]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	43db      	mvns	r3, r3
 80035e6:	401a      	ands	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a1a      	ldr	r2, [r3, #32]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f003 031f 	and.w	r3, r3, #31
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	fa01 f303 	lsl.w	r3, r1, r3
 80035fc:	431a      	orrs	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	621a      	str	r2, [r3, #32]
}
 8003602:	bf00      	nop
 8003604:	371c      	adds	r7, #28
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr

0800360c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003620:	2302      	movs	r3, #2
 8003622:	e046      	b.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a16      	ldr	r2, [pc, #88]	; (80036bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00e      	beq.n	8003686 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003670:	d009      	beq.n	8003686 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a12      	ldr	r2, [pc, #72]	; (80036c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d004      	beq.n	8003686 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a10      	ldr	r2, [pc, #64]	; (80036c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d10c      	bne.n	80036a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800368c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	4313      	orrs	r3, r2
 8003696:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr
 80036bc:	40012c00 	.word	0x40012c00
 80036c0:	40000400 	.word	0x40000400
 80036c4:	40000800 	.word	0x40000800

080036c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr

080036da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr

080036ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e03f      	b.n	800377e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fd ff68 	bl	80015e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2224      	movs	r2, #36	; 0x24
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800372e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fc25 	bl	8003f80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b08a      	sub	sp, #40	; 0x28
 800378a:	af02      	add	r7, sp, #8
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	4613      	mov	r3, r2
 8003794:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d17c      	bne.n	80038a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <HAL_UART_Transmit+0x2c>
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e075      	b.n	80038a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_UART_Transmit+0x3e>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e06e      	b.n	80038a2 <HAL_UART_Transmit+0x11c>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2221      	movs	r2, #33	; 0x21
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037da:	f7fe f87b 	bl	80018d4 <HAL_GetTick>
 80037de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	88fa      	ldrh	r2, [r7, #6]
 80037e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	88fa      	ldrh	r2, [r7, #6]
 80037ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f4:	d108      	bne.n	8003808 <HAL_UART_Transmit+0x82>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d104      	bne.n	8003808 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	61bb      	str	r3, [r7, #24]
 8003806:	e003      	b.n	8003810 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800380c:	2300      	movs	r3, #0
 800380e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003818:	e02a      	b.n	8003870 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2200      	movs	r2, #0
 8003822:	2180      	movs	r1, #128	; 0x80
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 fa11 	bl	8003c4c <UART_WaitOnFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e036      	b.n	80038a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10b      	bne.n	8003852 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003848:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	3302      	adds	r3, #2
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	e007      	b.n	8003862 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	781a      	ldrb	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	3301      	adds	r3, #1
 8003860:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1cf      	bne.n	800381a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2200      	movs	r2, #0
 8003882:	2140      	movs	r1, #64	; 0x40
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f9e1 	bl	8003c4c <UART_WaitOnFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e006      	b.n	80038a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800389c:	2300      	movs	r3, #0
 800389e:	e000      	b.n	80038a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038a0:	2302      	movs	r3, #2
  }
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3720      	adds	r7, #32
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08a      	sub	sp, #40	; 0x28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10d      	bne.n	80038fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_UART_IRQHandler+0x52>
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fa99 	bl	8003e2e <UART_Receive_IT>
      return;
 80038fc:	e17b      	b.n	8003bf6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 80b1 	beq.w	8003a68 <HAL_UART_IRQHandler+0x1bc>
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d105      	bne.n	800391c <HAL_UART_IRQHandler+0x70>
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 80a6 	beq.w	8003a68 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_UART_IRQHandler+0x90>
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	f043 0201 	orr.w	r2, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <HAL_UART_IRQHandler+0xb0>
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	f043 0202 	orr.w	r2, r3, #2
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_UART_IRQHandler+0xd0>
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	f043 0204 	orr.w	r2, r3, #4
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00f      	beq.n	80039a6 <HAL_UART_IRQHandler+0xfa>
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	f003 0320 	and.w	r3, r3, #32
 800398c:	2b00      	cmp	r3, #0
 800398e:	d104      	bne.n	800399a <HAL_UART_IRQHandler+0xee>
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	f043 0208 	orr.w	r2, r3, #8
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 811e 	beq.w	8003bec <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	f003 0320 	and.w	r3, r3, #32
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d007      	beq.n	80039ca <HAL_UART_IRQHandler+0x11e>
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 fa32 	bl	8003e2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf14      	ite	ne
 80039d8:	2301      	movne	r3, #1
 80039da:	2300      	moveq	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d102      	bne.n	80039f2 <HAL_UART_IRQHandler+0x146>
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d031      	beq.n	8003a56 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f974 	bl	8003ce0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d023      	beq.n	8003a4e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695a      	ldr	r2, [r3, #20]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a14:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d013      	beq.n	8003a46 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	4a76      	ldr	r2, [pc, #472]	; (8003bfc <HAL_UART_IRQHandler+0x350>)
 8003a24:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fe f8a4 	bl	8001b78 <HAL_DMA_Abort_IT>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d016      	beq.n	8003a64 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a40:	4610      	mov	r0, r2
 8003a42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a44:	e00e      	b.n	8003a64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f8ec 	bl	8003c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a4c:	e00a      	b.n	8003a64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f8e8 	bl	8003c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a54:	e006      	b.n	8003a64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f8e4 	bl	8003c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a62:	e0c3      	b.n	8003bec <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a64:	bf00      	nop
    return;
 8003a66:	e0c1      	b.n	8003bec <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	f040 80a1 	bne.w	8003bb4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 809b 	beq.w	8003bb4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 8095 	beq.w	8003bb4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d04e      	beq.n	8003b4c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003ab8:	8a3b      	ldrh	r3, [r7, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 8098 	beq.w	8003bf0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ac4:	8a3a      	ldrh	r2, [r7, #16]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	f080 8092 	bcs.w	8003bf0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8a3a      	ldrh	r2, [r7, #16]
 8003ad0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d02b      	beq.n	8003b34 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aea:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695a      	ldr	r2, [r3, #20]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0201 	bic.w	r2, r2, #1
 8003afa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695a      	ldr	r2, [r3, #20]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b0a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0210 	bic.w	r2, r2, #16
 8003b28:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd ffe7 	bl	8001b02 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	4619      	mov	r1, r3
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f876 	bl	8003c36 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b4a:	e051      	b.n	8003bf0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d047      	beq.n	8003bf4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003b64:	8a7b      	ldrh	r3, [r7, #18]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d044      	beq.n	8003bf4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b78:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695a      	ldr	r2, [r3, #20]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0201 	bic.w	r2, r2, #1
 8003b88:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0210 	bic.w	r2, r2, #16
 8003ba6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ba8:	8a7b      	ldrh	r3, [r7, #18]
 8003baa:	4619      	mov	r1, r3
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f842 	bl	8003c36 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003bb2:	e01f      	b.n	8003bf4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d008      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x324>
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f8c9 	bl	8003d60 <UART_Transmit_IT>
    return;
 8003bce:	e012      	b.n	8003bf6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00d      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x34a>
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f90a 	bl	8003dfe <UART_EndTransmit_IT>
    return;
 8003bea:	e004      	b.n	8003bf6 <HAL_UART_IRQHandler+0x34a>
    return;
 8003bec:	bf00      	nop
 8003bee:	e002      	b.n	8003bf6 <HAL_UART_IRQHandler+0x34a>
      return;
 8003bf0:	bf00      	nop
 8003bf2:	e000      	b.n	8003bf6 <HAL_UART_IRQHandler+0x34a>
      return;
 8003bf4:	bf00      	nop
  }
}
 8003bf6:	3728      	adds	r7, #40	; 0x28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	08003d39 	.word	0x08003d39

08003c00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr

08003c12 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr

08003c36 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr

08003c4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	603b      	str	r3, [r7, #0]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5c:	e02c      	b.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c64:	d028      	beq.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d007      	beq.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c6c:	f7fd fe32 	bl	80018d4 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d21d      	bcs.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c8a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0201 	bic.w	r2, r2, #1
 8003c9a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e00f      	b.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d0c3      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cf6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695a      	ldr	r2, [r3, #20]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d107      	bne.n	8003d20 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0210 	bic.w	r2, r2, #16
 8003d1e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr

08003d38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f7ff ff66 	bl	8003c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d58:	bf00      	nop
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b21      	cmp	r3, #33	; 0x21
 8003d72:	d13e      	bne.n	8003df2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d7c:	d114      	bne.n	8003da8 <UART_Transmit_IT+0x48>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d110      	bne.n	8003da8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	1c9a      	adds	r2, r3, #2
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	621a      	str	r2, [r3, #32]
 8003da6:	e008      	b.n	8003dba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	1c59      	adds	r1, r3, #1
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6211      	str	r1, [r2, #32]
 8003db2:	781a      	ldrb	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10f      	bne.n	8003dee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ddc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	e000      	b.n	8003df4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003df2:	2302      	movs	r3, #2
  }
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc80      	pop	{r7}
 8003dfc:	4770      	bx	lr

08003dfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b082      	sub	sp, #8
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff feee 	bl	8003c00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b086      	sub	sp, #24
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b22      	cmp	r3, #34	; 0x22
 8003e40:	f040 8099 	bne.w	8003f76 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4c:	d117      	bne.n	8003e7e <UART_Receive_IT+0x50>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d113      	bne.n	8003e7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e76:	1c9a      	adds	r2, r3, #2
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e7c:	e026      	b.n	8003ecc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e82:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e90:	d007      	beq.n	8003ea2 <UART_Receive_IT+0x74>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10a      	bne.n	8003eb0 <UART_Receive_IT+0x82>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	701a      	strb	r2, [r3, #0]
 8003eae:	e008      	b.n	8003ec2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	4619      	mov	r1, r3
 8003eda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d148      	bne.n	8003f72 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0220 	bic.w	r2, r2, #32
 8003eee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003efe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695a      	ldr	r2, [r3, #20]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0201 	bic.w	r2, r2, #1
 8003f0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d123      	bne.n	8003f68 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0210 	bic.w	r2, r2, #16
 8003f34:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0310 	and.w	r3, r3, #16
 8003f40:	2b10      	cmp	r3, #16
 8003f42:	d10a      	bne.n	8003f5a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f44:	2300      	movs	r3, #0
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f5e:	4619      	mov	r1, r3
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff fe68 	bl	8003c36 <HAL_UARTEx_RxEventCallback>
 8003f66:	e002      	b.n	8003f6e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff fe52 	bl	8003c12 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e002      	b.n	8003f78 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	e000      	b.n	8003f78 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003f76:	2302      	movs	r3, #2
  }
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003fba:	f023 030c 	bic.w	r3, r3, #12
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6812      	ldr	r2, [r2, #0]
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699a      	ldr	r2, [r3, #24]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a2c      	ldr	r2, [pc, #176]	; (8004094 <UART_SetConfig+0x114>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d103      	bne.n	8003ff0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003fe8:	f7fe fbf0 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 8003fec:	60f8      	str	r0, [r7, #12]
 8003fee:	e002      	b.n	8003ff6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ff0:	f7fe fbd8 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8003ff4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009a      	lsls	r2, r3, #2
 8004000:	441a      	add	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	fbb2 f3f3 	udiv	r3, r2, r3
 800400c:	4a22      	ldr	r2, [pc, #136]	; (8004098 <UART_SetConfig+0x118>)
 800400e:	fba2 2303 	umull	r2, r3, r2, r3
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	0119      	lsls	r1, r3, #4
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	009a      	lsls	r2, r3, #2
 8004020:	441a      	add	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	fbb2 f2f3 	udiv	r2, r2, r3
 800402c:	4b1a      	ldr	r3, [pc, #104]	; (8004098 <UART_SetConfig+0x118>)
 800402e:	fba3 0302 	umull	r0, r3, r3, r2
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	2064      	movs	r0, #100	; 0x64
 8004036:	fb00 f303 	mul.w	r3, r0, r3
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	3332      	adds	r3, #50	; 0x32
 8004040:	4a15      	ldr	r2, [pc, #84]	; (8004098 <UART_SetConfig+0x118>)
 8004042:	fba2 2303 	umull	r2, r3, r2, r3
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800404c:	4419      	add	r1, r3
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	009a      	lsls	r2, r3, #2
 8004058:	441a      	add	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	fbb2 f2f3 	udiv	r2, r2, r3
 8004064:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <UART_SetConfig+0x118>)
 8004066:	fba3 0302 	umull	r0, r3, r3, r2
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	2064      	movs	r0, #100	; 0x64
 800406e:	fb00 f303 	mul.w	r3, r0, r3
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	3332      	adds	r3, #50	; 0x32
 8004078:	4a07      	ldr	r2, [pc, #28]	; (8004098 <UART_SetConfig+0x118>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	f003 020f 	and.w	r2, r3, #15
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	440a      	add	r2, r1
 800408a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800408c:	bf00      	nop
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40013800 	.word	0x40013800
 8004098:	51eb851f 	.word	0x51eb851f

0800409c <__errno>:
 800409c:	4b01      	ldr	r3, [pc, #4]	; (80040a4 <__errno+0x8>)
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	20000074 	.word	0x20000074

080040a8 <__libc_init_array>:
 80040a8:	b570      	push	{r4, r5, r6, lr}
 80040aa:	2600      	movs	r6, #0
 80040ac:	4d0c      	ldr	r5, [pc, #48]	; (80040e0 <__libc_init_array+0x38>)
 80040ae:	4c0d      	ldr	r4, [pc, #52]	; (80040e4 <__libc_init_array+0x3c>)
 80040b0:	1b64      	subs	r4, r4, r5
 80040b2:	10a4      	asrs	r4, r4, #2
 80040b4:	42a6      	cmp	r6, r4
 80040b6:	d109      	bne.n	80040cc <__libc_init_array+0x24>
 80040b8:	f000 fc5c 	bl	8004974 <_init>
 80040bc:	2600      	movs	r6, #0
 80040be:	4d0a      	ldr	r5, [pc, #40]	; (80040e8 <__libc_init_array+0x40>)
 80040c0:	4c0a      	ldr	r4, [pc, #40]	; (80040ec <__libc_init_array+0x44>)
 80040c2:	1b64      	subs	r4, r4, r5
 80040c4:	10a4      	asrs	r4, r4, #2
 80040c6:	42a6      	cmp	r6, r4
 80040c8:	d105      	bne.n	80040d6 <__libc_init_array+0x2e>
 80040ca:	bd70      	pop	{r4, r5, r6, pc}
 80040cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d0:	4798      	blx	r3
 80040d2:	3601      	adds	r6, #1
 80040d4:	e7ee      	b.n	80040b4 <__libc_init_array+0xc>
 80040d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040da:	4798      	blx	r3
 80040dc:	3601      	adds	r6, #1
 80040de:	e7f2      	b.n	80040c6 <__libc_init_array+0x1e>
 80040e0:	08004af4 	.word	0x08004af4
 80040e4:	08004af4 	.word	0x08004af4
 80040e8:	08004af4 	.word	0x08004af4
 80040ec:	08004af8 	.word	0x08004af8

080040f0 <memset>:
 80040f0:	4603      	mov	r3, r0
 80040f2:	4402      	add	r2, r0
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d100      	bne.n	80040fa <memset+0xa>
 80040f8:	4770      	bx	lr
 80040fa:	f803 1b01 	strb.w	r1, [r3], #1
 80040fe:	e7f9      	b.n	80040f4 <memset+0x4>

08004100 <siprintf>:
 8004100:	b40e      	push	{r1, r2, r3}
 8004102:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004106:	b500      	push	{lr}
 8004108:	b09c      	sub	sp, #112	; 0x70
 800410a:	ab1d      	add	r3, sp, #116	; 0x74
 800410c:	9002      	str	r0, [sp, #8]
 800410e:	9006      	str	r0, [sp, #24]
 8004110:	9107      	str	r1, [sp, #28]
 8004112:	9104      	str	r1, [sp, #16]
 8004114:	4808      	ldr	r0, [pc, #32]	; (8004138 <siprintf+0x38>)
 8004116:	4909      	ldr	r1, [pc, #36]	; (800413c <siprintf+0x3c>)
 8004118:	f853 2b04 	ldr.w	r2, [r3], #4
 800411c:	9105      	str	r1, [sp, #20]
 800411e:	6800      	ldr	r0, [r0, #0]
 8004120:	a902      	add	r1, sp, #8
 8004122:	9301      	str	r3, [sp, #4]
 8004124:	f000 f868 	bl	80041f8 <_svfiprintf_r>
 8004128:	2200      	movs	r2, #0
 800412a:	9b02      	ldr	r3, [sp, #8]
 800412c:	701a      	strb	r2, [r3, #0]
 800412e:	b01c      	add	sp, #112	; 0x70
 8004130:	f85d eb04 	ldr.w	lr, [sp], #4
 8004134:	b003      	add	sp, #12
 8004136:	4770      	bx	lr
 8004138:	20000074 	.word	0x20000074
 800413c:	ffff0208 	.word	0xffff0208

08004140 <__ssputs_r>:
 8004140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004144:	688e      	ldr	r6, [r1, #8]
 8004146:	4682      	mov	sl, r0
 8004148:	429e      	cmp	r6, r3
 800414a:	460c      	mov	r4, r1
 800414c:	4690      	mov	r8, r2
 800414e:	461f      	mov	r7, r3
 8004150:	d838      	bhi.n	80041c4 <__ssputs_r+0x84>
 8004152:	898a      	ldrh	r2, [r1, #12]
 8004154:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004158:	d032      	beq.n	80041c0 <__ssputs_r+0x80>
 800415a:	6825      	ldr	r5, [r4, #0]
 800415c:	6909      	ldr	r1, [r1, #16]
 800415e:	3301      	adds	r3, #1
 8004160:	eba5 0901 	sub.w	r9, r5, r1
 8004164:	6965      	ldr	r5, [r4, #20]
 8004166:	444b      	add	r3, r9
 8004168:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800416c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004170:	106d      	asrs	r5, r5, #1
 8004172:	429d      	cmp	r5, r3
 8004174:	bf38      	it	cc
 8004176:	461d      	movcc	r5, r3
 8004178:	0553      	lsls	r3, r2, #21
 800417a:	d531      	bpl.n	80041e0 <__ssputs_r+0xa0>
 800417c:	4629      	mov	r1, r5
 800417e:	f000 fb53 	bl	8004828 <_malloc_r>
 8004182:	4606      	mov	r6, r0
 8004184:	b950      	cbnz	r0, 800419c <__ssputs_r+0x5c>
 8004186:	230c      	movs	r3, #12
 8004188:	f04f 30ff 	mov.w	r0, #4294967295
 800418c:	f8ca 3000 	str.w	r3, [sl]
 8004190:	89a3      	ldrh	r3, [r4, #12]
 8004192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004196:	81a3      	strh	r3, [r4, #12]
 8004198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800419c:	464a      	mov	r2, r9
 800419e:	6921      	ldr	r1, [r4, #16]
 80041a0:	f000 face 	bl	8004740 <memcpy>
 80041a4:	89a3      	ldrh	r3, [r4, #12]
 80041a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ae:	81a3      	strh	r3, [r4, #12]
 80041b0:	6126      	str	r6, [r4, #16]
 80041b2:	444e      	add	r6, r9
 80041b4:	6026      	str	r6, [r4, #0]
 80041b6:	463e      	mov	r6, r7
 80041b8:	6165      	str	r5, [r4, #20]
 80041ba:	eba5 0509 	sub.w	r5, r5, r9
 80041be:	60a5      	str	r5, [r4, #8]
 80041c0:	42be      	cmp	r6, r7
 80041c2:	d900      	bls.n	80041c6 <__ssputs_r+0x86>
 80041c4:	463e      	mov	r6, r7
 80041c6:	4632      	mov	r2, r6
 80041c8:	4641      	mov	r1, r8
 80041ca:	6820      	ldr	r0, [r4, #0]
 80041cc:	f000 fac6 	bl	800475c <memmove>
 80041d0:	68a3      	ldr	r3, [r4, #8]
 80041d2:	6822      	ldr	r2, [r4, #0]
 80041d4:	1b9b      	subs	r3, r3, r6
 80041d6:	4432      	add	r2, r6
 80041d8:	2000      	movs	r0, #0
 80041da:	60a3      	str	r3, [r4, #8]
 80041dc:	6022      	str	r2, [r4, #0]
 80041de:	e7db      	b.n	8004198 <__ssputs_r+0x58>
 80041e0:	462a      	mov	r2, r5
 80041e2:	f000 fb7b 	bl	80048dc <_realloc_r>
 80041e6:	4606      	mov	r6, r0
 80041e8:	2800      	cmp	r0, #0
 80041ea:	d1e1      	bne.n	80041b0 <__ssputs_r+0x70>
 80041ec:	4650      	mov	r0, sl
 80041ee:	6921      	ldr	r1, [r4, #16]
 80041f0:	f000 face 	bl	8004790 <_free_r>
 80041f4:	e7c7      	b.n	8004186 <__ssputs_r+0x46>
	...

080041f8 <_svfiprintf_r>:
 80041f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041fc:	4698      	mov	r8, r3
 80041fe:	898b      	ldrh	r3, [r1, #12]
 8004200:	4607      	mov	r7, r0
 8004202:	061b      	lsls	r3, r3, #24
 8004204:	460d      	mov	r5, r1
 8004206:	4614      	mov	r4, r2
 8004208:	b09d      	sub	sp, #116	; 0x74
 800420a:	d50e      	bpl.n	800422a <_svfiprintf_r+0x32>
 800420c:	690b      	ldr	r3, [r1, #16]
 800420e:	b963      	cbnz	r3, 800422a <_svfiprintf_r+0x32>
 8004210:	2140      	movs	r1, #64	; 0x40
 8004212:	f000 fb09 	bl	8004828 <_malloc_r>
 8004216:	6028      	str	r0, [r5, #0]
 8004218:	6128      	str	r0, [r5, #16]
 800421a:	b920      	cbnz	r0, 8004226 <_svfiprintf_r+0x2e>
 800421c:	230c      	movs	r3, #12
 800421e:	603b      	str	r3, [r7, #0]
 8004220:	f04f 30ff 	mov.w	r0, #4294967295
 8004224:	e0d1      	b.n	80043ca <_svfiprintf_r+0x1d2>
 8004226:	2340      	movs	r3, #64	; 0x40
 8004228:	616b      	str	r3, [r5, #20]
 800422a:	2300      	movs	r3, #0
 800422c:	9309      	str	r3, [sp, #36]	; 0x24
 800422e:	2320      	movs	r3, #32
 8004230:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004234:	2330      	movs	r3, #48	; 0x30
 8004236:	f04f 0901 	mov.w	r9, #1
 800423a:	f8cd 800c 	str.w	r8, [sp, #12]
 800423e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80043e4 <_svfiprintf_r+0x1ec>
 8004242:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004246:	4623      	mov	r3, r4
 8004248:	469a      	mov	sl, r3
 800424a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800424e:	b10a      	cbz	r2, 8004254 <_svfiprintf_r+0x5c>
 8004250:	2a25      	cmp	r2, #37	; 0x25
 8004252:	d1f9      	bne.n	8004248 <_svfiprintf_r+0x50>
 8004254:	ebba 0b04 	subs.w	fp, sl, r4
 8004258:	d00b      	beq.n	8004272 <_svfiprintf_r+0x7a>
 800425a:	465b      	mov	r3, fp
 800425c:	4622      	mov	r2, r4
 800425e:	4629      	mov	r1, r5
 8004260:	4638      	mov	r0, r7
 8004262:	f7ff ff6d 	bl	8004140 <__ssputs_r>
 8004266:	3001      	adds	r0, #1
 8004268:	f000 80aa 	beq.w	80043c0 <_svfiprintf_r+0x1c8>
 800426c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800426e:	445a      	add	r2, fp
 8004270:	9209      	str	r2, [sp, #36]	; 0x24
 8004272:	f89a 3000 	ldrb.w	r3, [sl]
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 80a2 	beq.w	80043c0 <_svfiprintf_r+0x1c8>
 800427c:	2300      	movs	r3, #0
 800427e:	f04f 32ff 	mov.w	r2, #4294967295
 8004282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004286:	f10a 0a01 	add.w	sl, sl, #1
 800428a:	9304      	str	r3, [sp, #16]
 800428c:	9307      	str	r3, [sp, #28]
 800428e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004292:	931a      	str	r3, [sp, #104]	; 0x68
 8004294:	4654      	mov	r4, sl
 8004296:	2205      	movs	r2, #5
 8004298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800429c:	4851      	ldr	r0, [pc, #324]	; (80043e4 <_svfiprintf_r+0x1ec>)
 800429e:	f000 fa41 	bl	8004724 <memchr>
 80042a2:	9a04      	ldr	r2, [sp, #16]
 80042a4:	b9d8      	cbnz	r0, 80042de <_svfiprintf_r+0xe6>
 80042a6:	06d0      	lsls	r0, r2, #27
 80042a8:	bf44      	itt	mi
 80042aa:	2320      	movmi	r3, #32
 80042ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042b0:	0711      	lsls	r1, r2, #28
 80042b2:	bf44      	itt	mi
 80042b4:	232b      	movmi	r3, #43	; 0x2b
 80042b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042ba:	f89a 3000 	ldrb.w	r3, [sl]
 80042be:	2b2a      	cmp	r3, #42	; 0x2a
 80042c0:	d015      	beq.n	80042ee <_svfiprintf_r+0xf6>
 80042c2:	4654      	mov	r4, sl
 80042c4:	2000      	movs	r0, #0
 80042c6:	f04f 0c0a 	mov.w	ip, #10
 80042ca:	9a07      	ldr	r2, [sp, #28]
 80042cc:	4621      	mov	r1, r4
 80042ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042d2:	3b30      	subs	r3, #48	; 0x30
 80042d4:	2b09      	cmp	r3, #9
 80042d6:	d94e      	bls.n	8004376 <_svfiprintf_r+0x17e>
 80042d8:	b1b0      	cbz	r0, 8004308 <_svfiprintf_r+0x110>
 80042da:	9207      	str	r2, [sp, #28]
 80042dc:	e014      	b.n	8004308 <_svfiprintf_r+0x110>
 80042de:	eba0 0308 	sub.w	r3, r0, r8
 80042e2:	fa09 f303 	lsl.w	r3, r9, r3
 80042e6:	4313      	orrs	r3, r2
 80042e8:	46a2      	mov	sl, r4
 80042ea:	9304      	str	r3, [sp, #16]
 80042ec:	e7d2      	b.n	8004294 <_svfiprintf_r+0x9c>
 80042ee:	9b03      	ldr	r3, [sp, #12]
 80042f0:	1d19      	adds	r1, r3, #4
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	9103      	str	r1, [sp, #12]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	bfbb      	ittet	lt
 80042fa:	425b      	neglt	r3, r3
 80042fc:	f042 0202 	orrlt.w	r2, r2, #2
 8004300:	9307      	strge	r3, [sp, #28]
 8004302:	9307      	strlt	r3, [sp, #28]
 8004304:	bfb8      	it	lt
 8004306:	9204      	strlt	r2, [sp, #16]
 8004308:	7823      	ldrb	r3, [r4, #0]
 800430a:	2b2e      	cmp	r3, #46	; 0x2e
 800430c:	d10c      	bne.n	8004328 <_svfiprintf_r+0x130>
 800430e:	7863      	ldrb	r3, [r4, #1]
 8004310:	2b2a      	cmp	r3, #42	; 0x2a
 8004312:	d135      	bne.n	8004380 <_svfiprintf_r+0x188>
 8004314:	9b03      	ldr	r3, [sp, #12]
 8004316:	3402      	adds	r4, #2
 8004318:	1d1a      	adds	r2, r3, #4
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	9203      	str	r2, [sp, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	bfb8      	it	lt
 8004322:	f04f 33ff 	movlt.w	r3, #4294967295
 8004326:	9305      	str	r3, [sp, #20]
 8004328:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80043f4 <_svfiprintf_r+0x1fc>
 800432c:	2203      	movs	r2, #3
 800432e:	4650      	mov	r0, sl
 8004330:	7821      	ldrb	r1, [r4, #0]
 8004332:	f000 f9f7 	bl	8004724 <memchr>
 8004336:	b140      	cbz	r0, 800434a <_svfiprintf_r+0x152>
 8004338:	2340      	movs	r3, #64	; 0x40
 800433a:	eba0 000a 	sub.w	r0, r0, sl
 800433e:	fa03 f000 	lsl.w	r0, r3, r0
 8004342:	9b04      	ldr	r3, [sp, #16]
 8004344:	3401      	adds	r4, #1
 8004346:	4303      	orrs	r3, r0
 8004348:	9304      	str	r3, [sp, #16]
 800434a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800434e:	2206      	movs	r2, #6
 8004350:	4825      	ldr	r0, [pc, #148]	; (80043e8 <_svfiprintf_r+0x1f0>)
 8004352:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004356:	f000 f9e5 	bl	8004724 <memchr>
 800435a:	2800      	cmp	r0, #0
 800435c:	d038      	beq.n	80043d0 <_svfiprintf_r+0x1d8>
 800435e:	4b23      	ldr	r3, [pc, #140]	; (80043ec <_svfiprintf_r+0x1f4>)
 8004360:	bb1b      	cbnz	r3, 80043aa <_svfiprintf_r+0x1b2>
 8004362:	9b03      	ldr	r3, [sp, #12]
 8004364:	3307      	adds	r3, #7
 8004366:	f023 0307 	bic.w	r3, r3, #7
 800436a:	3308      	adds	r3, #8
 800436c:	9303      	str	r3, [sp, #12]
 800436e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004370:	4433      	add	r3, r6
 8004372:	9309      	str	r3, [sp, #36]	; 0x24
 8004374:	e767      	b.n	8004246 <_svfiprintf_r+0x4e>
 8004376:	460c      	mov	r4, r1
 8004378:	2001      	movs	r0, #1
 800437a:	fb0c 3202 	mla	r2, ip, r2, r3
 800437e:	e7a5      	b.n	80042cc <_svfiprintf_r+0xd4>
 8004380:	2300      	movs	r3, #0
 8004382:	f04f 0c0a 	mov.w	ip, #10
 8004386:	4619      	mov	r1, r3
 8004388:	3401      	adds	r4, #1
 800438a:	9305      	str	r3, [sp, #20]
 800438c:	4620      	mov	r0, r4
 800438e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004392:	3a30      	subs	r2, #48	; 0x30
 8004394:	2a09      	cmp	r2, #9
 8004396:	d903      	bls.n	80043a0 <_svfiprintf_r+0x1a8>
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0c5      	beq.n	8004328 <_svfiprintf_r+0x130>
 800439c:	9105      	str	r1, [sp, #20]
 800439e:	e7c3      	b.n	8004328 <_svfiprintf_r+0x130>
 80043a0:	4604      	mov	r4, r0
 80043a2:	2301      	movs	r3, #1
 80043a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80043a8:	e7f0      	b.n	800438c <_svfiprintf_r+0x194>
 80043aa:	ab03      	add	r3, sp, #12
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	462a      	mov	r2, r5
 80043b0:	4638      	mov	r0, r7
 80043b2:	4b0f      	ldr	r3, [pc, #60]	; (80043f0 <_svfiprintf_r+0x1f8>)
 80043b4:	a904      	add	r1, sp, #16
 80043b6:	f3af 8000 	nop.w
 80043ba:	1c42      	adds	r2, r0, #1
 80043bc:	4606      	mov	r6, r0
 80043be:	d1d6      	bne.n	800436e <_svfiprintf_r+0x176>
 80043c0:	89ab      	ldrh	r3, [r5, #12]
 80043c2:	065b      	lsls	r3, r3, #25
 80043c4:	f53f af2c 	bmi.w	8004220 <_svfiprintf_r+0x28>
 80043c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043ca:	b01d      	add	sp, #116	; 0x74
 80043cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043d0:	ab03      	add	r3, sp, #12
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	462a      	mov	r2, r5
 80043d6:	4638      	mov	r0, r7
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <_svfiprintf_r+0x1f8>)
 80043da:	a904      	add	r1, sp, #16
 80043dc:	f000 f87c 	bl	80044d8 <_printf_i>
 80043e0:	e7eb      	b.n	80043ba <_svfiprintf_r+0x1c2>
 80043e2:	bf00      	nop
 80043e4:	08004ac0 	.word	0x08004ac0
 80043e8:	08004aca 	.word	0x08004aca
 80043ec:	00000000 	.word	0x00000000
 80043f0:	08004141 	.word	0x08004141
 80043f4:	08004ac6 	.word	0x08004ac6

080043f8 <_printf_common>:
 80043f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043fc:	4616      	mov	r6, r2
 80043fe:	4699      	mov	r9, r3
 8004400:	688a      	ldr	r2, [r1, #8]
 8004402:	690b      	ldr	r3, [r1, #16]
 8004404:	4607      	mov	r7, r0
 8004406:	4293      	cmp	r3, r2
 8004408:	bfb8      	it	lt
 800440a:	4613      	movlt	r3, r2
 800440c:	6033      	str	r3, [r6, #0]
 800440e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004412:	460c      	mov	r4, r1
 8004414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004418:	b10a      	cbz	r2, 800441e <_printf_common+0x26>
 800441a:	3301      	adds	r3, #1
 800441c:	6033      	str	r3, [r6, #0]
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	0699      	lsls	r1, r3, #26
 8004422:	bf42      	ittt	mi
 8004424:	6833      	ldrmi	r3, [r6, #0]
 8004426:	3302      	addmi	r3, #2
 8004428:	6033      	strmi	r3, [r6, #0]
 800442a:	6825      	ldr	r5, [r4, #0]
 800442c:	f015 0506 	ands.w	r5, r5, #6
 8004430:	d106      	bne.n	8004440 <_printf_common+0x48>
 8004432:	f104 0a19 	add.w	sl, r4, #25
 8004436:	68e3      	ldr	r3, [r4, #12]
 8004438:	6832      	ldr	r2, [r6, #0]
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	42ab      	cmp	r3, r5
 800443e:	dc28      	bgt.n	8004492 <_printf_common+0x9a>
 8004440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004444:	1e13      	subs	r3, r2, #0
 8004446:	6822      	ldr	r2, [r4, #0]
 8004448:	bf18      	it	ne
 800444a:	2301      	movne	r3, #1
 800444c:	0692      	lsls	r2, r2, #26
 800444e:	d42d      	bmi.n	80044ac <_printf_common+0xb4>
 8004450:	4649      	mov	r1, r9
 8004452:	4638      	mov	r0, r7
 8004454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004458:	47c0      	blx	r8
 800445a:	3001      	adds	r0, #1
 800445c:	d020      	beq.n	80044a0 <_printf_common+0xa8>
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	68e5      	ldr	r5, [r4, #12]
 8004462:	f003 0306 	and.w	r3, r3, #6
 8004466:	2b04      	cmp	r3, #4
 8004468:	bf18      	it	ne
 800446a:	2500      	movne	r5, #0
 800446c:	6832      	ldr	r2, [r6, #0]
 800446e:	f04f 0600 	mov.w	r6, #0
 8004472:	68a3      	ldr	r3, [r4, #8]
 8004474:	bf08      	it	eq
 8004476:	1aad      	subeq	r5, r5, r2
 8004478:	6922      	ldr	r2, [r4, #16]
 800447a:	bf08      	it	eq
 800447c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004480:	4293      	cmp	r3, r2
 8004482:	bfc4      	itt	gt
 8004484:	1a9b      	subgt	r3, r3, r2
 8004486:	18ed      	addgt	r5, r5, r3
 8004488:	341a      	adds	r4, #26
 800448a:	42b5      	cmp	r5, r6
 800448c:	d11a      	bne.n	80044c4 <_printf_common+0xcc>
 800448e:	2000      	movs	r0, #0
 8004490:	e008      	b.n	80044a4 <_printf_common+0xac>
 8004492:	2301      	movs	r3, #1
 8004494:	4652      	mov	r2, sl
 8004496:	4649      	mov	r1, r9
 8004498:	4638      	mov	r0, r7
 800449a:	47c0      	blx	r8
 800449c:	3001      	adds	r0, #1
 800449e:	d103      	bne.n	80044a8 <_printf_common+0xb0>
 80044a0:	f04f 30ff 	mov.w	r0, #4294967295
 80044a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a8:	3501      	adds	r5, #1
 80044aa:	e7c4      	b.n	8004436 <_printf_common+0x3e>
 80044ac:	2030      	movs	r0, #48	; 0x30
 80044ae:	18e1      	adds	r1, r4, r3
 80044b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044ba:	4422      	add	r2, r4
 80044bc:	3302      	adds	r3, #2
 80044be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044c2:	e7c5      	b.n	8004450 <_printf_common+0x58>
 80044c4:	2301      	movs	r3, #1
 80044c6:	4622      	mov	r2, r4
 80044c8:	4649      	mov	r1, r9
 80044ca:	4638      	mov	r0, r7
 80044cc:	47c0      	blx	r8
 80044ce:	3001      	adds	r0, #1
 80044d0:	d0e6      	beq.n	80044a0 <_printf_common+0xa8>
 80044d2:	3601      	adds	r6, #1
 80044d4:	e7d9      	b.n	800448a <_printf_common+0x92>
	...

080044d8 <_printf_i>:
 80044d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044dc:	460c      	mov	r4, r1
 80044de:	7e27      	ldrb	r7, [r4, #24]
 80044e0:	4691      	mov	r9, r2
 80044e2:	2f78      	cmp	r7, #120	; 0x78
 80044e4:	4680      	mov	r8, r0
 80044e6:	469a      	mov	sl, r3
 80044e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80044ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044ee:	d807      	bhi.n	8004500 <_printf_i+0x28>
 80044f0:	2f62      	cmp	r7, #98	; 0x62
 80044f2:	d80a      	bhi.n	800450a <_printf_i+0x32>
 80044f4:	2f00      	cmp	r7, #0
 80044f6:	f000 80d9 	beq.w	80046ac <_printf_i+0x1d4>
 80044fa:	2f58      	cmp	r7, #88	; 0x58
 80044fc:	f000 80a4 	beq.w	8004648 <_printf_i+0x170>
 8004500:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004508:	e03a      	b.n	8004580 <_printf_i+0xa8>
 800450a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800450e:	2b15      	cmp	r3, #21
 8004510:	d8f6      	bhi.n	8004500 <_printf_i+0x28>
 8004512:	a001      	add	r0, pc, #4	; (adr r0, 8004518 <_printf_i+0x40>)
 8004514:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004518:	08004571 	.word	0x08004571
 800451c:	08004585 	.word	0x08004585
 8004520:	08004501 	.word	0x08004501
 8004524:	08004501 	.word	0x08004501
 8004528:	08004501 	.word	0x08004501
 800452c:	08004501 	.word	0x08004501
 8004530:	08004585 	.word	0x08004585
 8004534:	08004501 	.word	0x08004501
 8004538:	08004501 	.word	0x08004501
 800453c:	08004501 	.word	0x08004501
 8004540:	08004501 	.word	0x08004501
 8004544:	08004693 	.word	0x08004693
 8004548:	080045b5 	.word	0x080045b5
 800454c:	08004675 	.word	0x08004675
 8004550:	08004501 	.word	0x08004501
 8004554:	08004501 	.word	0x08004501
 8004558:	080046b5 	.word	0x080046b5
 800455c:	08004501 	.word	0x08004501
 8004560:	080045b5 	.word	0x080045b5
 8004564:	08004501 	.word	0x08004501
 8004568:	08004501 	.word	0x08004501
 800456c:	0800467d 	.word	0x0800467d
 8004570:	680b      	ldr	r3, [r1, #0]
 8004572:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004576:	1d1a      	adds	r2, r3, #4
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	600a      	str	r2, [r1, #0]
 800457c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004580:	2301      	movs	r3, #1
 8004582:	e0a4      	b.n	80046ce <_printf_i+0x1f6>
 8004584:	6825      	ldr	r5, [r4, #0]
 8004586:	6808      	ldr	r0, [r1, #0]
 8004588:	062e      	lsls	r6, r5, #24
 800458a:	f100 0304 	add.w	r3, r0, #4
 800458e:	d50a      	bpl.n	80045a6 <_printf_i+0xce>
 8004590:	6805      	ldr	r5, [r0, #0]
 8004592:	600b      	str	r3, [r1, #0]
 8004594:	2d00      	cmp	r5, #0
 8004596:	da03      	bge.n	80045a0 <_printf_i+0xc8>
 8004598:	232d      	movs	r3, #45	; 0x2d
 800459a:	426d      	negs	r5, r5
 800459c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045a0:	230a      	movs	r3, #10
 80045a2:	485e      	ldr	r0, [pc, #376]	; (800471c <_printf_i+0x244>)
 80045a4:	e019      	b.n	80045da <_printf_i+0x102>
 80045a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80045aa:	6805      	ldr	r5, [r0, #0]
 80045ac:	600b      	str	r3, [r1, #0]
 80045ae:	bf18      	it	ne
 80045b0:	b22d      	sxthne	r5, r5
 80045b2:	e7ef      	b.n	8004594 <_printf_i+0xbc>
 80045b4:	680b      	ldr	r3, [r1, #0]
 80045b6:	6825      	ldr	r5, [r4, #0]
 80045b8:	1d18      	adds	r0, r3, #4
 80045ba:	6008      	str	r0, [r1, #0]
 80045bc:	0628      	lsls	r0, r5, #24
 80045be:	d501      	bpl.n	80045c4 <_printf_i+0xec>
 80045c0:	681d      	ldr	r5, [r3, #0]
 80045c2:	e002      	b.n	80045ca <_printf_i+0xf2>
 80045c4:	0669      	lsls	r1, r5, #25
 80045c6:	d5fb      	bpl.n	80045c0 <_printf_i+0xe8>
 80045c8:	881d      	ldrh	r5, [r3, #0]
 80045ca:	2f6f      	cmp	r7, #111	; 0x6f
 80045cc:	bf0c      	ite	eq
 80045ce:	2308      	moveq	r3, #8
 80045d0:	230a      	movne	r3, #10
 80045d2:	4852      	ldr	r0, [pc, #328]	; (800471c <_printf_i+0x244>)
 80045d4:	2100      	movs	r1, #0
 80045d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045da:	6866      	ldr	r6, [r4, #4]
 80045dc:	2e00      	cmp	r6, #0
 80045de:	bfa8      	it	ge
 80045e0:	6821      	ldrge	r1, [r4, #0]
 80045e2:	60a6      	str	r6, [r4, #8]
 80045e4:	bfa4      	itt	ge
 80045e6:	f021 0104 	bicge.w	r1, r1, #4
 80045ea:	6021      	strge	r1, [r4, #0]
 80045ec:	b90d      	cbnz	r5, 80045f2 <_printf_i+0x11a>
 80045ee:	2e00      	cmp	r6, #0
 80045f0:	d04d      	beq.n	800468e <_printf_i+0x1b6>
 80045f2:	4616      	mov	r6, r2
 80045f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80045f8:	fb03 5711 	mls	r7, r3, r1, r5
 80045fc:	5dc7      	ldrb	r7, [r0, r7]
 80045fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004602:	462f      	mov	r7, r5
 8004604:	42bb      	cmp	r3, r7
 8004606:	460d      	mov	r5, r1
 8004608:	d9f4      	bls.n	80045f4 <_printf_i+0x11c>
 800460a:	2b08      	cmp	r3, #8
 800460c:	d10b      	bne.n	8004626 <_printf_i+0x14e>
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	07df      	lsls	r7, r3, #31
 8004612:	d508      	bpl.n	8004626 <_printf_i+0x14e>
 8004614:	6923      	ldr	r3, [r4, #16]
 8004616:	6861      	ldr	r1, [r4, #4]
 8004618:	4299      	cmp	r1, r3
 800461a:	bfde      	ittt	le
 800461c:	2330      	movle	r3, #48	; 0x30
 800461e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004622:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004626:	1b92      	subs	r2, r2, r6
 8004628:	6122      	str	r2, [r4, #16]
 800462a:	464b      	mov	r3, r9
 800462c:	4621      	mov	r1, r4
 800462e:	4640      	mov	r0, r8
 8004630:	f8cd a000 	str.w	sl, [sp]
 8004634:	aa03      	add	r2, sp, #12
 8004636:	f7ff fedf 	bl	80043f8 <_printf_common>
 800463a:	3001      	adds	r0, #1
 800463c:	d14c      	bne.n	80046d8 <_printf_i+0x200>
 800463e:	f04f 30ff 	mov.w	r0, #4294967295
 8004642:	b004      	add	sp, #16
 8004644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004648:	4834      	ldr	r0, [pc, #208]	; (800471c <_printf_i+0x244>)
 800464a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800464e:	680e      	ldr	r6, [r1, #0]
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	f856 5b04 	ldr.w	r5, [r6], #4
 8004656:	061f      	lsls	r7, r3, #24
 8004658:	600e      	str	r6, [r1, #0]
 800465a:	d514      	bpl.n	8004686 <_printf_i+0x1ae>
 800465c:	07d9      	lsls	r1, r3, #31
 800465e:	bf44      	itt	mi
 8004660:	f043 0320 	orrmi.w	r3, r3, #32
 8004664:	6023      	strmi	r3, [r4, #0]
 8004666:	b91d      	cbnz	r5, 8004670 <_printf_i+0x198>
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	f023 0320 	bic.w	r3, r3, #32
 800466e:	6023      	str	r3, [r4, #0]
 8004670:	2310      	movs	r3, #16
 8004672:	e7af      	b.n	80045d4 <_printf_i+0xfc>
 8004674:	6823      	ldr	r3, [r4, #0]
 8004676:	f043 0320 	orr.w	r3, r3, #32
 800467a:	6023      	str	r3, [r4, #0]
 800467c:	2378      	movs	r3, #120	; 0x78
 800467e:	4828      	ldr	r0, [pc, #160]	; (8004720 <_printf_i+0x248>)
 8004680:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004684:	e7e3      	b.n	800464e <_printf_i+0x176>
 8004686:	065e      	lsls	r6, r3, #25
 8004688:	bf48      	it	mi
 800468a:	b2ad      	uxthmi	r5, r5
 800468c:	e7e6      	b.n	800465c <_printf_i+0x184>
 800468e:	4616      	mov	r6, r2
 8004690:	e7bb      	b.n	800460a <_printf_i+0x132>
 8004692:	680b      	ldr	r3, [r1, #0]
 8004694:	6826      	ldr	r6, [r4, #0]
 8004696:	1d1d      	adds	r5, r3, #4
 8004698:	6960      	ldr	r0, [r4, #20]
 800469a:	600d      	str	r5, [r1, #0]
 800469c:	0635      	lsls	r5, r6, #24
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	d501      	bpl.n	80046a6 <_printf_i+0x1ce>
 80046a2:	6018      	str	r0, [r3, #0]
 80046a4:	e002      	b.n	80046ac <_printf_i+0x1d4>
 80046a6:	0671      	lsls	r1, r6, #25
 80046a8:	d5fb      	bpl.n	80046a2 <_printf_i+0x1ca>
 80046aa:	8018      	strh	r0, [r3, #0]
 80046ac:	2300      	movs	r3, #0
 80046ae:	4616      	mov	r6, r2
 80046b0:	6123      	str	r3, [r4, #16]
 80046b2:	e7ba      	b.n	800462a <_printf_i+0x152>
 80046b4:	680b      	ldr	r3, [r1, #0]
 80046b6:	1d1a      	adds	r2, r3, #4
 80046b8:	600a      	str	r2, [r1, #0]
 80046ba:	681e      	ldr	r6, [r3, #0]
 80046bc:	2100      	movs	r1, #0
 80046be:	4630      	mov	r0, r6
 80046c0:	6862      	ldr	r2, [r4, #4]
 80046c2:	f000 f82f 	bl	8004724 <memchr>
 80046c6:	b108      	cbz	r0, 80046cc <_printf_i+0x1f4>
 80046c8:	1b80      	subs	r0, r0, r6
 80046ca:	6060      	str	r0, [r4, #4]
 80046cc:	6863      	ldr	r3, [r4, #4]
 80046ce:	6123      	str	r3, [r4, #16]
 80046d0:	2300      	movs	r3, #0
 80046d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046d6:	e7a8      	b.n	800462a <_printf_i+0x152>
 80046d8:	4632      	mov	r2, r6
 80046da:	4649      	mov	r1, r9
 80046dc:	4640      	mov	r0, r8
 80046de:	6923      	ldr	r3, [r4, #16]
 80046e0:	47d0      	blx	sl
 80046e2:	3001      	adds	r0, #1
 80046e4:	d0ab      	beq.n	800463e <_printf_i+0x166>
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	079b      	lsls	r3, r3, #30
 80046ea:	d413      	bmi.n	8004714 <_printf_i+0x23c>
 80046ec:	68e0      	ldr	r0, [r4, #12]
 80046ee:	9b03      	ldr	r3, [sp, #12]
 80046f0:	4298      	cmp	r0, r3
 80046f2:	bfb8      	it	lt
 80046f4:	4618      	movlt	r0, r3
 80046f6:	e7a4      	b.n	8004642 <_printf_i+0x16a>
 80046f8:	2301      	movs	r3, #1
 80046fa:	4632      	mov	r2, r6
 80046fc:	4649      	mov	r1, r9
 80046fe:	4640      	mov	r0, r8
 8004700:	47d0      	blx	sl
 8004702:	3001      	adds	r0, #1
 8004704:	d09b      	beq.n	800463e <_printf_i+0x166>
 8004706:	3501      	adds	r5, #1
 8004708:	68e3      	ldr	r3, [r4, #12]
 800470a:	9903      	ldr	r1, [sp, #12]
 800470c:	1a5b      	subs	r3, r3, r1
 800470e:	42ab      	cmp	r3, r5
 8004710:	dcf2      	bgt.n	80046f8 <_printf_i+0x220>
 8004712:	e7eb      	b.n	80046ec <_printf_i+0x214>
 8004714:	2500      	movs	r5, #0
 8004716:	f104 0619 	add.w	r6, r4, #25
 800471a:	e7f5      	b.n	8004708 <_printf_i+0x230>
 800471c:	08004ad1 	.word	0x08004ad1
 8004720:	08004ae2 	.word	0x08004ae2

08004724 <memchr>:
 8004724:	4603      	mov	r3, r0
 8004726:	b510      	push	{r4, lr}
 8004728:	b2c9      	uxtb	r1, r1
 800472a:	4402      	add	r2, r0
 800472c:	4293      	cmp	r3, r2
 800472e:	4618      	mov	r0, r3
 8004730:	d101      	bne.n	8004736 <memchr+0x12>
 8004732:	2000      	movs	r0, #0
 8004734:	e003      	b.n	800473e <memchr+0x1a>
 8004736:	7804      	ldrb	r4, [r0, #0]
 8004738:	3301      	adds	r3, #1
 800473a:	428c      	cmp	r4, r1
 800473c:	d1f6      	bne.n	800472c <memchr+0x8>
 800473e:	bd10      	pop	{r4, pc}

08004740 <memcpy>:
 8004740:	440a      	add	r2, r1
 8004742:	4291      	cmp	r1, r2
 8004744:	f100 33ff 	add.w	r3, r0, #4294967295
 8004748:	d100      	bne.n	800474c <memcpy+0xc>
 800474a:	4770      	bx	lr
 800474c:	b510      	push	{r4, lr}
 800474e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004752:	4291      	cmp	r1, r2
 8004754:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004758:	d1f9      	bne.n	800474e <memcpy+0xe>
 800475a:	bd10      	pop	{r4, pc}

0800475c <memmove>:
 800475c:	4288      	cmp	r0, r1
 800475e:	b510      	push	{r4, lr}
 8004760:	eb01 0402 	add.w	r4, r1, r2
 8004764:	d902      	bls.n	800476c <memmove+0x10>
 8004766:	4284      	cmp	r4, r0
 8004768:	4623      	mov	r3, r4
 800476a:	d807      	bhi.n	800477c <memmove+0x20>
 800476c:	1e43      	subs	r3, r0, #1
 800476e:	42a1      	cmp	r1, r4
 8004770:	d008      	beq.n	8004784 <memmove+0x28>
 8004772:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004776:	f803 2f01 	strb.w	r2, [r3, #1]!
 800477a:	e7f8      	b.n	800476e <memmove+0x12>
 800477c:	4601      	mov	r1, r0
 800477e:	4402      	add	r2, r0
 8004780:	428a      	cmp	r2, r1
 8004782:	d100      	bne.n	8004786 <memmove+0x2a>
 8004784:	bd10      	pop	{r4, pc}
 8004786:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800478a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800478e:	e7f7      	b.n	8004780 <memmove+0x24>

08004790 <_free_r>:
 8004790:	b538      	push	{r3, r4, r5, lr}
 8004792:	4605      	mov	r5, r0
 8004794:	2900      	cmp	r1, #0
 8004796:	d043      	beq.n	8004820 <_free_r+0x90>
 8004798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800479c:	1f0c      	subs	r4, r1, #4
 800479e:	2b00      	cmp	r3, #0
 80047a0:	bfb8      	it	lt
 80047a2:	18e4      	addlt	r4, r4, r3
 80047a4:	f000 f8d0 	bl	8004948 <__malloc_lock>
 80047a8:	4a1e      	ldr	r2, [pc, #120]	; (8004824 <_free_r+0x94>)
 80047aa:	6813      	ldr	r3, [r2, #0]
 80047ac:	4610      	mov	r0, r2
 80047ae:	b933      	cbnz	r3, 80047be <_free_r+0x2e>
 80047b0:	6063      	str	r3, [r4, #4]
 80047b2:	6014      	str	r4, [r2, #0]
 80047b4:	4628      	mov	r0, r5
 80047b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047ba:	f000 b8cb 	b.w	8004954 <__malloc_unlock>
 80047be:	42a3      	cmp	r3, r4
 80047c0:	d90a      	bls.n	80047d8 <_free_r+0x48>
 80047c2:	6821      	ldr	r1, [r4, #0]
 80047c4:	1862      	adds	r2, r4, r1
 80047c6:	4293      	cmp	r3, r2
 80047c8:	bf01      	itttt	eq
 80047ca:	681a      	ldreq	r2, [r3, #0]
 80047cc:	685b      	ldreq	r3, [r3, #4]
 80047ce:	1852      	addeq	r2, r2, r1
 80047d0:	6022      	streq	r2, [r4, #0]
 80047d2:	6063      	str	r3, [r4, #4]
 80047d4:	6004      	str	r4, [r0, #0]
 80047d6:	e7ed      	b.n	80047b4 <_free_r+0x24>
 80047d8:	461a      	mov	r2, r3
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	b10b      	cbz	r3, 80047e2 <_free_r+0x52>
 80047de:	42a3      	cmp	r3, r4
 80047e0:	d9fa      	bls.n	80047d8 <_free_r+0x48>
 80047e2:	6811      	ldr	r1, [r2, #0]
 80047e4:	1850      	adds	r0, r2, r1
 80047e6:	42a0      	cmp	r0, r4
 80047e8:	d10b      	bne.n	8004802 <_free_r+0x72>
 80047ea:	6820      	ldr	r0, [r4, #0]
 80047ec:	4401      	add	r1, r0
 80047ee:	1850      	adds	r0, r2, r1
 80047f0:	4283      	cmp	r3, r0
 80047f2:	6011      	str	r1, [r2, #0]
 80047f4:	d1de      	bne.n	80047b4 <_free_r+0x24>
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	4401      	add	r1, r0
 80047fc:	6011      	str	r1, [r2, #0]
 80047fe:	6053      	str	r3, [r2, #4]
 8004800:	e7d8      	b.n	80047b4 <_free_r+0x24>
 8004802:	d902      	bls.n	800480a <_free_r+0x7a>
 8004804:	230c      	movs	r3, #12
 8004806:	602b      	str	r3, [r5, #0]
 8004808:	e7d4      	b.n	80047b4 <_free_r+0x24>
 800480a:	6820      	ldr	r0, [r4, #0]
 800480c:	1821      	adds	r1, r4, r0
 800480e:	428b      	cmp	r3, r1
 8004810:	bf01      	itttt	eq
 8004812:	6819      	ldreq	r1, [r3, #0]
 8004814:	685b      	ldreq	r3, [r3, #4]
 8004816:	1809      	addeq	r1, r1, r0
 8004818:	6021      	streq	r1, [r4, #0]
 800481a:	6063      	str	r3, [r4, #4]
 800481c:	6054      	str	r4, [r2, #4]
 800481e:	e7c9      	b.n	80047b4 <_free_r+0x24>
 8004820:	bd38      	pop	{r3, r4, r5, pc}
 8004822:	bf00      	nop
 8004824:	2000014c 	.word	0x2000014c

08004828 <_malloc_r>:
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482a:	1ccd      	adds	r5, r1, #3
 800482c:	f025 0503 	bic.w	r5, r5, #3
 8004830:	3508      	adds	r5, #8
 8004832:	2d0c      	cmp	r5, #12
 8004834:	bf38      	it	cc
 8004836:	250c      	movcc	r5, #12
 8004838:	2d00      	cmp	r5, #0
 800483a:	4606      	mov	r6, r0
 800483c:	db01      	blt.n	8004842 <_malloc_r+0x1a>
 800483e:	42a9      	cmp	r1, r5
 8004840:	d903      	bls.n	800484a <_malloc_r+0x22>
 8004842:	230c      	movs	r3, #12
 8004844:	6033      	str	r3, [r6, #0]
 8004846:	2000      	movs	r0, #0
 8004848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800484a:	f000 f87d 	bl	8004948 <__malloc_lock>
 800484e:	4921      	ldr	r1, [pc, #132]	; (80048d4 <_malloc_r+0xac>)
 8004850:	680a      	ldr	r2, [r1, #0]
 8004852:	4614      	mov	r4, r2
 8004854:	b99c      	cbnz	r4, 800487e <_malloc_r+0x56>
 8004856:	4f20      	ldr	r7, [pc, #128]	; (80048d8 <_malloc_r+0xb0>)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	b923      	cbnz	r3, 8004866 <_malloc_r+0x3e>
 800485c:	4621      	mov	r1, r4
 800485e:	4630      	mov	r0, r6
 8004860:	f000 f862 	bl	8004928 <_sbrk_r>
 8004864:	6038      	str	r0, [r7, #0]
 8004866:	4629      	mov	r1, r5
 8004868:	4630      	mov	r0, r6
 800486a:	f000 f85d 	bl	8004928 <_sbrk_r>
 800486e:	1c43      	adds	r3, r0, #1
 8004870:	d123      	bne.n	80048ba <_malloc_r+0x92>
 8004872:	230c      	movs	r3, #12
 8004874:	4630      	mov	r0, r6
 8004876:	6033      	str	r3, [r6, #0]
 8004878:	f000 f86c 	bl	8004954 <__malloc_unlock>
 800487c:	e7e3      	b.n	8004846 <_malloc_r+0x1e>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	1b5b      	subs	r3, r3, r5
 8004882:	d417      	bmi.n	80048b4 <_malloc_r+0x8c>
 8004884:	2b0b      	cmp	r3, #11
 8004886:	d903      	bls.n	8004890 <_malloc_r+0x68>
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	441c      	add	r4, r3
 800488c:	6025      	str	r5, [r4, #0]
 800488e:	e004      	b.n	800489a <_malloc_r+0x72>
 8004890:	6863      	ldr	r3, [r4, #4]
 8004892:	42a2      	cmp	r2, r4
 8004894:	bf0c      	ite	eq
 8004896:	600b      	streq	r3, [r1, #0]
 8004898:	6053      	strne	r3, [r2, #4]
 800489a:	4630      	mov	r0, r6
 800489c:	f000 f85a 	bl	8004954 <__malloc_unlock>
 80048a0:	f104 000b 	add.w	r0, r4, #11
 80048a4:	1d23      	adds	r3, r4, #4
 80048a6:	f020 0007 	bic.w	r0, r0, #7
 80048aa:	1ac2      	subs	r2, r0, r3
 80048ac:	d0cc      	beq.n	8004848 <_malloc_r+0x20>
 80048ae:	1a1b      	subs	r3, r3, r0
 80048b0:	50a3      	str	r3, [r4, r2]
 80048b2:	e7c9      	b.n	8004848 <_malloc_r+0x20>
 80048b4:	4622      	mov	r2, r4
 80048b6:	6864      	ldr	r4, [r4, #4]
 80048b8:	e7cc      	b.n	8004854 <_malloc_r+0x2c>
 80048ba:	1cc4      	adds	r4, r0, #3
 80048bc:	f024 0403 	bic.w	r4, r4, #3
 80048c0:	42a0      	cmp	r0, r4
 80048c2:	d0e3      	beq.n	800488c <_malloc_r+0x64>
 80048c4:	1a21      	subs	r1, r4, r0
 80048c6:	4630      	mov	r0, r6
 80048c8:	f000 f82e 	bl	8004928 <_sbrk_r>
 80048cc:	3001      	adds	r0, #1
 80048ce:	d1dd      	bne.n	800488c <_malloc_r+0x64>
 80048d0:	e7cf      	b.n	8004872 <_malloc_r+0x4a>
 80048d2:	bf00      	nop
 80048d4:	2000014c 	.word	0x2000014c
 80048d8:	20000150 	.word	0x20000150

080048dc <_realloc_r>:
 80048dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048de:	4607      	mov	r7, r0
 80048e0:	4614      	mov	r4, r2
 80048e2:	460e      	mov	r6, r1
 80048e4:	b921      	cbnz	r1, 80048f0 <_realloc_r+0x14>
 80048e6:	4611      	mov	r1, r2
 80048e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048ec:	f7ff bf9c 	b.w	8004828 <_malloc_r>
 80048f0:	b922      	cbnz	r2, 80048fc <_realloc_r+0x20>
 80048f2:	f7ff ff4d 	bl	8004790 <_free_r>
 80048f6:	4625      	mov	r5, r4
 80048f8:	4628      	mov	r0, r5
 80048fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048fc:	f000 f830 	bl	8004960 <_malloc_usable_size_r>
 8004900:	42a0      	cmp	r0, r4
 8004902:	d20f      	bcs.n	8004924 <_realloc_r+0x48>
 8004904:	4621      	mov	r1, r4
 8004906:	4638      	mov	r0, r7
 8004908:	f7ff ff8e 	bl	8004828 <_malloc_r>
 800490c:	4605      	mov	r5, r0
 800490e:	2800      	cmp	r0, #0
 8004910:	d0f2      	beq.n	80048f8 <_realloc_r+0x1c>
 8004912:	4631      	mov	r1, r6
 8004914:	4622      	mov	r2, r4
 8004916:	f7ff ff13 	bl	8004740 <memcpy>
 800491a:	4631      	mov	r1, r6
 800491c:	4638      	mov	r0, r7
 800491e:	f7ff ff37 	bl	8004790 <_free_r>
 8004922:	e7e9      	b.n	80048f8 <_realloc_r+0x1c>
 8004924:	4635      	mov	r5, r6
 8004926:	e7e7      	b.n	80048f8 <_realloc_r+0x1c>

08004928 <_sbrk_r>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	2300      	movs	r3, #0
 800492c:	4d05      	ldr	r5, [pc, #20]	; (8004944 <_sbrk_r+0x1c>)
 800492e:	4604      	mov	r4, r0
 8004930:	4608      	mov	r0, r1
 8004932:	602b      	str	r3, [r5, #0]
 8004934:	f7fc fef0 	bl	8001718 <_sbrk>
 8004938:	1c43      	adds	r3, r0, #1
 800493a:	d102      	bne.n	8004942 <_sbrk_r+0x1a>
 800493c:	682b      	ldr	r3, [r5, #0]
 800493e:	b103      	cbz	r3, 8004942 <_sbrk_r+0x1a>
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	bd38      	pop	{r3, r4, r5, pc}
 8004944:	20000278 	.word	0x20000278

08004948 <__malloc_lock>:
 8004948:	4801      	ldr	r0, [pc, #4]	; (8004950 <__malloc_lock+0x8>)
 800494a:	f000 b811 	b.w	8004970 <__retarget_lock_acquire_recursive>
 800494e:	bf00      	nop
 8004950:	20000280 	.word	0x20000280

08004954 <__malloc_unlock>:
 8004954:	4801      	ldr	r0, [pc, #4]	; (800495c <__malloc_unlock+0x8>)
 8004956:	f000 b80c 	b.w	8004972 <__retarget_lock_release_recursive>
 800495a:	bf00      	nop
 800495c:	20000280 	.word	0x20000280

08004960 <_malloc_usable_size_r>:
 8004960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004964:	1f18      	subs	r0, r3, #4
 8004966:	2b00      	cmp	r3, #0
 8004968:	bfbc      	itt	lt
 800496a:	580b      	ldrlt	r3, [r1, r0]
 800496c:	18c0      	addlt	r0, r0, r3
 800496e:	4770      	bx	lr

08004970 <__retarget_lock_acquire_recursive>:
 8004970:	4770      	bx	lr

08004972 <__retarget_lock_release_recursive>:
 8004972:	4770      	bx	lr

08004974 <_init>:
 8004974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004976:	bf00      	nop
 8004978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800497a:	bc08      	pop	{r3}
 800497c:	469e      	mov	lr, r3
 800497e:	4770      	bx	lr

08004980 <_fini>:
 8004980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004982:	bf00      	nop
 8004984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004986:	bc08      	pop	{r3}
 8004988:	469e      	mov	lr, r3
 800498a:	4770      	bx	lr
