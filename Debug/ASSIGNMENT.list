
ASSIGNMENT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004808  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08004914  08004914  00014914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a7c  08004a7c  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  08004a7c  08004a7c  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a7c  08004a7c  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a7c  08004a7c  00014a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a80  08004a80  00014a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08004a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  200000c4  08004b48  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08004b48  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010722  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000264a  00000000  00000000  0003080f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  00032e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  00033c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189c3  00000000  00000000  00034970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101c5  00000000  00000000  0004d333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b327  00000000  00000000  0005d4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e881f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b14  00000000  00000000  000e8874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c4 	.word	0x200000c4
 8000128:	00000000 	.word	0x00000000
 800012c:	080048fc 	.word	0x080048fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c8 	.word	0x200000c8
 8000148:	080048fc 	.word	0x080048fc

0800014c <sendDATA>:

#include "UART.h"
#include "main.h"
#include "global.h"
#include "stdio.h"
void sendDATA(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(status1 == RED1 && status2 == GREEN2){
 8000150:	4b32      	ldr	r3, [pc, #200]	; (800021c <sendDATA+0xd0>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b06      	cmp	r3, #6
 8000156:	d114      	bne.n	8000182 <sendDATA+0x36>
 8000158:	4b31      	ldr	r3, [pc, #196]	; (8000220 <sendDATA+0xd4>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	2b0a      	cmp	r3, #10
 800015e:	d110      	bne.n	8000182 <sendDATA+0x36>
		HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!RED1: %d  	GREEN2: %d#\r\n", count1, count2), 1000);
 8000160:	4b30      	ldr	r3, [pc, #192]	; (8000224 <sendDATA+0xd8>)
 8000162:	681a      	ldr	r2, [r3, #0]
 8000164:	4b30      	ldr	r3, [pc, #192]	; (8000228 <sendDATA+0xdc>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	4930      	ldr	r1, [pc, #192]	; (800022c <sendDATA+0xe0>)
 800016a:	4831      	ldr	r0, [pc, #196]	; (8000230 <sendDATA+0xe4>)
 800016c:	f003 ff8c 	bl	8004088 <siprintf>
 8000170:	4603      	mov	r3, r0
 8000172:	b29a      	uxth	r2, r3
 8000174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000178:	492d      	ldr	r1, [pc, #180]	; (8000230 <sendDATA+0xe4>)
 800017a:	482e      	ldr	r0, [pc, #184]	; (8000234 <sendDATA+0xe8>)
 800017c:	f003 fac7 	bl	800370e <HAL_UART_Transmit>
 8000180:	e04a      	b.n	8000218 <sendDATA+0xcc>
	}
	else if(status1 == RED1 && status2 == YELLOW2){
 8000182:	4b26      	ldr	r3, [pc, #152]	; (800021c <sendDATA+0xd0>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	2b06      	cmp	r3, #6
 8000188:	d114      	bne.n	80001b4 <sendDATA+0x68>
 800018a:	4b25      	ldr	r3, [pc, #148]	; (8000220 <sendDATA+0xd4>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b0b      	cmp	r3, #11
 8000190:	d110      	bne.n	80001b4 <sendDATA+0x68>
		HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!RED1: %d  	YELLOW2:%d#\r\n", count1, count2), 1000);
 8000192:	4b24      	ldr	r3, [pc, #144]	; (8000224 <sendDATA+0xd8>)
 8000194:	681a      	ldr	r2, [r3, #0]
 8000196:	4b24      	ldr	r3, [pc, #144]	; (8000228 <sendDATA+0xdc>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	4927      	ldr	r1, [pc, #156]	; (8000238 <sendDATA+0xec>)
 800019c:	4824      	ldr	r0, [pc, #144]	; (8000230 <sendDATA+0xe4>)
 800019e:	f003 ff73 	bl	8004088 <siprintf>
 80001a2:	4603      	mov	r3, r0
 80001a4:	b29a      	uxth	r2, r3
 80001a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001aa:	4921      	ldr	r1, [pc, #132]	; (8000230 <sendDATA+0xe4>)
 80001ac:	4821      	ldr	r0, [pc, #132]	; (8000234 <sendDATA+0xe8>)
 80001ae:	f003 faae 	bl	800370e <HAL_UART_Transmit>
 80001b2:	e031      	b.n	8000218 <sendDATA+0xcc>
	}
	else if(status1 == RED2 && status2 == GREEN1){
 80001b4:	4b19      	ldr	r3, [pc, #100]	; (800021c <sendDATA+0xd0>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	2b09      	cmp	r3, #9
 80001ba:	d114      	bne.n	80001e6 <sendDATA+0x9a>
 80001bc:	4b18      	ldr	r3, [pc, #96]	; (8000220 <sendDATA+0xd4>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b07      	cmp	r3, #7
 80001c2:	d110      	bne.n	80001e6 <sendDATA+0x9a>
		HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!GREEN1: %d  	RED2:%d#\r\n", count1, count2), 1000);
 80001c4:	4b17      	ldr	r3, [pc, #92]	; (8000224 <sendDATA+0xd8>)
 80001c6:	681a      	ldr	r2, [r3, #0]
 80001c8:	4b17      	ldr	r3, [pc, #92]	; (8000228 <sendDATA+0xdc>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	491b      	ldr	r1, [pc, #108]	; (800023c <sendDATA+0xf0>)
 80001ce:	4818      	ldr	r0, [pc, #96]	; (8000230 <sendDATA+0xe4>)
 80001d0:	f003 ff5a 	bl	8004088 <siprintf>
 80001d4:	4603      	mov	r3, r0
 80001d6:	b29a      	uxth	r2, r3
 80001d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001dc:	4914      	ldr	r1, [pc, #80]	; (8000230 <sendDATA+0xe4>)
 80001de:	4815      	ldr	r0, [pc, #84]	; (8000234 <sendDATA+0xe8>)
 80001e0:	f003 fa95 	bl	800370e <HAL_UART_Transmit>
 80001e4:	e018      	b.n	8000218 <sendDATA+0xcc>
	}
	else if(status1 == RED2 && status2 == YELLOW1){
 80001e6:	4b0d      	ldr	r3, [pc, #52]	; (800021c <sendDATA+0xd0>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2b09      	cmp	r3, #9
 80001ec:	d114      	bne.n	8000218 <sendDATA+0xcc>
 80001ee:	4b0c      	ldr	r3, [pc, #48]	; (8000220 <sendDATA+0xd4>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	2b08      	cmp	r3, #8
 80001f4:	d110      	bne.n	8000218 <sendDATA+0xcc>
		HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!YELLOW1: %d  	RED2:%d#\r\n", count1, count2), 1000);
 80001f6:	4b0b      	ldr	r3, [pc, #44]	; (8000224 <sendDATA+0xd8>)
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	4b0b      	ldr	r3, [pc, #44]	; (8000228 <sendDATA+0xdc>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4910      	ldr	r1, [pc, #64]	; (8000240 <sendDATA+0xf4>)
 8000200:	480b      	ldr	r0, [pc, #44]	; (8000230 <sendDATA+0xe4>)
 8000202:	f003 ff41 	bl	8004088 <siprintf>
 8000206:	4603      	mov	r3, r0
 8000208:	b29a      	uxth	r2, r3
 800020a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020e:	4908      	ldr	r1, [pc, #32]	; (8000230 <sendDATA+0xe4>)
 8000210:	4808      	ldr	r0, [pc, #32]	; (8000234 <sendDATA+0xe8>)
 8000212:	f003 fa7c 	bl	800370e <HAL_UART_Transmit>
	}
}
 8000216:	e7ff      	b.n	8000218 <sendDATA+0xcc>
 8000218:	bf00      	nop
 800021a:	bd80      	pop	{r7, pc}
 800021c:	20000178 	.word	0x20000178
 8000220:	2000013c 	.word	0x2000013c
 8000224:	20000114 	.word	0x20000114
 8000228:	20000118 	.word	0x20000118
 800022c:	08004914 	.word	0x08004914
 8000230:	20000140 	.word	0x20000140
 8000234:	2000022c 	.word	0x2000022c
 8000238:	08004930 	.word	0x08004930
 800023c:	0800494c 	.word	0x0800494c
 8000240:	08004968 	.word	0x08004968

08000244 <sendDATA_Manual>:
void sendDATA_Manual(){
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	if(status == MANUAL_MODE){
 8000248:	4b24      	ldr	r3, [pc, #144]	; (80002dc <sendDATA_Manual+0x98>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2bfc      	cmp	r3, #252	; 0xfc
 800024e:	d142      	bne.n	80002d6 <sendDATA_Manual+0x92>
		if(status_manual == MANUAL_1){
 8000250:	4b23      	ldr	r3, [pc, #140]	; (80002e0 <sendDATA_Manual+0x9c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2b0c      	cmp	r3, #12
 8000256:	d10c      	bne.n	8000272 <sendDATA_Manual+0x2e>
			HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!P1:RED		P2:YELLOW#\r\n"), 1000);
 8000258:	4922      	ldr	r1, [pc, #136]	; (80002e4 <sendDATA_Manual+0xa0>)
 800025a:	4823      	ldr	r0, [pc, #140]	; (80002e8 <sendDATA_Manual+0xa4>)
 800025c:	f003 ff14 	bl	8004088 <siprintf>
 8000260:	4603      	mov	r3, r0
 8000262:	b29a      	uxth	r2, r3
 8000264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000268:	491f      	ldr	r1, [pc, #124]	; (80002e8 <sendDATA_Manual+0xa4>)
 800026a:	4820      	ldr	r0, [pc, #128]	; (80002ec <sendDATA_Manual+0xa8>)
 800026c:	f003 fa4f 	bl	800370e <HAL_UART_Transmit>
		}
		else if(status_manual == MANUAL_4){
			HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!P1:GREEN		P2:RED#\r\n"), 1000);
		}
	}
}
 8000270:	e031      	b.n	80002d6 <sendDATA_Manual+0x92>
		else if(status_manual == MANUAL_2){
 8000272:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <sendDATA_Manual+0x9c>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b0d      	cmp	r3, #13
 8000278:	d10c      	bne.n	8000294 <sendDATA_Manual+0x50>
			HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!P1:RED		P2:GREEN#\r\n"), 1000);
 800027a:	491d      	ldr	r1, [pc, #116]	; (80002f0 <sendDATA_Manual+0xac>)
 800027c:	481a      	ldr	r0, [pc, #104]	; (80002e8 <sendDATA_Manual+0xa4>)
 800027e:	f003 ff03 	bl	8004088 <siprintf>
 8000282:	4603      	mov	r3, r0
 8000284:	b29a      	uxth	r2, r3
 8000286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800028a:	4917      	ldr	r1, [pc, #92]	; (80002e8 <sendDATA_Manual+0xa4>)
 800028c:	4817      	ldr	r0, [pc, #92]	; (80002ec <sendDATA_Manual+0xa8>)
 800028e:	f003 fa3e 	bl	800370e <HAL_UART_Transmit>
}
 8000292:	e020      	b.n	80002d6 <sendDATA_Manual+0x92>
		else if(status_manual == MANUAL_3){
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <sendDATA_Manual+0x9c>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2b0e      	cmp	r3, #14
 800029a:	d10c      	bne.n	80002b6 <sendDATA_Manual+0x72>
			HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!P1:YELLOW		P2:RED#\r\n"), 1000);
 800029c:	4915      	ldr	r1, [pc, #84]	; (80002f4 <sendDATA_Manual+0xb0>)
 800029e:	4812      	ldr	r0, [pc, #72]	; (80002e8 <sendDATA_Manual+0xa4>)
 80002a0:	f003 fef2 	bl	8004088 <siprintf>
 80002a4:	4603      	mov	r3, r0
 80002a6:	b29a      	uxth	r2, r3
 80002a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ac:	490e      	ldr	r1, [pc, #56]	; (80002e8 <sendDATA_Manual+0xa4>)
 80002ae:	480f      	ldr	r0, [pc, #60]	; (80002ec <sendDATA_Manual+0xa8>)
 80002b0:	f003 fa2d 	bl	800370e <HAL_UART_Transmit>
}
 80002b4:	e00f      	b.n	80002d6 <sendDATA_Manual+0x92>
		else if(status_manual == MANUAL_4){
 80002b6:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <sendDATA_Manual+0x9c>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	2b12      	cmp	r3, #18
 80002bc:	d10b      	bne.n	80002d6 <sendDATA_Manual+0x92>
			HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!P1:GREEN		P2:RED#\r\n"), 1000);
 80002be:	490e      	ldr	r1, [pc, #56]	; (80002f8 <sendDATA_Manual+0xb4>)
 80002c0:	4809      	ldr	r0, [pc, #36]	; (80002e8 <sendDATA_Manual+0xa4>)
 80002c2:	f003 fee1 	bl	8004088 <siprintf>
 80002c6:	4603      	mov	r3, r0
 80002c8:	b29a      	uxth	r2, r3
 80002ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ce:	4906      	ldr	r1, [pc, #24]	; (80002e8 <sendDATA_Manual+0xa4>)
 80002d0:	4806      	ldr	r0, [pc, #24]	; (80002ec <sendDATA_Manual+0xa8>)
 80002d2:	f003 fa1c 	bl	800370e <HAL_UART_Transmit>
}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20000000 	.word	0x20000000
 80002e0:	20000188 	.word	0x20000188
 80002e4:	08004984 	.word	0x08004984
 80002e8:	20000140 	.word	0x20000140
 80002ec:	2000022c 	.word	0x2000022c
 80002f0:	0800499c 	.word	0x0800499c
 80002f4:	080049b4 	.word	0x080049b4
 80002f8:	080049cc 	.word	0x080049cc

080002fc <sendVALUE_SETTING>:
void sendVALUE_SETTING(){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	if(status == TUNING_MODE){
 8000300:	4b24      	ldr	r3, [pc, #144]	; (8000394 <sendVALUE_SETTING+0x98>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2bfd      	cmp	r3, #253	; 0xfd
 8000306:	d143      	bne.n	8000390 <sendVALUE_SETTING+0x94>
		if(status_tuning == TUNING_RED_MODE){
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <sendVALUE_SETTING+0x9c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2b0f      	cmp	r3, #15
 800030e:	d112      	bne.n	8000336 <sendVALUE_SETTING+0x3a>
			HAL_UART_Transmit(&huart2, (void *)buffer_TX, sprintf (buffer_TX,"!TIME RED: %d#\r\n", time_red+counter), 1000);
 8000310:	4b22      	ldr	r3, [pc, #136]	; (800039c <sendVALUE_SETTING+0xa0>)
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	4b22      	ldr	r3, [pc, #136]	; (80003a0 <sendVALUE_SETTING+0xa4>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4413      	add	r3, r2
 800031a:	461a      	mov	r2, r3
 800031c:	4921      	ldr	r1, [pc, #132]	; (80003a4 <sendVALUE_SETTING+0xa8>)
 800031e:	4822      	ldr	r0, [pc, #136]	; (80003a8 <sendVALUE_SETTING+0xac>)
 8000320:	f003 feb2 	bl	8004088 <siprintf>
 8000324:	4603      	mov	r3, r0
 8000326:	b29a      	uxth	r2, r3
 8000328:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800032c:	491e      	ldr	r1, [pc, #120]	; (80003a8 <sendVALUE_SETTING+0xac>)
 800032e:	481f      	ldr	r0, [pc, #124]	; (80003ac <sendVALUE_SETTING+0xb0>)
 8000330:	f003 f9ed 	bl	800370e <HAL_UART_Transmit>
		}
		else if(status_tuning == TUNING_GREEN_MODE){
			HAL_UART_Transmit(&huart2, (void *)buffer_TX, sprintf (buffer_TX,"!TIME GREEN: %d#\r\n", time_green+counter), 1000);
		}
	}
}
 8000334:	e02c      	b.n	8000390 <sendVALUE_SETTING+0x94>
		else if(status_tuning == TUNING_YELLOW_MODE){
 8000336:	4b18      	ldr	r3, [pc, #96]	; (8000398 <sendVALUE_SETTING+0x9c>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b10      	cmp	r3, #16
 800033c:	d112      	bne.n	8000364 <sendVALUE_SETTING+0x68>
			HAL_UART_Transmit(&huart2, (void *)buffer_TX, sprintf (buffer_TX,"!TIME YELLOW: %d#\r\n", time_yellow+counter), 1000);
 800033e:	4b1c      	ldr	r3, [pc, #112]	; (80003b0 <sendVALUE_SETTING+0xb4>)
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <sendVALUE_SETTING+0xa4>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4413      	add	r3, r2
 8000348:	461a      	mov	r2, r3
 800034a:	491a      	ldr	r1, [pc, #104]	; (80003b4 <sendVALUE_SETTING+0xb8>)
 800034c:	4816      	ldr	r0, [pc, #88]	; (80003a8 <sendVALUE_SETTING+0xac>)
 800034e:	f003 fe9b 	bl	8004088 <siprintf>
 8000352:	4603      	mov	r3, r0
 8000354:	b29a      	uxth	r2, r3
 8000356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800035a:	4913      	ldr	r1, [pc, #76]	; (80003a8 <sendVALUE_SETTING+0xac>)
 800035c:	4813      	ldr	r0, [pc, #76]	; (80003ac <sendVALUE_SETTING+0xb0>)
 800035e:	f003 f9d6 	bl	800370e <HAL_UART_Transmit>
}
 8000362:	e015      	b.n	8000390 <sendVALUE_SETTING+0x94>
		else if(status_tuning == TUNING_GREEN_MODE){
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <sendVALUE_SETTING+0x9c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b11      	cmp	r3, #17
 800036a:	d111      	bne.n	8000390 <sendVALUE_SETTING+0x94>
			HAL_UART_Transmit(&huart2, (void *)buffer_TX, sprintf (buffer_TX,"!TIME GREEN: %d#\r\n", time_green+counter), 1000);
 800036c:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <sendVALUE_SETTING+0xbc>)
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <sendVALUE_SETTING+0xa4>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4413      	add	r3, r2
 8000376:	461a      	mov	r2, r3
 8000378:	4910      	ldr	r1, [pc, #64]	; (80003bc <sendVALUE_SETTING+0xc0>)
 800037a:	480b      	ldr	r0, [pc, #44]	; (80003a8 <sendVALUE_SETTING+0xac>)
 800037c:	f003 fe84 	bl	8004088 <siprintf>
 8000380:	4603      	mov	r3, r0
 8000382:	b29a      	uxth	r2, r3
 8000384:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000388:	4907      	ldr	r1, [pc, #28]	; (80003a8 <sendVALUE_SETTING+0xac>)
 800038a:	4808      	ldr	r0, [pc, #32]	; (80003ac <sendVALUE_SETTING+0xb0>)
 800038c:	f003 f9bf 	bl	800370e <HAL_UART_Transmit>
}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000000 	.word	0x20000000
 8000398:	20000184 	.word	0x20000184
 800039c:	2000004c 	.word	0x2000004c
 80003a0:	2000017c 	.word	0x2000017c
 80003a4:	080049e4 	.word	0x080049e4
 80003a8:	20000140 	.word	0x20000140
 80003ac:	2000022c 	.word	0x2000022c
 80003b0:	20000050 	.word	0x20000050
 80003b4:	080049f8 	.word	0x080049f8
 80003b8:	20000054 	.word	0x20000054
 80003bc:	08004a0c 	.word	0x08004a0c

080003c0 <fsm_automatic_run>:
 */

#include "fsm_automatic.h"
#include "global.h"

void fsm_automatic_run(){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	sendDATA();
 80003c4:	f7ff fec2 	bl	800014c <sendDATA>
	switch (status1) {
 80003c8:	4b4a      	ldr	r3, [pc, #296]	; (80004f4 <fsm_automatic_run+0x134>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b08      	cmp	r3, #8
 80003ce:	d01a      	beq.n	8000406 <fsm_automatic_run+0x46>
 80003d0:	2b08      	cmp	r3, #8
 80003d2:	dc3f      	bgt.n	8000454 <fsm_automatic_run+0x94>
 80003d4:	2b06      	cmp	r3, #6
 80003d6:	d002      	beq.n	80003de <fsm_automatic_run+0x1e>
 80003d8:	2b07      	cmp	r3, #7
 80003da:	d028      	beq.n	800042e <fsm_automatic_run+0x6e>
				status1 = YELLOW1;
				turnOffAllLed1();
			}
			sendDATA();
		default:
			break;
 80003dc:	e03a      	b.n	8000454 <fsm_automatic_run+0x94>
			turnOnRedLed1();
 80003de:	f000 fe49 	bl	8001074 <turnOnRedLed1>
			turnOnPesGreenLed();
 80003e2:	f000 fee9 	bl	80011b8 <turnOnPesGreenLed>
			if(count1 <= 0){
 80003e6:	4b44      	ldr	r3, [pc, #272]	; (80004f8 <fsm_automatic_run+0x138>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	dc08      	bgt.n	8000400 <fsm_automatic_run+0x40>
				count1 = time_green;
 80003ee:	4b43      	ldr	r3, [pc, #268]	; (80004fc <fsm_automatic_run+0x13c>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a41      	ldr	r2, [pc, #260]	; (80004f8 <fsm_automatic_run+0x138>)
 80003f4:	6013      	str	r3, [r2, #0]
				status1 = GREEN1;
 80003f6:	4b3f      	ldr	r3, [pc, #252]	; (80004f4 <fsm_automatic_run+0x134>)
 80003f8:	2207      	movs	r2, #7
 80003fa:	601a      	str	r2, [r3, #0]
				turnOffAllLed1();
 80003fc:	f000 fe76 	bl	80010ec <turnOffAllLed1>
			sendDATA();
 8000400:	f7ff fea4 	bl	800014c <sendDATA>
			break;
 8000404:	e027      	b.n	8000456 <fsm_automatic_run+0x96>
			turnOnYellowLed1();
 8000406:	f000 fe49 	bl	800109c <turnOnYellowLed1>
			turnOffAllPesLed();
 800040a:	f000 fee7 	bl	80011dc <turnOffAllPesLed>
			if(count1 <= 0){
 800040e:	4b3a      	ldr	r3, [pc, #232]	; (80004f8 <fsm_automatic_run+0x138>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2b00      	cmp	r3, #0
 8000414:	dc08      	bgt.n	8000428 <fsm_automatic_run+0x68>
				count1 = time_red;
 8000416:	4b3a      	ldr	r3, [pc, #232]	; (8000500 <fsm_automatic_run+0x140>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a37      	ldr	r2, [pc, #220]	; (80004f8 <fsm_automatic_run+0x138>)
 800041c:	6013      	str	r3, [r2, #0]
				status1 = RED1;
 800041e:	4b35      	ldr	r3, [pc, #212]	; (80004f4 <fsm_automatic_run+0x134>)
 8000420:	2206      	movs	r2, #6
 8000422:	601a      	str	r2, [r3, #0]
				turnOffAllLed1();
 8000424:	f000 fe62 	bl	80010ec <turnOffAllLed1>
			sendDATA();
 8000428:	f7ff fe90 	bl	800014c <sendDATA>
			break;
 800042c:	e013      	b.n	8000456 <fsm_automatic_run+0x96>
			turnOnGreenLed1();
 800042e:	f000 fe49 	bl	80010c4 <turnOnGreenLed1>
			turnOnPesRedLed();
 8000432:	f000 feaf 	bl	8001194 <turnOnPesRedLed>
			if(count1 <= 0){
 8000436:	4b30      	ldr	r3, [pc, #192]	; (80004f8 <fsm_automatic_run+0x138>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	2b00      	cmp	r3, #0
 800043c:	dc08      	bgt.n	8000450 <fsm_automatic_run+0x90>
				count1 = time_yellow;
 800043e:	4b31      	ldr	r3, [pc, #196]	; (8000504 <fsm_automatic_run+0x144>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a2d      	ldr	r2, [pc, #180]	; (80004f8 <fsm_automatic_run+0x138>)
 8000444:	6013      	str	r3, [r2, #0]
				status1 = YELLOW1;
 8000446:	4b2b      	ldr	r3, [pc, #172]	; (80004f4 <fsm_automatic_run+0x134>)
 8000448:	2208      	movs	r2, #8
 800044a:	601a      	str	r2, [r3, #0]
				turnOffAllLed1();
 800044c:	f000 fe4e 	bl	80010ec <turnOffAllLed1>
			sendDATA();
 8000450:	f7ff fe7c 	bl	800014c <sendDATA>
			break;
 8000454:	bf00      	nop
	}
	switch (status2) {
 8000456:	4b2c      	ldr	r3, [pc, #176]	; (8000508 <fsm_automatic_run+0x148>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	2b0b      	cmp	r3, #11
 800045c:	d016      	beq.n	800048c <fsm_automatic_run+0xcc>
 800045e:	2b0b      	cmp	r3, #11
 8000460:	dc34      	bgt.n	80004cc <fsm_automatic_run+0x10c>
 8000462:	2b09      	cmp	r3, #9
 8000464:	d002      	beq.n	800046c <fsm_automatic_run+0xac>
 8000466:	2b0a      	cmp	r3, #10
 8000468:	d020      	beq.n	80004ac <fsm_automatic_run+0xec>
				status2 = YELLOW2;
				turnOffAllLed2();
			}
			break;
		default:
			break;
 800046a:	e02f      	b.n	80004cc <fsm_automatic_run+0x10c>
			turnOnGreenLed2();
 800046c:	f000 fe72 	bl	8001154 <turnOnGreenLed2>
			if(count2 <= 0){
 8000470:	4b26      	ldr	r3, [pc, #152]	; (800050c <fsm_automatic_run+0x14c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	dc2b      	bgt.n	80004d0 <fsm_automatic_run+0x110>
				count2 = time_green;
 8000478:	4b20      	ldr	r3, [pc, #128]	; (80004fc <fsm_automatic_run+0x13c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a23      	ldr	r2, [pc, #140]	; (800050c <fsm_automatic_run+0x14c>)
 800047e:	6013      	str	r3, [r2, #0]
				status2 = GREEN2;
 8000480:	4b21      	ldr	r3, [pc, #132]	; (8000508 <fsm_automatic_run+0x148>)
 8000482:	220a      	movs	r2, #10
 8000484:	601a      	str	r2, [r3, #0]
				turnOffAllLed2();
 8000486:	f000 fe75 	bl	8001174 <turnOffAllLed2>
			break;
 800048a:	e021      	b.n	80004d0 <fsm_automatic_run+0x110>
			turnOnYellowLed2();
 800048c:	f000 fe52 	bl	8001134 <turnOnYellowLed2>
			if(count2 <= 0){
 8000490:	4b1e      	ldr	r3, [pc, #120]	; (800050c <fsm_automatic_run+0x14c>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	dc1d      	bgt.n	80004d4 <fsm_automatic_run+0x114>
				count2 = time_red;
 8000498:	4b19      	ldr	r3, [pc, #100]	; (8000500 <fsm_automatic_run+0x140>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a1b      	ldr	r2, [pc, #108]	; (800050c <fsm_automatic_run+0x14c>)
 800049e:	6013      	str	r3, [r2, #0]
				status2 = RED2;
 80004a0:	4b19      	ldr	r3, [pc, #100]	; (8000508 <fsm_automatic_run+0x148>)
 80004a2:	2209      	movs	r2, #9
 80004a4:	601a      	str	r2, [r3, #0]
				turnOffAllLed2();
 80004a6:	f000 fe65 	bl	8001174 <turnOffAllLed2>
			break;
 80004aa:	e013      	b.n	80004d4 <fsm_automatic_run+0x114>
			turnOnGreenLed2();
 80004ac:	f000 fe52 	bl	8001154 <turnOnGreenLed2>
			if(count2 <= 0){
 80004b0:	4b16      	ldr	r3, [pc, #88]	; (800050c <fsm_automatic_run+0x14c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	dc0f      	bgt.n	80004d8 <fsm_automatic_run+0x118>
				count2 = time_yellow;
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <fsm_automatic_run+0x144>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a13      	ldr	r2, [pc, #76]	; (800050c <fsm_automatic_run+0x14c>)
 80004be:	6013      	str	r3, [r2, #0]
				status2 = YELLOW2;
 80004c0:	4b11      	ldr	r3, [pc, #68]	; (8000508 <fsm_automatic_run+0x148>)
 80004c2:	220b      	movs	r2, #11
 80004c4:	601a      	str	r2, [r3, #0]
				turnOffAllLed2();
 80004c6:	f000 fe55 	bl	8001174 <turnOffAllLed2>
			break;
 80004ca:	e005      	b.n	80004d8 <fsm_automatic_run+0x118>
			break;
 80004cc:	bf00      	nop
 80004ce:	e004      	b.n	80004da <fsm_automatic_run+0x11a>
			break;
 80004d0:	bf00      	nop
 80004d2:	e002      	b.n	80004da <fsm_automatic_run+0x11a>
			break;
 80004d4:	bf00      	nop
 80004d6:	e000      	b.n	80004da <fsm_automatic_run+0x11a>
			break;
 80004d8:	bf00      	nop
	}
	count1--;
 80004da:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <fsm_automatic_run+0x138>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	3b01      	subs	r3, #1
 80004e0:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <fsm_automatic_run+0x138>)
 80004e2:	6013      	str	r3, [r2, #0]
	count2--;
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <fsm_automatic_run+0x14c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	3b01      	subs	r3, #1
 80004ea:	4a08      	ldr	r2, [pc, #32]	; (800050c <fsm_automatic_run+0x14c>)
 80004ec:	6013      	str	r3, [r2, #0]
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000178 	.word	0x20000178
 80004f8:	20000114 	.word	0x20000114
 80004fc:	20000054 	.word	0x20000054
 8000500:	2000004c 	.word	0x2000004c
 8000504:	20000050 	.word	0x20000050
 8000508:	2000013c 	.word	0x2000013c
 800050c:	20000118 	.word	0x20000118

08000510 <fsm_manual_run>:

#include "fsm_manual.h"
#include "global.h"
#include "traffic.h"

void fsm_manual_run(){
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	if(timer3_flag){
 8000514:	4b55      	ldr	r3, [pc, #340]	; (800066c <fsm_manual_run+0x15c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <fsm_manual_run+0x10>
		sendDATA_Manual();
 800051c:	f7ff fe92 	bl	8000244 <sendDATA_Manual>
	}
	switch (status_manual) {
 8000520:	4b53      	ldr	r3, [pc, #332]	; (8000670 <fsm_manual_run+0x160>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	3b0c      	subs	r3, #12
 8000526:	2b07      	cmp	r3, #7
 8000528:	f200 8087 	bhi.w	800063a <fsm_manual_run+0x12a>
 800052c:	a201      	add	r2, pc, #4	; (adr r2, 8000534 <fsm_manual_run+0x24>)
 800052e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000532:	bf00      	nop
 8000534:	080005b3 	.word	0x080005b3
 8000538:	080005d5 	.word	0x080005d5
 800053c:	080005f7 	.word	0x080005f7
 8000540:	0800063b 	.word	0x0800063b
 8000544:	0800063b 	.word	0x0800063b
 8000548:	0800063b 	.word	0x0800063b
 800054c:	08000619 	.word	0x08000619
 8000550:	08000555 	.word	0x08000555
		case MANUAL_0:
			if(status1 == RED1 && status2 == GREEN2){
 8000554:	4b47      	ldr	r3, [pc, #284]	; (8000674 <fsm_manual_run+0x164>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2b06      	cmp	r3, #6
 800055a:	d107      	bne.n	800056c <fsm_manual_run+0x5c>
 800055c:	4b46      	ldr	r3, [pc, #280]	; (8000678 <fsm_manual_run+0x168>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b0a      	cmp	r3, #10
 8000562:	d103      	bne.n	800056c <fsm_manual_run+0x5c>
				status_manual = MANUAL_2;
 8000564:	4b42      	ldr	r3, [pc, #264]	; (8000670 <fsm_manual_run+0x160>)
 8000566:	220d      	movs	r2, #13
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	e022      	b.n	80005b2 <fsm_manual_run+0xa2>
			}
			else if(status1 == RED1 && status2 == YELLOW2){
 800056c:	4b41      	ldr	r3, [pc, #260]	; (8000674 <fsm_manual_run+0x164>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b06      	cmp	r3, #6
 8000572:	d107      	bne.n	8000584 <fsm_manual_run+0x74>
 8000574:	4b40      	ldr	r3, [pc, #256]	; (8000678 <fsm_manual_run+0x168>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b0b      	cmp	r3, #11
 800057a:	d103      	bne.n	8000584 <fsm_manual_run+0x74>
				status_manual = MANUAL_1;
 800057c:	4b3c      	ldr	r3, [pc, #240]	; (8000670 <fsm_manual_run+0x160>)
 800057e:	220c      	movs	r2, #12
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	e016      	b.n	80005b2 <fsm_manual_run+0xa2>
			}
			else if(status1 == RED2 && status2 == GREEN1){
 8000584:	4b3b      	ldr	r3, [pc, #236]	; (8000674 <fsm_manual_run+0x164>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b09      	cmp	r3, #9
 800058a:	d107      	bne.n	800059c <fsm_manual_run+0x8c>
 800058c:	4b3a      	ldr	r3, [pc, #232]	; (8000678 <fsm_manual_run+0x168>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b07      	cmp	r3, #7
 8000592:	d103      	bne.n	800059c <fsm_manual_run+0x8c>
				status_manual = MANUAL_4;
 8000594:	4b36      	ldr	r3, [pc, #216]	; (8000670 <fsm_manual_run+0x160>)
 8000596:	2212      	movs	r2, #18
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	e00a      	b.n	80005b2 <fsm_manual_run+0xa2>
			}
			else if(status1 == RED2 && status2 == YELLOW1){
 800059c:	4b35      	ldr	r3, [pc, #212]	; (8000674 <fsm_manual_run+0x164>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b09      	cmp	r3, #9
 80005a2:	d106      	bne.n	80005b2 <fsm_manual_run+0xa2>
 80005a4:	4b34      	ldr	r3, [pc, #208]	; (8000678 <fsm_manual_run+0x168>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b08      	cmp	r3, #8
 80005aa:	d102      	bne.n	80005b2 <fsm_manual_run+0xa2>
				status_manual = MANUAL_3;
 80005ac:	4b30      	ldr	r3, [pc, #192]	; (8000670 <fsm_manual_run+0x160>)
 80005ae:	220e      	movs	r2, #14
 80005b0:	601a      	str	r2, [r3, #0]
			}
		case MANUAL_1:
			turnOnRedLed1();
 80005b2:	f000 fd5f 	bl	8001074 <turnOnRedLed1>
			turnOnYellowLed2();
 80005b6:	f000 fdbd 	bl	8001134 <turnOnYellowLed2>
			turnOnPesGreenLed();
 80005ba:	f000 fdfd 	bl	80011b8 <turnOnPesGreenLed>
			if(Button2IsPressed()){
 80005be:	f000 fd41 	bl	8001044 <Button2IsPressed>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d03a      	beq.n	800063e <fsm_manual_run+0x12e>
				status_manual = MANUAL_2;
 80005c8:	4b29      	ldr	r3, [pc, #164]	; (8000670 <fsm_manual_run+0x160>)
 80005ca:	220d      	movs	r2, #13
 80005cc:	601a      	str	r2, [r3, #0]
				turnOffAllLed();
 80005ce:	f000 fe17 	bl	8001200 <turnOffAllLed>
			}
			break;
 80005d2:	e034      	b.n	800063e <fsm_manual_run+0x12e>
		case MANUAL_2:
			turnOnRedLed1();
 80005d4:	f000 fd4e 	bl	8001074 <turnOnRedLed1>
			turnOnGreenLed2();
 80005d8:	f000 fdbc 	bl	8001154 <turnOnGreenLed2>
			turnOnPesGreenLed();
 80005dc:	f000 fdec 	bl	80011b8 <turnOnPesGreenLed>
			if(Button2IsPressed()){
 80005e0:	f000 fd30 	bl	8001044 <Button2IsPressed>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d02b      	beq.n	8000642 <fsm_manual_run+0x132>
				status_manual = MANUAL_3;
 80005ea:	4b21      	ldr	r3, [pc, #132]	; (8000670 <fsm_manual_run+0x160>)
 80005ec:	220e      	movs	r2, #14
 80005ee:	601a      	str	r2, [r3, #0]
				turnOffAllLed();
 80005f0:	f000 fe06 	bl	8001200 <turnOffAllLed>
			}
			break;
 80005f4:	e025      	b.n	8000642 <fsm_manual_run+0x132>
		case MANUAL_3:
			turnOnRedLed2();
 80005f6:	f000 fd8d 	bl	8001114 <turnOnRedLed2>
			turnOnYellowLed1();
 80005fa:	f000 fd4f 	bl	800109c <turnOnYellowLed1>
			turnOnPesRedLed();
 80005fe:	f000 fdc9 	bl	8001194 <turnOnPesRedLed>
			if(Button2IsPressed()){
 8000602:	f000 fd1f 	bl	8001044 <Button2IsPressed>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d01c      	beq.n	8000646 <fsm_manual_run+0x136>
				status_manual = MANUAL_4;
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <fsm_manual_run+0x160>)
 800060e:	2212      	movs	r2, #18
 8000610:	601a      	str	r2, [r3, #0]
				turnOffAllLed();
 8000612:	f000 fdf5 	bl	8001200 <turnOffAllLed>
			}
			break;
 8000616:	e016      	b.n	8000646 <fsm_manual_run+0x136>
		case MANUAL_4:
			turnOnRedLed2();
 8000618:	f000 fd7c 	bl	8001114 <turnOnRedLed2>
			turnOnGreenLed1();
 800061c:	f000 fd52 	bl	80010c4 <turnOnGreenLed1>
			turnOnPesRedLed();
 8000620:	f000 fdb8 	bl	8001194 <turnOnPesRedLed>
			if(Button2IsPressed()){
 8000624:	f000 fd0e 	bl	8001044 <Button2IsPressed>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d00d      	beq.n	800064a <fsm_manual_run+0x13a>
				status_manual = MANUAL_1;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <fsm_manual_run+0x160>)
 8000630:	220c      	movs	r2, #12
 8000632:	601a      	str	r2, [r3, #0]
				turnOffAllLed();
 8000634:	f000 fde4 	bl	8001200 <turnOffAllLed>
			}
			break;
 8000638:	e007      	b.n	800064a <fsm_manual_run+0x13a>
		default:
			break;
 800063a:	bf00      	nop
 800063c:	e006      	b.n	800064c <fsm_manual_run+0x13c>
			break;
 800063e:	bf00      	nop
 8000640:	e004      	b.n	800064c <fsm_manual_run+0x13c>
			break;
 8000642:	bf00      	nop
 8000644:	e002      	b.n	800064c <fsm_manual_run+0x13c>
			break;
 8000646:	bf00      	nop
 8000648:	e000      	b.n	800064c <fsm_manual_run+0x13c>
			break;
 800064a:	bf00      	nop
	}
	if(Button3IsPressed()){
 800064c:	f000 fd02 	bl	8001054 <Button3IsPressed>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d007      	beq.n	8000666 <fsm_manual_run+0x156>
		status = AUTOMATIC_MODE;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <fsm_manual_run+0x16c>)
 8000658:	22fe      	movs	r2, #254	; 0xfe
 800065a:	601a      	str	r2, [r3, #0]
		turnOffAllLed();
 800065c:	f000 fdd0 	bl	8001200 <turnOffAllLed>
		setTimer2(100);
 8000660:	2064      	movs	r0, #100	; 0x64
 8000662:	f000 fe55 	bl	8001310 <setTimer2>
	}
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000100 	.word	0x20000100
 8000670:	20000188 	.word	0x20000188
 8000674:	20000178 	.word	0x20000178
 8000678:	2000013c 	.word	0x2000013c
 800067c:	20000000 	.word	0x20000000

08000680 <RunSystem>:
#include "fsm_tuning.h"
#include "pedestrian.h"
#include "reading_button.h"
#include "main.h"

void RunSystem(){
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	switch (status) {
 8000684:	4b42      	ldr	r3, [pc, #264]	; (8000790 <RunSystem+0x110>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	3bfb      	subs	r3, #251	; 0xfb
 800068a:	2b04      	cmp	r3, #4
 800068c:	d874      	bhi.n	8000778 <RunSystem+0xf8>
 800068e:	a201      	add	r2, pc, #4	; (adr r2, 8000694 <RunSystem+0x14>)
 8000690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000694:	08000763 	.word	0x08000763
 8000698:	08000729 	.word	0x08000729
 800069c:	08000749 	.word	0x08000749
 80006a0:	080006bb 	.word	0x080006bb
 80006a4:	080006a9 	.word	0x080006a9
		case INIT:
			init_traffic_light();
 80006a8:	f001 f834 	bl	8001714 <init_traffic_light>
			status = AUTOMATIC_MODE;
 80006ac:	4b38      	ldr	r3, [pc, #224]	; (8000790 <RunSystem+0x110>)
 80006ae:	22fe      	movs	r2, #254	; 0xfe
 80006b0:	601a      	str	r2, [r3, #0]
			setTimer2(100);
 80006b2:	2064      	movs	r0, #100	; 0x64
 80006b4:	f000 fe2c 	bl	8001310 <setTimer2>
			break;
 80006b8:	e067      	b.n	800078a <RunSystem+0x10a>
		case AUTOMATIC_MODE:
			if(timer2_flag){
 80006ba:	4b36      	ldr	r3, [pc, #216]	; (8000794 <RunSystem+0x114>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d005      	beq.n	80006ce <RunSystem+0x4e>
				fsm_automatic_run();
 80006c2:	f7ff fe7d 	bl	80003c0 <fsm_automatic_run>
				setTimer2(1000);
 80006c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ca:	f000 fe21 	bl	8001310 <setTimer2>
			}
			if(Button1IsPressed()){
 80006ce:	f000 fcb1 	bl	8001034 <Button1IsPressed>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d00a      	beq.n	80006ee <RunSystem+0x6e>
				status = MANUAL_MODE;
 80006d8:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <RunSystem+0x110>)
 80006da:	22fc      	movs	r2, #252	; 0xfc
 80006dc:	601a      	str	r2, [r3, #0]
				status_manual = MANUAL_0;
 80006de:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <RunSystem+0x118>)
 80006e0:	2213      	movs	r2, #19
 80006e2:	601a      	str	r2, [r3, #0]
				setTimer3(100);
 80006e4:	2064      	movs	r0, #100	; 0x64
 80006e6:	f000 fe2d 	bl	8001344 <setTimer3>
				turnOffAllLed();
 80006ea:	f000 fd89 	bl	8001200 <turnOffAllLed>
			}
			if(PesButtonIsPressed() && status1 == GREEN1 && status2 == RED2){
 80006ee:	f000 fcb9 	bl	8001064 <PesButtonIsPressed>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d041      	beq.n	800077c <RunSystem+0xfc>
 80006f8:	4b28      	ldr	r3, [pc, #160]	; (800079c <RunSystem+0x11c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b07      	cmp	r3, #7
 80006fe:	d13d      	bne.n	800077c <RunSystem+0xfc>
 8000700:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <RunSystem+0x120>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b09      	cmp	r3, #9
 8000706:	d139      	bne.n	800077c <RunSystem+0xfc>
				count1 = time_yellow;
 8000708:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <RunSystem+0x124>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a26      	ldr	r2, [pc, #152]	; (80007a8 <RunSystem+0x128>)
 800070e:	6013      	str	r3, [r2, #0]
				status1 = YELLOW1;
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <RunSystem+0x11c>)
 8000712:	2208      	movs	r2, #8
 8000714:	601a      	str	r2, [r3, #0]
				status = PEDES_MODE;
 8000716:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <RunSystem+0x110>)
 8000718:	22fb      	movs	r2, #251	; 0xfb
 800071a:	601a      	str	r2, [r3, #0]
				setTimer2(100);
 800071c:	2064      	movs	r0, #100	; 0x64
 800071e:	f000 fdf7 	bl	8001310 <setTimer2>
				turnOffAllLed1();
 8000722:	f000 fce3 	bl	80010ec <turnOffAllLed1>
			}
			break;
 8000726:	e029      	b.n	800077c <RunSystem+0xfc>
		case MANUAL_MODE:
			fsm_manual_run();
 8000728:	f7ff fef2 	bl	8000510 <fsm_manual_run>
			if(Button1IsPressed()){
 800072c:	f000 fc82 	bl	8001034 <Button1IsPressed>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d024      	beq.n	8000780 <RunSystem+0x100>
				status = TUNING_MODE;
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <RunSystem+0x110>)
 8000738:	22fd      	movs	r2, #253	; 0xfd
 800073a:	601a      	str	r2, [r3, #0]
				setTimer3(100);
 800073c:	2064      	movs	r0, #100	; 0x64
 800073e:	f000 fe01 	bl	8001344 <setTimer3>
				turnOffAllLed();
 8000742:	f000 fd5d 	bl	8001200 <turnOffAllLed>
			}
			break;
 8000746:	e01b      	b.n	8000780 <RunSystem+0x100>
		case TUNING_MODE:
			fsm_tuning_run();
 8000748:	f000 f830 	bl	80007ac <fsm_tuning_run>
			if(Button1IsPressed()){
 800074c:	f000 fc72 	bl	8001034 <Button1IsPressed>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d016      	beq.n	8000784 <RunSystem+0x104>
				status = AUTOMATIC_MODE;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <RunSystem+0x110>)
 8000758:	22fe      	movs	r2, #254	; 0xfe
 800075a:	601a      	str	r2, [r3, #0]
				turnOffAllLed();
 800075c:	f000 fd50 	bl	8001200 <turnOffAllLed>
			}
			break;
 8000760:	e010      	b.n	8000784 <RunSystem+0x104>
		case PEDES_MODE:
			if(timer2_flag){
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <RunSystem+0x114>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d00e      	beq.n	8000788 <RunSystem+0x108>
				pedestrian_run();
 800076a:	f000 fafb 	bl	8000d64 <pedestrian_run>
				setTimer2(1000);
 800076e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000772:	f000 fdcd 	bl	8001310 <setTimer2>
			}
			break;
 8000776:	e007      	b.n	8000788 <RunSystem+0x108>
		default:
			break;
 8000778:	bf00      	nop
 800077a:	e006      	b.n	800078a <RunSystem+0x10a>
			break;
 800077c:	bf00      	nop
 800077e:	e004      	b.n	800078a <RunSystem+0x10a>
			break;
 8000780:	bf00      	nop
 8000782:	e002      	b.n	800078a <RunSystem+0x10a>
			break;
 8000784:	bf00      	nop
 8000786:	e000      	b.n	800078a <RunSystem+0x10a>
			break;
 8000788:	bf00      	nop
	}
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000000 	.word	0x20000000
 8000794:	200000f8 	.word	0x200000f8
 8000798:	20000188 	.word	0x20000188
 800079c:	20000178 	.word	0x20000178
 80007a0:	2000013c 	.word	0x2000013c
 80007a4:	20000050 	.word	0x20000050
 80007a8:	20000114 	.word	0x20000114

080007ac <fsm_tuning_run>:

#include "global.h"
#include "traffic.h"
#include "fsm_tuning.h"

void fsm_tuning_run(){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	switch (status_tuning) {
 80007b0:	4b60      	ldr	r3, [pc, #384]	; (8000934 <fsm_tuning_run+0x188>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b11      	cmp	r3, #17
 80007b6:	d07a      	beq.n	80008ae <fsm_tuning_run+0x102>
 80007b8:	2b11      	cmp	r3, #17
 80007ba:	f300 80b1 	bgt.w	8000920 <fsm_tuning_run+0x174>
 80007be:	2b0f      	cmp	r3, #15
 80007c0:	d002      	beq.n	80007c8 <fsm_tuning_run+0x1c>
 80007c2:	2b10      	cmp	r3, #16
 80007c4:	d03a      	beq.n	800083c <fsm_tuning_run+0x90>
				counter = 0;
				status = AUTOMATIC_MODE;
			}
			break;
		default:
			break;
 80007c6:	e0ab      	b.n	8000920 <fsm_tuning_run+0x174>
			if(Button2IsPressed()){
 80007c8:	f000 fc3c 	bl	8001044 <Button2IsPressed>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d006      	beq.n	80007e0 <fsm_tuning_run+0x34>
				counter++;
 80007d2:	4b59      	ldr	r3, [pc, #356]	; (8000938 <fsm_tuning_run+0x18c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3301      	adds	r3, #1
 80007d8:	4a57      	ldr	r2, [pc, #348]	; (8000938 <fsm_tuning_run+0x18c>)
 80007da:	6013      	str	r3, [r2, #0]
				sendVALUE_SETTING();
 80007dc:	f7ff fd8e 	bl	80002fc <sendVALUE_SETTING>
			if(timer3_flag){
 80007e0:	4b56      	ldr	r3, [pc, #344]	; (800093c <fsm_tuning_run+0x190>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d005      	beq.n	80007f4 <fsm_tuning_run+0x48>
				BlinkyAllRedLed();
 80007e8:	f000 fd26 	bl	8001238 <BlinkyAllRedLed>
				setTimer3(500);
 80007ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f0:	f000 fda8 	bl	8001344 <setTimer3>
			if(Button1IsPressed()){
 80007f4:	f000 fc1e 	bl	8001034 <Button1IsPressed>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d00a      	beq.n	8000814 <fsm_tuning_run+0x68>
				status = TUNING_YELLOW_MODE;
 80007fe:	4b50      	ldr	r3, [pc, #320]	; (8000940 <fsm_tuning_run+0x194>)
 8000800:	2210      	movs	r2, #16
 8000802:	601a      	str	r2, [r3, #0]
				counter = 0;
 8000804:	4b4c      	ldr	r3, [pc, #304]	; (8000938 <fsm_tuning_run+0x18c>)
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
				setTimer3(100);
 800080a:	2064      	movs	r0, #100	; 0x64
 800080c:	f000 fd9a 	bl	8001344 <setTimer3>
				turnOffAllLed();
 8000810:	f000 fcf6 	bl	8001200 <turnOffAllLed>
			if(Button3IsPressed()){
 8000814:	f000 fc1e 	bl	8001054 <Button3IsPressed>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	f000 8082 	beq.w	8000924 <fsm_tuning_run+0x178>
				time_red += counter;
 8000820:	4b48      	ldr	r3, [pc, #288]	; (8000944 <fsm_tuning_run+0x198>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b44      	ldr	r3, [pc, #272]	; (8000938 <fsm_tuning_run+0x18c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4413      	add	r3, r2
 800082a:	4a46      	ldr	r2, [pc, #280]	; (8000944 <fsm_tuning_run+0x198>)
 800082c:	6013      	str	r3, [r2, #0]
				counter = 0;
 800082e:	4b42      	ldr	r3, [pc, #264]	; (8000938 <fsm_tuning_run+0x18c>)
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
				status = AUTOMATIC_MODE;
 8000834:	4b42      	ldr	r3, [pc, #264]	; (8000940 <fsm_tuning_run+0x194>)
 8000836:	22fe      	movs	r2, #254	; 0xfe
 8000838:	601a      	str	r2, [r3, #0]
			break;
 800083a:	e073      	b.n	8000924 <fsm_tuning_run+0x178>
			if(Button2IsPressed()){
 800083c:	f000 fc02 	bl	8001044 <Button2IsPressed>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d006      	beq.n	8000854 <fsm_tuning_run+0xa8>
				counter++;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <fsm_tuning_run+0x18c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	3301      	adds	r3, #1
 800084c:	4a3a      	ldr	r2, [pc, #232]	; (8000938 <fsm_tuning_run+0x18c>)
 800084e:	6013      	str	r3, [r2, #0]
				sendVALUE_SETTING();
 8000850:	f7ff fd54 	bl	80002fc <sendVALUE_SETTING>
			if(timer3_flag){
 8000854:	4b39      	ldr	r3, [pc, #228]	; (800093c <fsm_tuning_run+0x190>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d005      	beq.n	8000868 <fsm_tuning_run+0xbc>
				BlinkyAllYellowLed();
 800085c:	f000 fd08 	bl	8001270 <BlinkyAllYellowLed>
				setTimer3(500);
 8000860:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000864:	f000 fd6e 	bl	8001344 <setTimer3>
			if(Button1IsPressed()){
 8000868:	f000 fbe4 	bl	8001034 <Button1IsPressed>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d00a      	beq.n	8000888 <fsm_tuning_run+0xdc>
				status = TUNING_GREEN_MODE;
 8000872:	4b33      	ldr	r3, [pc, #204]	; (8000940 <fsm_tuning_run+0x194>)
 8000874:	2211      	movs	r2, #17
 8000876:	601a      	str	r2, [r3, #0]
				counter = 0;
 8000878:	4b2f      	ldr	r3, [pc, #188]	; (8000938 <fsm_tuning_run+0x18c>)
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
				setTimer3(100);
 800087e:	2064      	movs	r0, #100	; 0x64
 8000880:	f000 fd60 	bl	8001344 <setTimer3>
				turnOffAllLed();
 8000884:	f000 fcbc 	bl	8001200 <turnOffAllLed>
			if(Button3IsPressed()){
 8000888:	f000 fbe4 	bl	8001054 <Button3IsPressed>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d04a      	beq.n	8000928 <fsm_tuning_run+0x17c>
				time_yellow += counter;
 8000892:	4b2d      	ldr	r3, [pc, #180]	; (8000948 <fsm_tuning_run+0x19c>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	4b28      	ldr	r3, [pc, #160]	; (8000938 <fsm_tuning_run+0x18c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4a2a      	ldr	r2, [pc, #168]	; (8000948 <fsm_tuning_run+0x19c>)
 800089e:	6013      	str	r3, [r2, #0]
				counter = 0;
 80008a0:	4b25      	ldr	r3, [pc, #148]	; (8000938 <fsm_tuning_run+0x18c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
				status = AUTOMATIC_MODE;
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <fsm_tuning_run+0x194>)
 80008a8:	22fe      	movs	r2, #254	; 0xfe
 80008aa:	601a      	str	r2, [r3, #0]
			break;
 80008ac:	e03c      	b.n	8000928 <fsm_tuning_run+0x17c>
			if(Button2IsPressed()){
 80008ae:	f000 fbc9 	bl	8001044 <Button2IsPressed>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d006      	beq.n	80008c6 <fsm_tuning_run+0x11a>
				counter++;
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <fsm_tuning_run+0x18c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	3301      	adds	r3, #1
 80008be:	4a1e      	ldr	r2, [pc, #120]	; (8000938 <fsm_tuning_run+0x18c>)
 80008c0:	6013      	str	r3, [r2, #0]
				sendVALUE_SETTING();
 80008c2:	f7ff fd1b 	bl	80002fc <sendVALUE_SETTING>
			if(timer3_flag){
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <fsm_tuning_run+0x190>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d005      	beq.n	80008da <fsm_tuning_run+0x12e>
				BlinkyAllGreenLed();
 80008ce:	f000 fce9 	bl	80012a4 <BlinkyAllGreenLed>
				setTimer3(500);
 80008d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008d6:	f000 fd35 	bl	8001344 <setTimer3>
			if(Button1IsPressed()){
 80008da:	f000 fbab 	bl	8001034 <Button1IsPressed>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d00a      	beq.n	80008fa <fsm_tuning_run+0x14e>
				status = TUNING_RED_MODE;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <fsm_tuning_run+0x194>)
 80008e6:	220f      	movs	r2, #15
 80008e8:	601a      	str	r2, [r3, #0]
				counter = 0;
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <fsm_tuning_run+0x18c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
				setTimer3(100);
 80008f0:	2064      	movs	r0, #100	; 0x64
 80008f2:	f000 fd27 	bl	8001344 <setTimer3>
				turnOffAllLed();
 80008f6:	f000 fc83 	bl	8001200 <turnOffAllLed>
			if(Button3IsPressed()){
 80008fa:	f000 fbab 	bl	8001054 <Button3IsPressed>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d013      	beq.n	800092c <fsm_tuning_run+0x180>
				time_green += counter;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <fsm_tuning_run+0x1a0>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <fsm_tuning_run+0x18c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4413      	add	r3, r2
 800090e:	4a0f      	ldr	r2, [pc, #60]	; (800094c <fsm_tuning_run+0x1a0>)
 8000910:	6013      	str	r3, [r2, #0]
				counter = 0;
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <fsm_tuning_run+0x18c>)
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
				status = AUTOMATIC_MODE;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <fsm_tuning_run+0x194>)
 800091a:	22fe      	movs	r2, #254	; 0xfe
 800091c:	601a      	str	r2, [r3, #0]
			break;
 800091e:	e005      	b.n	800092c <fsm_tuning_run+0x180>
			break;
 8000920:	bf00      	nop
 8000922:	e004      	b.n	800092e <fsm_tuning_run+0x182>
			break;
 8000924:	bf00      	nop
 8000926:	e002      	b.n	800092e <fsm_tuning_run+0x182>
			break;
 8000928:	bf00      	nop
 800092a:	e000      	b.n	800092e <fsm_tuning_run+0x182>
			break;
 800092c:	bf00      	nop
	}
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000184 	.word	0x20000184
 8000938:	2000017c 	.word	0x2000017c
 800093c:	20000100 	.word	0x20000100
 8000940:	20000000 	.word	0x20000000
 8000944:	2000004c 	.word	0x2000004c
 8000948:	20000050 	.word	0x20000050
 800094c:	20000054 	.word	0x20000054

08000950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000954:	f000 ff2a 	bl	80017ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000958:	f000 f83a 	bl	80009d0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095c:	f000 f966 	bl	8000c2c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000960:	f000 f878 	bl	8000a54 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000964:	f000 f8c2 	bl	8000aec <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000968:	f000 f936 	bl	8000bd8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  status = INIT;
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <main+0x6c>)
 800096e:	22ff      	movs	r2, #255	; 0xff
 8000970:	601a      	str	r2, [r3, #0]

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000972:	2100      	movs	r1, #0
 8000974:	4812      	ldr	r0, [pc, #72]	; (80009c0 <main+0x70>)
 8000976:	f002 f819 	bl	80029ac <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800097a:	4812      	ldr	r0, [pc, #72]	; (80009c4 <main+0x74>)
 800097c:	f001 ff6c 	bl	8002858 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(500);
 8000980:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000984:	f000 fcaa 	bl	80012dc <setTimer1>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  RunSystem();
 8000988:	f7ff fe7a 	bl	8000680 <RunSystem>
	  if(status == PEDES_MODE && timer3_flag){
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <main+0x6c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2bfb      	cmp	r3, #251	; 0xfb
 8000992:	d1f9      	bne.n	8000988 <main+0x38>
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <main+0x78>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d0f5      	beq.n	8000988 <main+0x38>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, count_ped_buzzer);
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <main+0x7c>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <main+0x70>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	635a      	str	r2, [r3, #52]	; 0x34
		  count_ped_buzzer++;
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <main+0x7c>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	3301      	adds	r3, #1
 80009ac:	4a07      	ldr	r2, [pc, #28]	; (80009cc <main+0x7c>)
 80009ae:	6013      	str	r3, [r2, #0]
		  BlinkyPesGreenLed();
 80009b0:	f000 fc30 	bl	8001214 <BlinkyPesGreenLed>
		  setTimer3(250);
 80009b4:	20fa      	movs	r0, #250	; 0xfa
 80009b6:	f000 fcc5 	bl	8001344 <setTimer3>
	  RunSystem();
 80009ba:	e7e5      	b.n	8000988 <main+0x38>
 80009bc:	20000000 	.word	0x20000000
 80009c0:	2000019c 	.word	0x2000019c
 80009c4:	200001e4 	.word	0x200001e4
 80009c8:	20000100 	.word	0x20000100
 80009cc:	2000011c 	.word	0x2000011c

080009d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b090      	sub	sp, #64	; 0x40
 80009d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d6:	f107 0318 	add.w	r3, r7, #24
 80009da:	2228      	movs	r2, #40	; 0x28
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f003 fb4a 	bl	8004078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f6:	2301      	movs	r3, #1
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009fa:	2310      	movs	r3, #16
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fe:	2302      	movs	r3, #2
 8000a00:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a02:	2300      	movs	r3, #0
 8000a04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a06:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0c:	f107 0318 	add.w	r3, r7, #24
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 fab7 	bl	8001f84 <HAL_RCC_OscConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a1c:	f000 f99c 	bl	8000d58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a20:	230f      	movs	r3, #15
 8000a22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a24:	2302      	movs	r3, #2
 8000a26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2102      	movs	r1, #2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 fd22 	bl	8002484 <HAL_RCC_ClockConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000a46:	f000 f987 	bl	8000d58 <Error_Handler>
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3740      	adds	r7, #64	; 0x40
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a5a:	f107 0308 	add.w	r3, r7, #8
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a70:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000a72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000a7a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000a7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000a88:	2209      	movs	r2, #9
 8000a8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a98:	4813      	ldr	r0, [pc, #76]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000a9a:	f001 fe8d 	bl	80027b8 <HAL_TIM_Base_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000aa4:	f000 f958 	bl	8000d58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000ab6:	f002 f9e1 	bl	8002e7c <HAL_TIM_ConfigClockSource>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ac0:	f000 f94a 	bl	8000d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000acc:	463b      	mov	r3, r7
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_TIM2_Init+0x94>)
 8000ad2:	f002 fd5f 	bl	8003594 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000adc:	f000 f93c 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200001e4 	.word	0x200001e4

08000aec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	; 0x38
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b00:	f107 0320 	add.w	r3, r7, #32
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
 8000b18:	615a      	str	r2, [r3, #20]
 8000b1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b1c:	4b2c      	ldr	r3, [pc, #176]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b1e:	4a2d      	ldr	r2, [pc, #180]	; (8000bd4 <MX_TIM3_Init+0xe8>)
 8000b20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000b22:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b24:	223f      	movs	r2, #63	; 0x3f
 8000b26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000b2e:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b36:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b3c:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b3e:	2280      	movs	r2, #128	; 0x80
 8000b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b42:	4823      	ldr	r0, [pc, #140]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b44:	f001 fe38 	bl	80027b8 <HAL_TIM_Base_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b4e:	f000 f903 	bl	8000d58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481c      	ldr	r0, [pc, #112]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b60:	f002 f98c 	bl	8002e7c <HAL_TIM_ConfigClockSource>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b6a:	f000 f8f5 	bl	8000d58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b6e:	4818      	ldr	r0, [pc, #96]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b70:	f001 fec4 	bl	80028fc <HAL_TIM_PWM_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b7a:	f000 f8ed 	bl	8000d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b86:	f107 0320 	add.w	r3, r7, #32
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4810      	ldr	r0, [pc, #64]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000b8e:	f002 fd01 	bl	8003594 <HAL_TIMEx_MasterConfigSynchronization>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b98:	f000 f8de 	bl	8000d58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b9c:	2360      	movs	r3, #96	; 0x60
 8000b9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2200      	movs	r2, #0
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4807      	ldr	r0, [pc, #28]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000bb4:	f002 f8a4 	bl	8002d00 <HAL_TIM_PWM_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000bbe:	f000 f8cb 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bc2:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <MX_TIM3_Init+0xe4>)
 8000bc4:	f000 fca0 	bl	8001508 <HAL_TIM_MspPostInit>

}
 8000bc8:	bf00      	nop
 8000bca:	3738      	adds	r7, #56	; 0x38
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	2000019c 	.word	0x2000019c
 8000bd4:	40000400 	.word	0x40000400

08000bd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <MX_USART2_UART_Init+0x50>)
 8000be0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000be4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000be8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000c10:	f002 fd30 	bl	8003674 <HAL_UART_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c1a:	f000 f89d 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000022c 	.word	0x2000022c
 8000c28:	40004400 	.word	0x40004400

08000c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c40:	4b3c      	ldr	r3, [pc, #240]	; (8000d34 <MX_GPIO_Init+0x108>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	4a3b      	ldr	r2, [pc, #236]	; (8000d34 <MX_GPIO_Init+0x108>)
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	6193      	str	r3, [r2, #24]
 8000c4c:	4b39      	ldr	r3, [pc, #228]	; (8000d34 <MX_GPIO_Init+0x108>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c58:	4b36      	ldr	r3, [pc, #216]	; (8000d34 <MX_GPIO_Init+0x108>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a35      	ldr	r2, [pc, #212]	; (8000d34 <MX_GPIO_Init+0x108>)
 8000c5e:	f043 0308 	orr.w	r3, r3, #8
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b33      	ldr	r3, [pc, #204]	; (8000d34 <MX_GPIO_Init+0x108>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f003 0308 	and.w	r3, r3, #8
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PES_BUTTON_Pin|LED_Pin|TL1_A_Pin, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	f240 4121 	movw	r1, #1057	; 0x421
 8000c76:	4830      	ldr	r0, [pc, #192]	; (8000d38 <MX_GPIO_Init+0x10c>)
 8000c78:	f001 f953 	bl	8001f22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PL_A_Pin|TL1_B_Pin|TL2_B_Pin|TL2_A_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000c82:	482e      	ldr	r0, [pc, #184]	; (8000d3c <MX_GPIO_Init+0x110>)
 8000c84:	f001 f94d 	bl	8001f22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PES_BUTTON_Pin */
  GPIO_InitStruct.Pin = PES_BUTTON_Pin;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2302      	movs	r3, #2
 8000c96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PES_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4826      	ldr	r0, [pc, #152]	; (8000d38 <MX_GPIO_Init+0x10c>)
 8000ca0:	f000 ffa4 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin;
 8000ca4:	2312      	movs	r3, #18
 8000ca6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4820      	ldr	r0, [pc, #128]	; (8000d38 <MX_GPIO_Init+0x10c>)
 8000cb8:	f000 ff98 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin TL1_A_Pin */
  GPIO_InitStruct.Pin = LED_Pin|TL1_A_Pin;
 8000cbc:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000cc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4818      	ldr	r0, [pc, #96]	; (8000d38 <MX_GPIO_Init+0x10c>)
 8000cd6:	f000 ff89 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	4619      	mov	r1, r3
 8000cec:	4813      	ldr	r0, [pc, #76]	; (8000d3c <MX_GPIO_Init+0x110>)
 8000cee:	f000 ff7d 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PL_A_Pin TL1_B_Pin TL2_B_Pin TL2_A_Pin */
  GPIO_InitStruct.Pin = PL_A_Pin|TL1_B_Pin|TL2_B_Pin|TL2_A_Pin;
 8000cf2:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000cf6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2302      	movs	r3, #2
 8000d02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d04:	f107 0308 	add.w	r3, r7, #8
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480c      	ldr	r0, [pc, #48]	; (8000d3c <MX_GPIO_Init+0x110>)
 8000d0c:	f000 ff6e 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PL_B_Pin */
  GPIO_InitStruct.Pin = PL_B_Pin;
 8000d10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(PL_B_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	4619      	mov	r1, r3
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MX_GPIO_Init+0x10c>)
 8000d26:	f000 ff61 	bl	8001bec <HAL_GPIO_Init>

}
 8000d2a:	bf00      	nop
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40010800 	.word	0x40010800
 8000d3c:	40010c00 	.word	0x40010c00

08000d40 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	timerRun();
 8000d48:	f000 fb16 	bl	8001378 <timerRun>
	ReadingButton();
 8000d4c:	f000 f87c 	bl	8000e48 <ReadingButton>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <Error_Handler+0x8>
	...

08000d64 <pedestrian_run>:
 */

#include "global.h"
#include "pedestrian.h"

void pedestrian_run(){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	if(status == PEDES_MODE){
 8000d68:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <pedestrian_run+0xc4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2bfb      	cmp	r3, #251	; 0xfb
 8000d6e:	d159      	bne.n	8000e24 <pedestrian_run+0xc0>
		sendDATA();
 8000d70:	f7ff f9ec 	bl	800014c <sendDATA>
		switch (status1) {
 8000d74:	4b2d      	ldr	r3, [pc, #180]	; (8000e2c <pedestrian_run+0xc8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b06      	cmp	r3, #6
 8000d7a:	d01d      	beq.n	8000db8 <pedestrian_run+0x54>
 8000d7c:	2b08      	cmp	r3, #8
 8000d7e:	d149      	bne.n	8000e14 <pedestrian_run+0xb0>
			case YELLOW1:
				if(count1 == 0){
 8000d80:	4b2b      	ldr	r3, [pc, #172]	; (8000e30 <pedestrian_run+0xcc>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d10c      	bne.n	8000da2 <pedestrian_run+0x3e>
					status1 = RED1;
 8000d88:	4b28      	ldr	r3, [pc, #160]	; (8000e2c <pedestrian_run+0xc8>)
 8000d8a:	2206      	movs	r2, #6
 8000d8c:	601a      	str	r2, [r3, #0]
					status2 = GREEN2;
 8000d8e:	4b29      	ldr	r3, [pc, #164]	; (8000e34 <pedestrian_run+0xd0>)
 8000d90:	220a      	movs	r2, #10
 8000d92:	601a      	str	r2, [r3, #0]
					turnOnPesGreenLed();
 8000d94:	f000 fa10 	bl	80011b8 <turnOnPesGreenLed>
					count1 = time_red;
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <pedestrian_run+0xd4>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a24      	ldr	r2, [pc, #144]	; (8000e30 <pedestrian_run+0xcc>)
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	e003      	b.n	8000daa <pedestrian_run+0x46>
				}
				else{
					turnOnYellowLed1();
 8000da2:	f000 f97b 	bl	800109c <turnOnYellowLed1>
					turnOnPesRedLed();
 8000da6:	f000 f9f5 	bl	8001194 <turnOnPesRedLed>
				}
				if(status2 != RED2){
 8000daa:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <pedestrian_run+0xd0>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b09      	cmp	r3, #9
 8000db0:	d032      	beq.n	8000e18 <pedestrian_run+0xb4>
					turnOnGreenLed2();
 8000db2:	f000 f9cf 	bl	8001154 <turnOnGreenLed2>
				}
				break;
 8000db6:	e02f      	b.n	8000e18 <pedestrian_run+0xb4>
			case RED1:
				if(count1 > time_yellow){
 8000db8:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <pedestrian_run+0xcc>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <pedestrian_run+0xd8>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dd03      	ble.n	8000dcc <pedestrian_run+0x68>
					turnOnRedLed1();
 8000dc4:	f000 f956 	bl	8001074 <turnOnRedLed1>
					turnOnGreenLed2();
 8000dc8:	f000 f9c4 	bl	8001154 <turnOnGreenLed2>
				}
				if(count1 == time_yellow){
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <pedestrian_run+0xcc>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <pedestrian_run+0xd8>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d106      	bne.n	8000de6 <pedestrian_run+0x82>
					setTimer3(100);
 8000dd8:	2064      	movs	r0, #100	; 0x64
 8000dda:	f000 fab3 	bl	8001344 <setTimer3>
					turnOnRedLed1();
 8000dde:	f000 f949 	bl	8001074 <turnOnRedLed1>
					turnOnYellowLed2();
 8000de2:	f000 f9a7 	bl	8001134 <turnOnYellowLed2>
				}
				if(count1 <= 0){
 8000de6:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <pedestrian_run+0xcc>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	dc12      	bgt.n	8000e14 <pedestrian_run+0xb0>
					turnOnPesRedLed();
 8000dee:	f000 f9d1 	bl	8001194 <turnOnPesRedLed>
					status1 = GREEN1;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <pedestrian_run+0xc8>)
 8000df4:	2207      	movs	r2, #7
 8000df6:	601a      	str	r2, [r3, #0]
					status2 = RED2;
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <pedestrian_run+0xd0>)
 8000dfa:	2209      	movs	r2, #9
 8000dfc:	601a      	str	r2, [r3, #0]
					count1 = time_green;
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <pedestrian_run+0xdc>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <pedestrian_run+0xcc>)
 8000e04:	6013      	str	r3, [r2, #0]
					count2 = time_red;
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <pedestrian_run+0xd4>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <pedestrian_run+0xe0>)
 8000e0c:	6013      	str	r3, [r2, #0]
					status = AUTOMATIC_MODE;
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <pedestrian_run+0xc4>)
 8000e10:	22fe      	movs	r2, #254	; 0xfe
 8000e12:	601a      	str	r2, [r3, #0]
				}
			default:
				break;
 8000e14:	bf00      	nop
 8000e16:	e000      	b.n	8000e1a <pedestrian_run+0xb6>
				break;
 8000e18:	bf00      	nop
		}
		count1--;
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <pedestrian_run+0xcc>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	4a03      	ldr	r2, [pc, #12]	; (8000e30 <pedestrian_run+0xcc>)
 8000e22:	6013      	str	r3, [r2, #0]
	}
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000178 	.word	0x20000178
 8000e30:	20000114 	.word	0x20000114
 8000e34:	2000013c 	.word	0x2000013c
 8000e38:	2000004c 	.word	0x2000004c
 8000e3c:	20000050 	.word	0x20000050
 8000e40:	20000054 	.word	0x20000054
 8000e44:	20000118 	.word	0x20000118

08000e48 <ReadingButton>:
int KeyReg2[NUM_OF_BUTTON] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int button_flag[NUM_OF_BUTTON] = {0,0,0,0};
int buttonBuffer[NUM_OF_BUTTON] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

void ReadingButton(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_OF_BUTTON; i++){
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	e0b6      	b.n	8000fc2 <ReadingButton+0x17a>
		  KeyReg2[i] = KeyReg1[i];
 8000e54:	4a5f      	ldr	r2, [pc, #380]	; (8000fd4 <ReadingButton+0x18c>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e5c:	495e      	ldr	r1, [pc, #376]	; (8000fd8 <ReadingButton+0x190>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  KeyReg1[i] = KeyReg0[i];
 8000e64:	4a5d      	ldr	r2, [pc, #372]	; (8000fdc <ReadingButton+0x194>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e6c:	4959      	ldr	r1, [pc, #356]	; (8000fd4 <ReadingButton+0x18c>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	d836      	bhi.n	8000ee8 <ReadingButton+0xa0>
 8000e7a:	a201      	add	r2, pc, #4	; (adr r2, 8000e80 <ReadingButton+0x38>)
 8000e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e80:	08000e91 	.word	0x08000e91
 8000e84:	08000ea7 	.word	0x08000ea7
 8000e88:	08000ebd 	.word	0x08000ebd
 8000e8c:	08000ed3 	.word	0x08000ed3
		  switch (i) {
			case 0:
				  KeyReg0[i] = HAL_GPIO_ReadPin(PORTA, BUTTON1_Pin);
 8000e90:	2102      	movs	r1, #2
 8000e92:	4853      	ldr	r0, [pc, #332]	; (8000fe0 <ReadingButton+0x198>)
 8000e94:	f001 f82e 	bl	8001ef4 <HAL_GPIO_ReadPin>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4a4f      	ldr	r2, [pc, #316]	; (8000fdc <ReadingButton+0x194>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000ea4:	e021      	b.n	8000eea <ReadingButton+0xa2>
			case 1:
				  KeyReg0[i] = HAL_GPIO_ReadPin(PORTA, BUTTON2_Pin);
 8000ea6:	2110      	movs	r1, #16
 8000ea8:	484d      	ldr	r0, [pc, #308]	; (8000fe0 <ReadingButton+0x198>)
 8000eaa:	f001 f823 	bl	8001ef4 <HAL_GPIO_ReadPin>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4a4a      	ldr	r2, [pc, #296]	; (8000fdc <ReadingButton+0x194>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000eba:	e016      	b.n	8000eea <ReadingButton+0xa2>
			case 2:
				  KeyReg0[i] = HAL_GPIO_ReadPin(PORTB, BUTTON3_Pin);
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	4849      	ldr	r0, [pc, #292]	; (8000fe4 <ReadingButton+0x19c>)
 8000ec0:	f001 f818 	bl	8001ef4 <HAL_GPIO_ReadPin>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4a44      	ldr	r2, [pc, #272]	; (8000fdc <ReadingButton+0x194>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000ed0:	e00b      	b.n	8000eea <ReadingButton+0xa2>
			case 3:
				  KeyReg0[i] = HAL_GPIO_ReadPin(PORTA, PES_BUTTON_Pin);
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	4842      	ldr	r0, [pc, #264]	; (8000fe0 <ReadingButton+0x198>)
 8000ed6:	f001 f80d 	bl	8001ef4 <HAL_GPIO_ReadPin>
 8000eda:	4603      	mov	r3, r0
 8000edc:	4619      	mov	r1, r3
 8000ede:	4a3f      	ldr	r2, [pc, #252]	; (8000fdc <ReadingButton+0x194>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000ee6:	e000      	b.n	8000eea <ReadingButton+0xa2>
			default:
				break;
 8000ee8:	bf00      	nop
		  }
		  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000eea:	4a3a      	ldr	r2, [pc, #232]	; (8000fd4 <ReadingButton+0x18c>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ef2:	493a      	ldr	r1, [pc, #232]	; (8000fdc <ReadingButton+0x194>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d15e      	bne.n	8000fbc <ReadingButton+0x174>
 8000efe:	4a35      	ldr	r2, [pc, #212]	; (8000fd4 <ReadingButton+0x18c>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f06:	4934      	ldr	r1, [pc, #208]	; (8000fd8 <ReadingButton+0x190>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d154      	bne.n	8000fbc <ReadingButton+0x174>
			  if(buttonBuffer[i] != KeyReg2[i]){
 8000f12:	4a35      	ldr	r2, [pc, #212]	; (8000fe8 <ReadingButton+0x1a0>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f1a:	492f      	ldr	r1, [pc, #188]	; (8000fd8 <ReadingButton+0x190>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d031      	beq.n	8000f8a <ReadingButton+0x142>
				  buttonBuffer[i] = KeyReg2[i];
 8000f26:	4a2c      	ldr	r2, [pc, #176]	; (8000fd8 <ReadingButton+0x190>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f2e:	492e      	ldr	r1, [pc, #184]	; (8000fe8 <ReadingButton+0x1a0>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  if(buttonBuffer[i] == PRESSED_STATE){
 8000f36:	4a2c      	ldr	r2, [pc, #176]	; (8000fe8 <ReadingButton+0x1a0>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d117      	bne.n	8000f72 <ReadingButton+0x12a>
					  button_flag[i] = 1;
 8000f42:	4a2a      	ldr	r2, [pc, #168]	; (8000fec <ReadingButton+0x1a4>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2101      	movs	r1, #1
 8000f48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					  if(flagForButtonPress3s[i] == 1){
 8000f4c:	4a28      	ldr	r2, [pc, #160]	; (8000ff0 <ReadingButton+0x1a8>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d105      	bne.n	8000f64 <ReadingButton+0x11c>
						  counterForButtonPress3s[i] = 100;
 8000f58:	4a26      	ldr	r2, [pc, #152]	; (8000ff4 <ReadingButton+0x1ac>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2164      	movs	r1, #100	; 0x64
 8000f5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000f62:	e02b      	b.n	8000fbc <ReadingButton+0x174>
					  }
					  else{
						  counterForButtonPress3s[i] = 300;
 8000f64:	4a23      	ldr	r2, [pc, #140]	; (8000ff4 <ReadingButton+0x1ac>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000f6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000f70:	e024      	b.n	8000fbc <ReadingButton+0x174>
					  }
				  }
				  else {
					  flagForButtonPress3s[i] = 0;
 8000f72:	4a1f      	ldr	r2, [pc, #124]	; (8000ff0 <ReadingButton+0x1a8>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2100      	movs	r1, #0
 8000f78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					  counterForButtonPress3s[i] = 300;
 8000f7c:	4a1d      	ldr	r2, [pc, #116]	; (8000ff4 <ReadingButton+0x1ac>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000f84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000f88:	e018      	b.n	8000fbc <ReadingButton+0x174>
				  }
			  }
			  else{
				  counterForButtonPress3s[i]--;
 8000f8a:	4a1a      	ldr	r2, [pc, #104]	; (8000ff4 <ReadingButton+0x1ac>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f92:	1e5a      	subs	r2, r3, #1
 8000f94:	4917      	ldr	r1, [pc, #92]	; (8000ff4 <ReadingButton+0x1ac>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  if(counterForButtonPress3s[i] <= 0){
 8000f9c:	4a15      	ldr	r2, [pc, #84]	; (8000ff4 <ReadingButton+0x1ac>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	dc09      	bgt.n	8000fbc <ReadingButton+0x174>
					  buttonBuffer[i] = NORMAL_STATE;
 8000fa8:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <ReadingButton+0x1a0>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2101      	movs	r1, #1
 8000fae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					  flagForButtonPress3s[i] = 1;
 8000fb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <ReadingButton+0x1a8>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUM_OF_BUTTON; i++){
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	f77f af45 	ble.w	8000e54 <ReadingButton+0xc>
				  }
			  }
		  }
	}
}
 8000fca:	bf00      	nop
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000024 	.word	0x20000024
 8000fd8:	20000034 	.word	0x20000034
 8000fdc:	20000014 	.word	0x20000014
 8000fe0:	40010800 	.word	0x40010800
 8000fe4:	40010c00 	.word	0x40010c00
 8000fe8:	20000004 	.word	0x20000004
 8000fec:	200000e0 	.word	0x200000e0
 8000ff0:	20000128 	.word	0x20000128
 8000ff4:	2000018c 	.word	0x2000018c

08000ff8 <isButtonPress>:


int isButtonPress(int index){
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	if(index >= NUM_OF_BUTTON) return 0;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b03      	cmp	r3, #3
 8001004:	dd01      	ble.n	800100a <isButtonPress+0x12>
 8001006:	2300      	movs	r3, #0
 8001008:	e00d      	b.n	8001026 <isButtonPress+0x2e>
	if(button_flag[index] == 1){
 800100a:	4a09      	ldr	r2, [pc, #36]	; (8001030 <isButtonPress+0x38>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d106      	bne.n	8001024 <isButtonPress+0x2c>
		button_flag[index] = 0;
 8001016:	4a06      	ldr	r2, [pc, #24]	; (8001030 <isButtonPress+0x38>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2100      	movs	r1, #0
 800101c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8001020:	2301      	movs	r3, #1
 8001022:	e000      	b.n	8001026 <isButtonPress+0x2e>
	}
	return 0;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	200000e0 	.word	0x200000e0

08001034 <Button1IsPressed>:
int Button1IsPressed(){
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	return isButtonPress(0);
 8001038:	2000      	movs	r0, #0
 800103a:	f7ff ffdd 	bl	8000ff8 <isButtonPress>
 800103e:	4603      	mov	r3, r0
}
 8001040:	4618      	mov	r0, r3
 8001042:	bd80      	pop	{r7, pc}

08001044 <Button2IsPressed>:
int Button2IsPressed(){
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	return isButtonPress(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f7ff ffd5 	bl	8000ff8 <isButtonPress>
 800104e:	4603      	mov	r3, r0
}
 8001050:	4618      	mov	r0, r3
 8001052:	bd80      	pop	{r7, pc}

08001054 <Button3IsPressed>:
int Button3IsPressed(){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	return isButtonPress(2);
 8001058:	2002      	movs	r0, #2
 800105a:	f7ff ffcd 	bl	8000ff8 <isButtonPress>
 800105e:	4603      	mov	r3, r0
}
 8001060:	4618      	mov	r0, r3
 8001062:	bd80      	pop	{r7, pc}

08001064 <PesButtonIsPressed>:
int PesButtonIsPressed(){
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	return isButtonPress(3);
 8001068:	2003      	movs	r0, #3
 800106a:	f7ff ffc5 	bl	8000ff8 <isButtonPress>
 800106e:	4603      	mov	r3, r0
}
 8001070:	4618      	mov	r0, r3
 8001072:	bd80      	pop	{r7, pc}

08001074 <turnOnRedLed1>:
#include "main.h"
#include "setting_led.h"
void testLed(){
	HAL_GPIO_TogglePin(PORTA, LED_Pin);
}
void turnOnRedLed1(){
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORTA, TL1_A_Pin, 1);
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <turnOnRedLed1+0x20>)
 8001080:	f000 ff4f 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORTB, TL1_B_Pin, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2108      	movs	r1, #8
 8001088:	4803      	ldr	r0, [pc, #12]	; (8001098 <turnOnRedLed1+0x24>)
 800108a:	f000 ff4a 	bl	8001f22 <HAL_GPIO_WritePin>
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40010800 	.word	0x40010800
 8001098:	40010c00 	.word	0x40010c00

0800109c <turnOnYellowLed1>:
void turnOnYellowLed1(){
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORTA, TL1_A_Pin, 1);
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <turnOnYellowLed1+0x20>)
 80010a8:	f000 ff3b 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORTB, TL1_B_Pin, 1);
 80010ac:	2201      	movs	r2, #1
 80010ae:	2108      	movs	r1, #8
 80010b0:	4803      	ldr	r0, [pc, #12]	; (80010c0 <turnOnYellowLed1+0x24>)
 80010b2:	f000 ff36 	bl	8001f22 <HAL_GPIO_WritePin>
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40010800 	.word	0x40010800
 80010c0:	40010c00 	.word	0x40010c00

080010c4 <turnOnGreenLed1>:
void turnOnGreenLed1(){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORTA, TL1_A_Pin, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <turnOnGreenLed1+0x20>)
 80010d0:	f000 ff27 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORTB, TL1_B_Pin, 1);
 80010d4:	2201      	movs	r2, #1
 80010d6:	2108      	movs	r1, #8
 80010d8:	4803      	ldr	r0, [pc, #12]	; (80010e8 <turnOnGreenLed1+0x24>)
 80010da:	f000 ff22 	bl	8001f22 <HAL_GPIO_WritePin>
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40010800 	.word	0x40010800
 80010e8:	40010c00 	.word	0x40010c00

080010ec <turnOffAllLed1>:
void turnOffAllLed1(){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORTA, TL1_A_Pin, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <turnOffAllLed1+0x20>)
 80010f8:	f000 ff13 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORTB, TL1_B_Pin, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2108      	movs	r1, #8
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <turnOffAllLed1+0x24>)
 8001102:	f000 ff0e 	bl	8001f22 <HAL_GPIO_WritePin>
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40010800 	.word	0x40010800
 8001110:	40010c00 	.word	0x40010c00

08001114 <turnOnRedLed2>:
void turnOnRedLed2(){
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORTB, TL2_A_Pin, 1);
 8001118:	2201      	movs	r2, #1
 800111a:	2120      	movs	r1, #32
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <turnOnRedLed2+0x1c>)
 800111e:	f000 ff00 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORTB, TL2_B_Pin, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2110      	movs	r1, #16
 8001126:	4802      	ldr	r0, [pc, #8]	; (8001130 <turnOnRedLed2+0x1c>)
 8001128:	f000 fefb 	bl	8001f22 <HAL_GPIO_WritePin>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40010c00 	.word	0x40010c00

08001134 <turnOnYellowLed2>:
void turnOnYellowLed2(){
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORTB, TL2_A_Pin, 1);
 8001138:	2201      	movs	r2, #1
 800113a:	2120      	movs	r1, #32
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <turnOnYellowLed2+0x1c>)
 800113e:	f000 fef0 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORTB, TL2_B_Pin, 1);
 8001142:	2201      	movs	r2, #1
 8001144:	2110      	movs	r1, #16
 8001146:	4802      	ldr	r0, [pc, #8]	; (8001150 <turnOnYellowLed2+0x1c>)
 8001148:	f000 feeb 	bl	8001f22 <HAL_GPIO_WritePin>
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40010c00 	.word	0x40010c00

08001154 <turnOnGreenLed2>:
void turnOnGreenLed2(){
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORTB, TL2_A_Pin, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2120      	movs	r1, #32
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <turnOnGreenLed2+0x1c>)
 800115e:	f000 fee0 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORTB, TL2_B_Pin, 1);
 8001162:	2201      	movs	r2, #1
 8001164:	2110      	movs	r1, #16
 8001166:	4802      	ldr	r0, [pc, #8]	; (8001170 <turnOnGreenLed2+0x1c>)
 8001168:	f000 fedb 	bl	8001f22 <HAL_GPIO_WritePin>
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40010c00 	.word	0x40010c00

08001174 <turnOffAllLed2>:
void turnOffAllLed2(){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORTB, TL2_A_Pin, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2120      	movs	r1, #32
 800117c:	4804      	ldr	r0, [pc, #16]	; (8001190 <turnOffAllLed2+0x1c>)
 800117e:	f000 fed0 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORTB, TL2_B_Pin, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2110      	movs	r1, #16
 8001186:	4802      	ldr	r0, [pc, #8]	; (8001190 <turnOffAllLed2+0x1c>)
 8001188:	f000 fecb 	bl	8001f22 <HAL_GPIO_WritePin>
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40010c00 	.word	0x40010c00

08001194 <turnOnPesRedLed>:
void turnOnPesRedLed(){
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORTB, PL_A_Pin, 1);
 8001198:	2201      	movs	r2, #1
 800119a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <turnOnPesRedLed+0x20>)
 80011a0:	f000 febf 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORTB, PL_B_Pin, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011aa:	4802      	ldr	r0, [pc, #8]	; (80011b4 <turnOnPesRedLed+0x20>)
 80011ac:	f000 feb9 	bl	8001f22 <HAL_GPIO_WritePin>
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40010c00 	.word	0x40010c00

080011b8 <turnOnPesGreenLed>:
void turnOnPesGreenLed(){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORTB, PL_A_Pin, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <turnOnPesGreenLed+0x20>)
 80011c4:	f000 fead 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORTB, PL_B_Pin, 1);
 80011c8:	2201      	movs	r2, #1
 80011ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ce:	4802      	ldr	r0, [pc, #8]	; (80011d8 <turnOnPesGreenLed+0x20>)
 80011d0:	f000 fea7 	bl	8001f22 <HAL_GPIO_WritePin>
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40010c00 	.word	0x40010c00

080011dc <turnOffAllPesLed>:
void turnOffAllPesLed(){
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORTB, PL_A_Pin, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <turnOffAllPesLed+0x20>)
 80011e8:	f000 fe9b 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORTB, PL_B_Pin, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f2:	4802      	ldr	r0, [pc, #8]	; (80011fc <turnOffAllPesLed+0x20>)
 80011f4:	f000 fe95 	bl	8001f22 <HAL_GPIO_WritePin>
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40010c00 	.word	0x40010c00

08001200 <turnOffAllLed>:
void turnOffAllLed(){
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	turnOffAllLed1();
 8001204:	f7ff ff72 	bl	80010ec <turnOffAllLed1>
	turnOffAllLed2();
 8001208:	f7ff ffb4 	bl	8001174 <turnOffAllLed2>
	turnOffAllPesLed();
 800120c:	f7ff ffe6 	bl	80011dc <turnOffAllPesLed>
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <BlinkyPesGreenLed>:
void BlinkyPesGreenLed(){
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORTB, PL_A_Pin, 0);
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <BlinkyPesGreenLed+0x20>)
 8001220:	f000 fe7f 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(PORTB, PL_B_Pin);
 8001224:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <BlinkyPesGreenLed+0x20>)
 800122a:	f000 fe92 	bl	8001f52 <HAL_GPIO_TogglePin>
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40010c00 	.word	0x40010c00

08001238 <BlinkyAllRedLed>:
void BlinkyAllRedLed(){
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(PORTA, TL1_A_Pin);
 800123c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <BlinkyAllRedLed+0x30>)
 8001242:	f000 fe86 	bl	8001f52 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(PORTB, TL1_B_Pin, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2108      	movs	r1, #8
 800124a:	4808      	ldr	r0, [pc, #32]	; (800126c <BlinkyAllRedLed+0x34>)
 800124c:	f000 fe69 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(PORTB, TL2_A_Pin);
 8001250:	2120      	movs	r1, #32
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <BlinkyAllRedLed+0x34>)
 8001254:	f000 fe7d 	bl	8001f52 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(PORTB, TL2_B_Pin, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2110      	movs	r1, #16
 800125c:	4803      	ldr	r0, [pc, #12]	; (800126c <BlinkyAllRedLed+0x34>)
 800125e:	f000 fe60 	bl	8001f22 <HAL_GPIO_WritePin>
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40010800 	.word	0x40010800
 800126c:	40010c00 	.word	0x40010c00

08001270 <BlinkyAllYellowLed>:
void BlinkyAllYellowLed(){
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(PORTA, TL1_A_Pin);
 8001274:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001278:	4808      	ldr	r0, [pc, #32]	; (800129c <BlinkyAllYellowLed+0x2c>)
 800127a:	f000 fe6a 	bl	8001f52 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(PORTB, TL1_B_Pin);
 800127e:	2108      	movs	r1, #8
 8001280:	4807      	ldr	r0, [pc, #28]	; (80012a0 <BlinkyAllYellowLed+0x30>)
 8001282:	f000 fe66 	bl	8001f52 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(PORTB, TL2_A_Pin);
 8001286:	2120      	movs	r1, #32
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <BlinkyAllYellowLed+0x30>)
 800128a:	f000 fe62 	bl	8001f52 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(PORTB, TL2_B_Pin);
 800128e:	2110      	movs	r1, #16
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <BlinkyAllYellowLed+0x30>)
 8001292:	f000 fe5e 	bl	8001f52 <HAL_GPIO_TogglePin>
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40010800 	.word	0x40010800
 80012a0:	40010c00 	.word	0x40010c00

080012a4 <BlinkyAllGreenLed>:
void BlinkyAllGreenLed(){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORTA, TL1_A_Pin, 0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ae:	4809      	ldr	r0, [pc, #36]	; (80012d4 <BlinkyAllGreenLed+0x30>)
 80012b0:	f000 fe37 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(PORTB, TL1_B_Pin);
 80012b4:	2108      	movs	r1, #8
 80012b6:	4808      	ldr	r0, [pc, #32]	; (80012d8 <BlinkyAllGreenLed+0x34>)
 80012b8:	f000 fe4b 	bl	8001f52 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(PORTB, TL2_A_Pin, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	2120      	movs	r1, #32
 80012c0:	4805      	ldr	r0, [pc, #20]	; (80012d8 <BlinkyAllGreenLed+0x34>)
 80012c2:	f000 fe2e 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(PORTB, TL2_B_Pin);
 80012c6:	2110      	movs	r1, #16
 80012c8:	4803      	ldr	r0, [pc, #12]	; (80012d8 <BlinkyAllGreenLed+0x34>)
 80012ca:	f000 fe42 	bl	8001f52 <HAL_GPIO_TogglePin>
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40010800 	.word	0x40010800
 80012d8:	40010c00 	.word	0x40010c00

080012dc <setTimer1>:
int timer3_counter = 0;
int timer3_flag = 0;
int timer4_counter = 0;
int timer4_flag = 0;
int TIME_CYCLE = 10;
void setTimer1(int duration){
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIME_CYCLE;
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <setTimer1+0x28>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80012ee:	4a06      	ldr	r2, [pc, #24]	; (8001308 <setTimer1+0x2c>)
 80012f0:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <setTimer1+0x30>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000044 	.word	0x20000044
 8001308:	200000f4 	.word	0x200000f4
 800130c:	200000f0 	.word	0x200000f0

08001310 <setTimer2>:
void setTimer2(int duration){
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIME_CYCLE;
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <setTimer2+0x28>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001322:	4a06      	ldr	r2, [pc, #24]	; (800133c <setTimer2+0x2c>)
 8001324:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <setTimer2+0x30>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000044 	.word	0x20000044
 800133c:	200000fc 	.word	0x200000fc
 8001340:	200000f8 	.word	0x200000f8

08001344 <setTimer3>:
void setTimer3(int duration){
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIME_CYCLE;
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <setTimer3+0x28>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	fb92 f3f3 	sdiv	r3, r2, r3
 8001356:	4a06      	ldr	r2, [pc, #24]	; (8001370 <setTimer3+0x2c>)
 8001358:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <setTimer3+0x30>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000044 	.word	0x20000044
 8001370:	20000104 	.word	0x20000104
 8001374:	20000100 	.word	0x20000100

08001378 <timerRun>:
void setTimer4(int duration){
	timer4_counter = duration/TIME_CYCLE;
	timer4_flag = 0;
}

void timerRun(){
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 800137c:	4b21      	ldr	r3, [pc, #132]	; (8001404 <timerRun+0x8c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	dd0b      	ble.n	800139c <timerRun+0x24>
		timer1_counter--;
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <timerRun+0x8c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	3b01      	subs	r3, #1
 800138a:	4a1e      	ldr	r2, [pc, #120]	; (8001404 <timerRun+0x8c>)
 800138c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 800138e:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <timerRun+0x8c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	dc02      	bgt.n	800139c <timerRun+0x24>
			timer1_flag = 1;
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <timerRun+0x90>)
 8001398:	2201      	movs	r2, #1
 800139a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <timerRun+0x94>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	dd0b      	ble.n	80013bc <timerRun+0x44>
		timer2_counter--;
 80013a4:	4b19      	ldr	r3, [pc, #100]	; (800140c <timerRun+0x94>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	4a18      	ldr	r2, [pc, #96]	; (800140c <timerRun+0x94>)
 80013ac:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 80013ae:	4b17      	ldr	r3, [pc, #92]	; (800140c <timerRun+0x94>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	dc02      	bgt.n	80013bc <timerRun+0x44>
			timer2_flag = 1;
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <timerRun+0x98>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <timerRun+0x9c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	dd0b      	ble.n	80013dc <timerRun+0x64>
		timer3_counter--;
 80013c4:	4b13      	ldr	r3, [pc, #76]	; (8001414 <timerRun+0x9c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <timerRun+0x9c>)
 80013cc:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <timerRun+0x9c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	dc02      	bgt.n	80013dc <timerRun+0x64>
			timer3_flag = 1;
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <timerRun+0xa0>)
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <timerRun+0xa4>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	dd0b      	ble.n	80013fc <timerRun+0x84>
		timer4_counter--;
 80013e4:	4b0d      	ldr	r3, [pc, #52]	; (800141c <timerRun+0xa4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	4a0c      	ldr	r2, [pc, #48]	; (800141c <timerRun+0xa4>)
 80013ec:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <timerRun+0xa4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	dc02      	bgt.n	80013fc <timerRun+0x84>
			timer4_flag = 1;
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <timerRun+0xa8>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]
		}
	}
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	200000f4 	.word	0x200000f4
 8001408:	200000f0 	.word	0x200000f0
 800140c:	200000fc 	.word	0x200000fc
 8001410:	200000f8 	.word	0x200000f8
 8001414:	20000104 	.word	0x20000104
 8001418:	20000100 	.word	0x20000100
 800141c:	2000010c 	.word	0x2000010c
 8001420:	20000108 	.word	0x20000108

08001424 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_MspInit+0x5c>)
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	4a14      	ldr	r2, [pc, #80]	; (8001480 <HAL_MspInit+0x5c>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6193      	str	r3, [r2, #24]
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_MspInit+0x5c>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_MspInit+0x5c>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <HAL_MspInit+0x5c>)
 8001448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144c:	61d3      	str	r3, [r2, #28]
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <HAL_MspInit+0x5c>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_MspInit+0x60>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <HAL_MspInit+0x60>)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001476:	bf00      	nop
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	40021000 	.word	0x40021000
 8001484:	40010000 	.word	0x40010000

08001488 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001498:	d114      	bne.n	80014c4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <HAL_TIM_Base_MspInit+0x78>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	4a18      	ldr	r2, [pc, #96]	; (8001500 <HAL_TIM_Base_MspInit+0x78>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	61d3      	str	r3, [r2, #28]
 80014a6:	4b16      	ldr	r3, [pc, #88]	; (8001500 <HAL_TIM_Base_MspInit+0x78>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	201c      	movs	r0, #28
 80014b8:	f000 fab1 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014bc:	201c      	movs	r0, #28
 80014be:	f000 faca 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014c2:	e018      	b.n	80014f6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <HAL_TIM_Base_MspInit+0x7c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d113      	bne.n	80014f6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <HAL_TIM_Base_MspInit+0x78>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <HAL_TIM_Base_MspInit+0x78>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	61d3      	str	r3, [r2, #28]
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <HAL_TIM_Base_MspInit+0x78>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	201d      	movs	r0, #29
 80014ec:	f000 fa97 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014f0:	201d      	movs	r0, #29
 80014f2:	f000 fab0 	bl	8001a56 <HAL_NVIC_EnableIRQ>
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000
 8001504:	40000400 	.word	0x40000400

08001508 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a0f      	ldr	r2, [pc, #60]	; (8001560 <HAL_TIM_MspPostInit+0x58>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d117      	bne.n	8001558 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <HAL_TIM_MspPostInit+0x5c>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a0d      	ldr	r2, [pc, #52]	; (8001564 <HAL_TIM_MspPostInit+0x5c>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_TIM_MspPostInit+0x5c>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PB_Pin;
 8001540:	2340      	movs	r3, #64	; 0x40
 8001542:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2302      	movs	r3, #2
 800154a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PB_GPIO_Port, &GPIO_InitStruct);
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	4619      	mov	r1, r3
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <HAL_TIM_MspPostInit+0x60>)
 8001554:	f000 fb4a 	bl	8001bec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001558:	bf00      	nop
 800155a:	3720      	adds	r7, #32
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40000400 	.word	0x40000400
 8001564:	40021000 	.word	0x40021000
 8001568:	40010800 	.word	0x40010800

0800156c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0310 	add.w	r3, r7, #16
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a1f      	ldr	r2, [pc, #124]	; (8001604 <HAL_UART_MspInit+0x98>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d137      	bne.n	80015fc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800158c:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <HAL_UART_MspInit+0x9c>)
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <HAL_UART_MspInit+0x9c>)
 8001592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001596:	61d3      	str	r3, [r2, #28]
 8001598:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <HAL_UART_MspInit+0x9c>)
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a4:	4b18      	ldr	r3, [pc, #96]	; (8001608 <HAL_UART_MspInit+0x9c>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4a17      	ldr	r2, [pc, #92]	; (8001608 <HAL_UART_MspInit+0x9c>)
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	6193      	str	r3, [r2, #24]
 80015b0:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_UART_MspInit+0x9c>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin;
 80015bc:	2304      	movs	r3, #4
 80015be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	4619      	mov	r1, r3
 80015ce:	480f      	ldr	r0, [pc, #60]	; (800160c <HAL_UART_MspInit+0xa0>)
 80015d0:	f000 fb0c 	bl	8001bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART_RX_Pin;
 80015d4:	2308      	movs	r3, #8
 80015d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	4619      	mov	r1, r3
 80015e6:	4809      	ldr	r0, [pc, #36]	; (800160c <HAL_UART_MspInit+0xa0>)
 80015e8:	f000 fb00 	bl	8001bec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	2026      	movs	r0, #38	; 0x26
 80015f2:	f000 fa14 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015f6:	2026      	movs	r0, #38	; 0x26
 80015f8:	f000 fa2d 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015fc:	bf00      	nop
 80015fe:	3720      	adds	r7, #32
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40004400 	.word	0x40004400
 8001608:	40021000 	.word	0x40021000
 800160c:	40010800 	.word	0x40010800

08001610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <NMI_Handler+0x4>

08001616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <HardFault_Handler+0x4>

0800161c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <MemManage_Handler+0x4>

08001622 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <BusFault_Handler+0x4>

08001628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <UsageFault_Handler+0x4>

0800162e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr

0800163a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr

08001646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001656:	f000 f8ef 	bl	8001838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <TIM2_IRQHandler+0x10>)
 8001666:	f001 fa43 	bl	8002af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200001e4 	.word	0x200001e4

08001674 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <TIM3_IRQHandler+0x10>)
 800167a:	f001 fa39 	bl	8002af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000019c 	.word	0x2000019c

08001688 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <USART2_IRQHandler+0x10>)
 800168e:	f002 f8d1 	bl	8003834 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	2000022c 	.word	0x2000022c

0800169c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a4:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <_sbrk+0x5c>)
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <_sbrk+0x60>)
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <_sbrk+0x64>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	; (8001704 <_sbrk+0x68>)
 80016bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d207      	bcs.n	80016dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016cc:	f002 fcaa 	bl	8004024 <__errno>
 80016d0:	4603      	mov	r3, r0
 80016d2:	220c      	movs	r2, #12
 80016d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	e009      	b.n	80016f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016e2:	4b07      	ldr	r3, [pc, #28]	; (8001700 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	4a05      	ldr	r2, [pc, #20]	; (8001700 <_sbrk+0x64>)
 80016ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ee:	68fb      	ldr	r3, [r7, #12]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20005000 	.word	0x20005000
 80016fc:	00000400 	.word	0x00000400
 8001700:	20000110 	.word	0x20000110
 8001704:	20000288 	.word	0x20000288

08001708 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <init_traffic_light>:
//initialize countdown value for each traffic light
int count1= 0;
int count2 = 0;
int time_pes = 5;
int count_ped_buzzer = 0;
void init_traffic_light(){
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	turnOffAllLed();
 8001718:	f7ff fd72 	bl	8001200 <turnOffAllLed>
	status1 = RED1;
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <init_traffic_light+0x30>)
 800171e:	2206      	movs	r2, #6
 8001720:	601a      	str	r2, [r3, #0]
	status2 = GREEN2;
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <init_traffic_light+0x34>)
 8001724:	220a      	movs	r2, #10
 8001726:	601a      	str	r2, [r3, #0]
	count1 = time_red;
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <init_traffic_light+0x38>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a08      	ldr	r2, [pc, #32]	; (8001750 <init_traffic_light+0x3c>)
 800172e:	6013      	str	r3, [r2, #0]
	count2 = time_green;
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <init_traffic_light+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a08      	ldr	r2, [pc, #32]	; (8001758 <init_traffic_light+0x44>)
 8001736:	6013      	str	r3, [r2, #0]
	counter = 0;
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <init_traffic_light+0x48>)
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000178 	.word	0x20000178
 8001748:	2000013c 	.word	0x2000013c
 800174c:	2000004c 	.word	0x2000004c
 8001750:	20000114 	.word	0x20000114
 8001754:	20000054 	.word	0x20000054
 8001758:	20000118 	.word	0x20000118
 800175c:	2000017c 	.word	0x2000017c

08001760 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001760:	480c      	ldr	r0, [pc, #48]	; (8001794 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001762:	490d      	ldr	r1, [pc, #52]	; (8001798 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001778:	4c0a      	ldr	r4, [pc, #40]	; (80017a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001786:	f7ff ffbf 	bl	8001708 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800178a:	f002 fc51 	bl	8004030 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800178e:	f7ff f8df 	bl	8000950 <main>
  bx lr
 8001792:	4770      	bx	lr
  ldr r0, =_sdata
 8001794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001798:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 800179c:	08004a84 	.word	0x08004a84
  ldr r2, =_sbss
 80017a0:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 80017a4:	20000284 	.word	0x20000284

080017a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC1_2_IRQHandler>
	...

080017ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_Init+0x28>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <HAL_Init+0x28>)
 80017b6:	f043 0310 	orr.w	r3, r3, #16
 80017ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017bc:	2003      	movs	r0, #3
 80017be:	f000 f923 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c2:	200f      	movs	r0, #15
 80017c4:	f000 f808 	bl	80017d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c8:	f7ff fe2c 	bl	8001424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40022000 	.word	0x40022000

080017d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_InitTick+0x54>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_InitTick+0x58>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f93b 	bl	8001a72 <HAL_SYSTICK_Config>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e00e      	b.n	8001824 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b0f      	cmp	r3, #15
 800180a:	d80a      	bhi.n	8001822 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800180c:	2200      	movs	r2, #0
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f000 f903 	bl	8001a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001818:	4a06      	ldr	r2, [pc, #24]	; (8001834 <HAL_InitTick+0x5c>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	e000      	b.n	8001824 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000048 	.word	0x20000048
 8001830:	2000005c 	.word	0x2000005c
 8001834:	20000058 	.word	0x20000058

08001838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_IncTick+0x1c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_IncTick+0x20>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4413      	add	r3, r2
 8001848:	4a03      	ldr	r2, [pc, #12]	; (8001858 <HAL_IncTick+0x20>)
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	2000005c 	.word	0x2000005c
 8001858:	20000270 	.word	0x20000270

0800185c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return uwTick;
 8001860:	4b02      	ldr	r3, [pc, #8]	; (800186c <HAL_GetTick+0x10>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	20000270 	.word	0x20000270

08001870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800188c:	4013      	ands	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800189c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a2:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	60d3      	str	r3, [r2, #12]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <__NVIC_GetPriorityGrouping+0x18>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	f003 0307 	and.w	r3, r3, #7
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	db0b      	blt.n	80018fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	f003 021f 	and.w	r2, r3, #31
 80018ec:	4906      	ldr	r1, [pc, #24]	; (8001908 <__NVIC_EnableIRQ+0x34>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	2001      	movs	r0, #1
 80018f6:	fa00 f202 	lsl.w	r2, r0, r2
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100

0800190c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	6039      	str	r1, [r7, #0]
 8001916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191c:	2b00      	cmp	r3, #0
 800191e:	db0a      	blt.n	8001936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	b2da      	uxtb	r2, r3
 8001924:	490c      	ldr	r1, [pc, #48]	; (8001958 <__NVIC_SetPriority+0x4c>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	0112      	lsls	r2, r2, #4
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	440b      	add	r3, r1
 8001930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001934:	e00a      	b.n	800194c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4908      	ldr	r1, [pc, #32]	; (800195c <__NVIC_SetPriority+0x50>)
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	3b04      	subs	r3, #4
 8001944:	0112      	lsls	r2, r2, #4
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	440b      	add	r3, r1
 800194a:	761a      	strb	r2, [r3, #24]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000e100 	.word	0xe000e100
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001960:	b480      	push	{r7}
 8001962:	b089      	sub	sp, #36	; 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f1c3 0307 	rsb	r3, r3, #7
 800197a:	2b04      	cmp	r3, #4
 800197c:	bf28      	it	cs
 800197e:	2304      	movcs	r3, #4
 8001980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3304      	adds	r3, #4
 8001986:	2b06      	cmp	r3, #6
 8001988:	d902      	bls.n	8001990 <NVIC_EncodePriority+0x30>
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3b03      	subs	r3, #3
 800198e:	e000      	b.n	8001992 <NVIC_EncodePriority+0x32>
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	f04f 32ff 	mov.w	r2, #4294967295
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43da      	mvns	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	401a      	ands	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	43d9      	mvns	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	4313      	orrs	r3, r2
         );
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3724      	adds	r7, #36	; 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d4:	d301      	bcc.n	80019da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00f      	b.n	80019fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <SysTick_Config+0x40>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e2:	210f      	movs	r1, #15
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f7ff ff90 	bl	800190c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <SysTick_Config+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <SysTick_Config+0x40>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff2d 	bl	8001870 <__NVIC_SetPriorityGrouping>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff42 	bl	80018b8 <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff90 	bl	8001960 <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5f 	bl	800190c <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff35 	bl	80018d4 <__NVIC_EnableIRQ>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffa2 	bl	80019c4 <SysTick_Config>
 8001a80:	4603      	mov	r3, r0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b085      	sub	sp, #20
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d008      	beq.n	8001ab2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e020      	b.n	8001af4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 020e 	bic.w	r2, r2, #14
 8001ac0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0201 	bic.w	r2, r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ada:	2101      	movs	r1, #1
 8001adc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr
	...

08001b00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d005      	beq.n	8001b22 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2204      	movs	r2, #4
 8001b1a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	73fb      	strb	r3, [r7, #15]
 8001b20:	e051      	b.n	8001bc6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 020e 	bic.w	r2, r2, #14
 8001b30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0201 	bic.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a22      	ldr	r2, [pc, #136]	; (8001bd0 <HAL_DMA_Abort_IT+0xd0>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d029      	beq.n	8001ba0 <HAL_DMA_Abort_IT+0xa0>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a20      	ldr	r2, [pc, #128]	; (8001bd4 <HAL_DMA_Abort_IT+0xd4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d022      	beq.n	8001b9c <HAL_DMA_Abort_IT+0x9c>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a1f      	ldr	r2, [pc, #124]	; (8001bd8 <HAL_DMA_Abort_IT+0xd8>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d01a      	beq.n	8001b96 <HAL_DMA_Abort_IT+0x96>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a1d      	ldr	r2, [pc, #116]	; (8001bdc <HAL_DMA_Abort_IT+0xdc>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d012      	beq.n	8001b90 <HAL_DMA_Abort_IT+0x90>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a1c      	ldr	r2, [pc, #112]	; (8001be0 <HAL_DMA_Abort_IT+0xe0>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d00a      	beq.n	8001b8a <HAL_DMA_Abort_IT+0x8a>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a1a      	ldr	r2, [pc, #104]	; (8001be4 <HAL_DMA_Abort_IT+0xe4>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d102      	bne.n	8001b84 <HAL_DMA_Abort_IT+0x84>
 8001b7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b82:	e00e      	b.n	8001ba2 <HAL_DMA_Abort_IT+0xa2>
 8001b84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b88:	e00b      	b.n	8001ba2 <HAL_DMA_Abort_IT+0xa2>
 8001b8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b8e:	e008      	b.n	8001ba2 <HAL_DMA_Abort_IT+0xa2>
 8001b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b94:	e005      	b.n	8001ba2 <HAL_DMA_Abort_IT+0xa2>
 8001b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b9a:	e002      	b.n	8001ba2 <HAL_DMA_Abort_IT+0xa2>
 8001b9c:	2310      	movs	r3, #16
 8001b9e:	e000      	b.n	8001ba2 <HAL_DMA_Abort_IT+0xa2>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	4a11      	ldr	r2, [pc, #68]	; (8001be8 <HAL_DMA_Abort_IT+0xe8>)
 8001ba4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	4798      	blx	r3
    } 
  }
  return status;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40020008 	.word	0x40020008
 8001bd4:	4002001c 	.word	0x4002001c
 8001bd8:	40020030 	.word	0x40020030
 8001bdc:	40020044 	.word	0x40020044
 8001be0:	40020058 	.word	0x40020058
 8001be4:	4002006c 	.word	0x4002006c
 8001be8:	40020000 	.word	0x40020000

08001bec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b08b      	sub	sp, #44	; 0x2c
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bfe:	e169      	b.n	8001ed4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c00:	2201      	movs	r2, #1
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	f040 8158 	bne.w	8001ece <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	4a9a      	ldr	r2, [pc, #616]	; (8001e8c <HAL_GPIO_Init+0x2a0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d05e      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c28:	4a98      	ldr	r2, [pc, #608]	; (8001e8c <HAL_GPIO_Init+0x2a0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d875      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c2e:	4a98      	ldr	r2, [pc, #608]	; (8001e90 <HAL_GPIO_Init+0x2a4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d058      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c34:	4a96      	ldr	r2, [pc, #600]	; (8001e90 <HAL_GPIO_Init+0x2a4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d86f      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c3a:	4a96      	ldr	r2, [pc, #600]	; (8001e94 <HAL_GPIO_Init+0x2a8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d052      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c40:	4a94      	ldr	r2, [pc, #592]	; (8001e94 <HAL_GPIO_Init+0x2a8>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d869      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c46:	4a94      	ldr	r2, [pc, #592]	; (8001e98 <HAL_GPIO_Init+0x2ac>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d04c      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c4c:	4a92      	ldr	r2, [pc, #584]	; (8001e98 <HAL_GPIO_Init+0x2ac>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d863      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c52:	4a92      	ldr	r2, [pc, #584]	; (8001e9c <HAL_GPIO_Init+0x2b0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d046      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c58:	4a90      	ldr	r2, [pc, #576]	; (8001e9c <HAL_GPIO_Init+0x2b0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d85d      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c5e:	2b12      	cmp	r3, #18
 8001c60:	d82a      	bhi.n	8001cb8 <HAL_GPIO_Init+0xcc>
 8001c62:	2b12      	cmp	r3, #18
 8001c64:	d859      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c66:	a201      	add	r2, pc, #4	; (adr r2, 8001c6c <HAL_GPIO_Init+0x80>)
 8001c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6c:	08001ce7 	.word	0x08001ce7
 8001c70:	08001cc1 	.word	0x08001cc1
 8001c74:	08001cd3 	.word	0x08001cd3
 8001c78:	08001d15 	.word	0x08001d15
 8001c7c:	08001d1b 	.word	0x08001d1b
 8001c80:	08001d1b 	.word	0x08001d1b
 8001c84:	08001d1b 	.word	0x08001d1b
 8001c88:	08001d1b 	.word	0x08001d1b
 8001c8c:	08001d1b 	.word	0x08001d1b
 8001c90:	08001d1b 	.word	0x08001d1b
 8001c94:	08001d1b 	.word	0x08001d1b
 8001c98:	08001d1b 	.word	0x08001d1b
 8001c9c:	08001d1b 	.word	0x08001d1b
 8001ca0:	08001d1b 	.word	0x08001d1b
 8001ca4:	08001d1b 	.word	0x08001d1b
 8001ca8:	08001d1b 	.word	0x08001d1b
 8001cac:	08001d1b 	.word	0x08001d1b
 8001cb0:	08001cc9 	.word	0x08001cc9
 8001cb4:	08001cdd 	.word	0x08001cdd
 8001cb8:	4a79      	ldr	r2, [pc, #484]	; (8001ea0 <HAL_GPIO_Init+0x2b4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cbe:	e02c      	b.n	8001d1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	623b      	str	r3, [r7, #32]
          break;
 8001cc6:	e029      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	623b      	str	r3, [r7, #32]
          break;
 8001cd0:	e024      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	3308      	adds	r3, #8
 8001cd8:	623b      	str	r3, [r7, #32]
          break;
 8001cda:	e01f      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	330c      	adds	r3, #12
 8001ce2:	623b      	str	r3, [r7, #32]
          break;
 8001ce4:	e01a      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d102      	bne.n	8001cf4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cee:	2304      	movs	r3, #4
 8001cf0:	623b      	str	r3, [r7, #32]
          break;
 8001cf2:	e013      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d105      	bne.n	8001d08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	611a      	str	r2, [r3, #16]
          break;
 8001d06:	e009      	b.n	8001d1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d08:	2308      	movs	r3, #8
 8001d0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	615a      	str	r2, [r3, #20]
          break;
 8001d12:	e003      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
          break;
 8001d18:	e000      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          break;
 8001d1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2bff      	cmp	r3, #255	; 0xff
 8001d20:	d801      	bhi.n	8001d26 <HAL_GPIO_Init+0x13a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	e001      	b.n	8001d2a <HAL_GPIO_Init+0x13e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2bff      	cmp	r3, #255	; 0xff
 8001d30:	d802      	bhi.n	8001d38 <HAL_GPIO_Init+0x14c>
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	e002      	b.n	8001d3e <HAL_GPIO_Init+0x152>
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	3b08      	subs	r3, #8
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	210f      	movs	r1, #15
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	401a      	ands	r2, r3
 8001d50:	6a39      	ldr	r1, [r7, #32]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 80b1 	beq.w	8001ece <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d6c:	4b4d      	ldr	r3, [pc, #308]	; (8001ea4 <HAL_GPIO_Init+0x2b8>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	4a4c      	ldr	r2, [pc, #304]	; (8001ea4 <HAL_GPIO_Init+0x2b8>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6193      	str	r3, [r2, #24]
 8001d78:	4b4a      	ldr	r3, [pc, #296]	; (8001ea4 <HAL_GPIO_Init+0x2b8>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d84:	4a48      	ldr	r2, [pc, #288]	; (8001ea8 <HAL_GPIO_Init+0x2bc>)
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	220f      	movs	r2, #15
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4013      	ands	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a40      	ldr	r2, [pc, #256]	; (8001eac <HAL_GPIO_Init+0x2c0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d013      	beq.n	8001dd8 <HAL_GPIO_Init+0x1ec>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a3f      	ldr	r2, [pc, #252]	; (8001eb0 <HAL_GPIO_Init+0x2c4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d00d      	beq.n	8001dd4 <HAL_GPIO_Init+0x1e8>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a3e      	ldr	r2, [pc, #248]	; (8001eb4 <HAL_GPIO_Init+0x2c8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d007      	beq.n	8001dd0 <HAL_GPIO_Init+0x1e4>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a3d      	ldr	r2, [pc, #244]	; (8001eb8 <HAL_GPIO_Init+0x2cc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d101      	bne.n	8001dcc <HAL_GPIO_Init+0x1e0>
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e006      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dcc:	2304      	movs	r3, #4
 8001dce:	e004      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e002      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ddc:	f002 0203 	and.w	r2, r2, #3
 8001de0:	0092      	lsls	r2, r2, #2
 8001de2:	4093      	lsls	r3, r2
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dea:	492f      	ldr	r1, [pc, #188]	; (8001ea8 <HAL_GPIO_Init+0x2bc>)
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	3302      	adds	r3, #2
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d006      	beq.n	8001e12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e04:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	492c      	ldr	r1, [pc, #176]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e12:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	4928      	ldr	r1, [pc, #160]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d006      	beq.n	8001e3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e2c:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	4922      	ldr	r1, [pc, #136]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	604b      	str	r3, [r1, #4]
 8001e38:	e006      	b.n	8001e48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e3a:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	491e      	ldr	r1, [pc, #120]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d006      	beq.n	8001e62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	4918      	ldr	r1, [pc, #96]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	608b      	str	r3, [r1, #8]
 8001e60:	e006      	b.n	8001e70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e62:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	4914      	ldr	r1, [pc, #80]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d021      	beq.n	8001ec0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	490e      	ldr	r1, [pc, #56]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	60cb      	str	r3, [r1, #12]
 8001e88:	e021      	b.n	8001ece <HAL_GPIO_Init+0x2e2>
 8001e8a:	bf00      	nop
 8001e8c:	10320000 	.word	0x10320000
 8001e90:	10310000 	.word	0x10310000
 8001e94:	10220000 	.word	0x10220000
 8001e98:	10210000 	.word	0x10210000
 8001e9c:	10120000 	.word	0x10120000
 8001ea0:	10110000 	.word	0x10110000
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40010000 	.word	0x40010000
 8001eac:	40010800 	.word	0x40010800
 8001eb0:	40010c00 	.word	0x40010c00
 8001eb4:	40011000 	.word	0x40011000
 8001eb8:	40011400 	.word	0x40011400
 8001ebc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <HAL_GPIO_Init+0x304>)
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	4909      	ldr	r1, [pc, #36]	; (8001ef0 <HAL_GPIO_Init+0x304>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	fa22 f303 	lsr.w	r3, r2, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f47f ae8e 	bne.w	8001c00 <HAL_GPIO_Init+0x14>
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	372c      	adds	r7, #44	; 0x2c
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr
 8001ef0:	40010400 	.word	0x40010400

08001ef4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	887b      	ldrh	r3, [r7, #2]
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
 8001f10:	e001      	b.n	8001f16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr

08001f22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	807b      	strh	r3, [r7, #2]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f32:	787b      	ldrb	r3, [r7, #1]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f38:	887a      	ldrh	r2, [r7, #2]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f3e:	e003      	b.n	8001f48 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f40:	887b      	ldrh	r3, [r7, #2]
 8001f42:	041a      	lsls	r2, r3, #16
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	611a      	str	r2, [r3, #16]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b085      	sub	sp, #20
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f64:	887a      	ldrh	r2, [r7, #2]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	041a      	lsls	r2, r3, #16
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	43d9      	mvns	r1, r3
 8001f70:	887b      	ldrh	r3, [r7, #2]
 8001f72:	400b      	ands	r3, r1
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	611a      	str	r2, [r3, #16]
}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e26c      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 8087 	beq.w	80020b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fa4:	4b92      	ldr	r3, [pc, #584]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d00c      	beq.n	8001fca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fb0:	4b8f      	ldr	r3, [pc, #572]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d112      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x5e>
 8001fbc:	4b8c      	ldr	r3, [pc, #560]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc8:	d10b      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fca:	4b89      	ldr	r3, [pc, #548]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d06c      	beq.n	80020b0 <HAL_RCC_OscConfig+0x12c>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d168      	bne.n	80020b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e246      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fea:	d106      	bne.n	8001ffa <HAL_RCC_OscConfig+0x76>
 8001fec:	4b80      	ldr	r3, [pc, #512]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a7f      	ldr	r2, [pc, #508]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	e02e      	b.n	8002058 <HAL_RCC_OscConfig+0xd4>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0x98>
 8002002:	4b7b      	ldr	r3, [pc, #492]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a7a      	ldr	r2, [pc, #488]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b78      	ldr	r3, [pc, #480]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a77      	ldr	r2, [pc, #476]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002014:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e01d      	b.n	8002058 <HAL_RCC_OscConfig+0xd4>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002024:	d10c      	bne.n	8002040 <HAL_RCC_OscConfig+0xbc>
 8002026:	4b72      	ldr	r3, [pc, #456]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a71      	ldr	r2, [pc, #452]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800202c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	4b6f      	ldr	r3, [pc, #444]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a6e      	ldr	r2, [pc, #440]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e00b      	b.n	8002058 <HAL_RCC_OscConfig+0xd4>
 8002040:	4b6b      	ldr	r3, [pc, #428]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a6a      	ldr	r2, [pc, #424]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	4b68      	ldr	r3, [pc, #416]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a67      	ldr	r2, [pc, #412]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002056:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d013      	beq.n	8002088 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7ff fbfc 	bl	800185c <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002068:	f7ff fbf8 	bl	800185c <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	; 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e1fa      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	4b5d      	ldr	r3, [pc, #372]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0xe4>
 8002086:	e014      	b.n	80020b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002088:	f7ff fbe8 	bl	800185c <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002090:	f7ff fbe4 	bl	800185c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b64      	cmp	r3, #100	; 0x64
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e1e6      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a2:	4b53      	ldr	r3, [pc, #332]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x10c>
 80020ae:	e000      	b.n	80020b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d063      	beq.n	8002186 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020be:	4b4c      	ldr	r3, [pc, #304]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00b      	beq.n	80020e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020ca:	4b49      	ldr	r3, [pc, #292]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d11c      	bne.n	8002110 <HAL_RCC_OscConfig+0x18c>
 80020d6:	4b46      	ldr	r3, [pc, #280]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d116      	bne.n	8002110 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e2:	4b43      	ldr	r3, [pc, #268]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d005      	beq.n	80020fa <HAL_RCC_OscConfig+0x176>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d001      	beq.n	80020fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e1ba      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fa:	4b3d      	ldr	r3, [pc, #244]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4939      	ldr	r1, [pc, #228]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210e:	e03a      	b.n	8002186 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d020      	beq.n	800215a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002118:	4b36      	ldr	r3, [pc, #216]	; (80021f4 <HAL_RCC_OscConfig+0x270>)
 800211a:	2201      	movs	r2, #1
 800211c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7ff fb9d 	bl	800185c <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002126:	f7ff fb99 	bl	800185c <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e19b      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002138:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002144:	4b2a      	ldr	r3, [pc, #168]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4927      	ldr	r1, [pc, #156]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002154:	4313      	orrs	r3, r2
 8002156:	600b      	str	r3, [r1, #0]
 8002158:	e015      	b.n	8002186 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800215a:	4b26      	ldr	r3, [pc, #152]	; (80021f4 <HAL_RCC_OscConfig+0x270>)
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7ff fb7c 	bl	800185c <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002168:	f7ff fb78 	bl	800185c <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e17a      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217a:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d03a      	beq.n	8002208 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d019      	beq.n	80021ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800219a:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 800219c:	2201      	movs	r2, #1
 800219e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a0:	f7ff fb5c 	bl	800185c <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a8:	f7ff fb58 	bl	800185c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e15a      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021c6:	2001      	movs	r0, #1
 80021c8:	f000 fad8 	bl	800277c <RCC_Delay>
 80021cc:	e01c      	b.n	8002208 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ce:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d4:	f7ff fb42 	bl	800185c <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021da:	e00f      	b.n	80021fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021dc:	f7ff fb3e 	bl	800185c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d908      	bls.n	80021fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e140      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	42420000 	.word	0x42420000
 80021f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fc:	4b9e      	ldr	r3, [pc, #632]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1e9      	bne.n	80021dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80a6 	beq.w	8002362 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221a:	4b97      	ldr	r3, [pc, #604]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10d      	bne.n	8002242 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	4b94      	ldr	r3, [pc, #592]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	4a93      	ldr	r2, [pc, #588]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 800222c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002230:	61d3      	str	r3, [r2, #28]
 8002232:	4b91      	ldr	r3, [pc, #580]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800223e:	2301      	movs	r3, #1
 8002240:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002242:	4b8e      	ldr	r3, [pc, #568]	; (800247c <HAL_RCC_OscConfig+0x4f8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224a:	2b00      	cmp	r3, #0
 800224c:	d118      	bne.n	8002280 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800224e:	4b8b      	ldr	r3, [pc, #556]	; (800247c <HAL_RCC_OscConfig+0x4f8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a8a      	ldr	r2, [pc, #552]	; (800247c <HAL_RCC_OscConfig+0x4f8>)
 8002254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225a:	f7ff faff 	bl	800185c <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002262:	f7ff fafb 	bl	800185c <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b64      	cmp	r3, #100	; 0x64
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e0fd      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002274:	4b81      	ldr	r3, [pc, #516]	; (800247c <HAL_RCC_OscConfig+0x4f8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d106      	bne.n	8002296 <HAL_RCC_OscConfig+0x312>
 8002288:	4b7b      	ldr	r3, [pc, #492]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	4a7a      	ldr	r2, [pc, #488]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6213      	str	r3, [r2, #32]
 8002294:	e02d      	b.n	80022f2 <HAL_RCC_OscConfig+0x36e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x334>
 800229e:	4b76      	ldr	r3, [pc, #472]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	4a75      	ldr	r2, [pc, #468]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	f023 0301 	bic.w	r3, r3, #1
 80022a8:	6213      	str	r3, [r2, #32]
 80022aa:	4b73      	ldr	r3, [pc, #460]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	4a72      	ldr	r2, [pc, #456]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	f023 0304 	bic.w	r3, r3, #4
 80022b4:	6213      	str	r3, [r2, #32]
 80022b6:	e01c      	b.n	80022f2 <HAL_RCC_OscConfig+0x36e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2b05      	cmp	r3, #5
 80022be:	d10c      	bne.n	80022da <HAL_RCC_OscConfig+0x356>
 80022c0:	4b6d      	ldr	r3, [pc, #436]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	4a6c      	ldr	r2, [pc, #432]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	f043 0304 	orr.w	r3, r3, #4
 80022ca:	6213      	str	r3, [r2, #32]
 80022cc:	4b6a      	ldr	r3, [pc, #424]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4a69      	ldr	r2, [pc, #420]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	6213      	str	r3, [r2, #32]
 80022d8:	e00b      	b.n	80022f2 <HAL_RCC_OscConfig+0x36e>
 80022da:	4b67      	ldr	r3, [pc, #412]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	4a66      	ldr	r2, [pc, #408]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022e0:	f023 0301 	bic.w	r3, r3, #1
 80022e4:	6213      	str	r3, [r2, #32]
 80022e6:	4b64      	ldr	r3, [pc, #400]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	4a63      	ldr	r2, [pc, #396]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80022ec:	f023 0304 	bic.w	r3, r3, #4
 80022f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d015      	beq.n	8002326 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fa:	f7ff faaf 	bl	800185c <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002300:	e00a      	b.n	8002318 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002302:	f7ff faab 	bl	800185c <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002310:	4293      	cmp	r3, r2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e0ab      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002318:	4b57      	ldr	r3, [pc, #348]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0ee      	beq.n	8002302 <HAL_RCC_OscConfig+0x37e>
 8002324:	e014      	b.n	8002350 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002326:	f7ff fa99 	bl	800185c <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232c:	e00a      	b.n	8002344 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232e:	f7ff fa95 	bl	800185c <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f241 3288 	movw	r2, #5000	; 0x1388
 800233c:	4293      	cmp	r3, r2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e095      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002344:	4b4c      	ldr	r3, [pc, #304]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1ee      	bne.n	800232e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002350:	7dfb      	ldrb	r3, [r7, #23]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d105      	bne.n	8002362 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002356:	4b48      	ldr	r3, [pc, #288]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	4a47      	ldr	r2, [pc, #284]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 800235c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002360:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 8081 	beq.w	800246e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800236c:	4b42      	ldr	r3, [pc, #264]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b08      	cmp	r3, #8
 8002376:	d061      	beq.n	800243c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d146      	bne.n	800240e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002380:	4b3f      	ldr	r3, [pc, #252]	; (8002480 <HAL_RCC_OscConfig+0x4fc>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002386:	f7ff fa69 	bl	800185c <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238e:	f7ff fa65 	bl	800185c <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e067      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a0:	4b35      	ldr	r3, [pc, #212]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f0      	bne.n	800238e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b4:	d108      	bne.n	80023c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023b6:	4b30      	ldr	r3, [pc, #192]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	492d      	ldr	r1, [pc, #180]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023c8:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a19      	ldr	r1, [r3, #32]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	430b      	orrs	r3, r1
 80023da:	4927      	ldr	r1, [pc, #156]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e0:	4b27      	ldr	r3, [pc, #156]	; (8002480 <HAL_RCC_OscConfig+0x4fc>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e6:	f7ff fa39 	bl	800185c <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ee:	f7ff fa35 	bl	800185c <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e037      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002400:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f0      	beq.n	80023ee <HAL_RCC_OscConfig+0x46a>
 800240c:	e02f      	b.n	800246e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240e:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <HAL_RCC_OscConfig+0x4fc>)
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7ff fa22 	bl	800185c <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241c:	f7ff fa1e 	bl	800185c <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e020      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800242e:	4b12      	ldr	r3, [pc, #72]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x498>
 800243a:	e018      	b.n	800246e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e013      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_RCC_OscConfig+0x4f4>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	429a      	cmp	r2, r3
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002466:	429a      	cmp	r2, r3
 8002468:	d001      	beq.n	800246e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40021000 	.word	0x40021000
 800247c:	40007000 	.word	0x40007000
 8002480:	42420060 	.word	0x42420060

08002484 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0d0      	b.n	800263a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002498:	4b6a      	ldr	r3, [pc, #424]	; (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d910      	bls.n	80024c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	4b67      	ldr	r3, [pc, #412]	; (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 0207 	bic.w	r2, r3, #7
 80024ae:	4965      	ldr	r1, [pc, #404]	; (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b6:	4b63      	ldr	r3, [pc, #396]	; (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0b8      	b.n	800263a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d020      	beq.n	8002516 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e0:	4b59      	ldr	r3, [pc, #356]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4a58      	ldr	r2, [pc, #352]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024f8:	4b53      	ldr	r3, [pc, #332]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	4a52      	ldr	r2, [pc, #328]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002502:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002504:	4b50      	ldr	r3, [pc, #320]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	494d      	ldr	r1, [pc, #308]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	4313      	orrs	r3, r2
 8002514:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d040      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	4b47      	ldr	r3, [pc, #284]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d115      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e07f      	b.n	800263a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d107      	bne.n	8002552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002542:	4b41      	ldr	r3, [pc, #260]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e073      	b.n	800263a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002552:	4b3d      	ldr	r3, [pc, #244]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e06b      	b.n	800263a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002562:	4b39      	ldr	r3, [pc, #228]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f023 0203 	bic.w	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4936      	ldr	r1, [pc, #216]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	4313      	orrs	r3, r2
 8002572:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002574:	f7ff f972 	bl	800185c <HAL_GetTick>
 8002578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	e00a      	b.n	8002592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257c:	f7ff f96e 	bl	800185c <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	; 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e053      	b.n	800263a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 020c 	and.w	r2, r3, #12
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d1eb      	bne.n	800257c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025a4:	4b27      	ldr	r3, [pc, #156]	; (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d210      	bcs.n	80025d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b24      	ldr	r3, [pc, #144]	; (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 0207 	bic.w	r2, r3, #7
 80025ba:	4922      	ldr	r1, [pc, #136]	; (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c2:	4b20      	ldr	r3, [pc, #128]	; (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e032      	b.n	800263a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4916      	ldr	r1, [pc, #88]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	490e      	ldr	r1, [pc, #56]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	4313      	orrs	r3, r2
 8002610:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002612:	f000 f821 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 8002616:	4602      	mov	r2, r0
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	490a      	ldr	r1, [pc, #40]	; (800264c <HAL_RCC_ClockConfig+0x1c8>)
 8002624:	5ccb      	ldrb	r3, [r1, r3]
 8002626:	fa22 f303 	lsr.w	r3, r2, r3
 800262a:	4a09      	ldr	r2, [pc, #36]	; (8002650 <HAL_RCC_ClockConfig+0x1cc>)
 800262c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800262e:	4b09      	ldr	r3, [pc, #36]	; (8002654 <HAL_RCC_ClockConfig+0x1d0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff f8d0 	bl	80017d8 <HAL_InitTick>

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40022000 	.word	0x40022000
 8002648:	40021000 	.word	0x40021000
 800264c:	08004a30 	.word	0x08004a30
 8002650:	20000048 	.word	0x20000048
 8002654:	20000058 	.word	0x20000058

08002658 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002658:	b490      	push	{r4, r7}
 800265a:	b08a      	sub	sp, #40	; 0x28
 800265c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800265e:	4b2a      	ldr	r3, [pc, #168]	; (8002708 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002660:	1d3c      	adds	r4, r7, #4
 8002662:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002664:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002668:	f240 2301 	movw	r3, #513	; 0x201
 800266c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	2300      	movs	r3, #0
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002682:	4b22      	ldr	r3, [pc, #136]	; (800270c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	2b04      	cmp	r3, #4
 8002690:	d002      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0x40>
 8002692:	2b08      	cmp	r3, #8
 8002694:	d003      	beq.n	800269e <HAL_RCC_GetSysClockFreq+0x46>
 8002696:	e02d      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002698:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <HAL_RCC_GetSysClockFreq+0xb8>)
 800269a:	623b      	str	r3, [r7, #32]
      break;
 800269c:	e02d      	b.n	80026fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	0c9b      	lsrs	r3, r3, #18
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026aa:	4413      	add	r3, r2
 80026ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d013      	beq.n	80026e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026bc:	4b13      	ldr	r3, [pc, #76]	; (800270c <HAL_RCC_GetSysClockFreq+0xb4>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	0c5b      	lsrs	r3, r3, #17
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026ca:	4413      	add	r3, r2
 80026cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	4a0e      	ldr	r2, [pc, #56]	; (8002710 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026d6:	fb02 f203 	mul.w	r2, r2, r3
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
 80026e2:	e004      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	4a0b      	ldr	r2, [pc, #44]	; (8002714 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026e8:	fb02 f303 	mul.w	r3, r2, r3
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	623b      	str	r3, [r7, #32]
      break;
 80026f2:	e002      	b.n	80026fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026f6:	623b      	str	r3, [r7, #32]
      break;
 80026f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026fa:	6a3b      	ldr	r3, [r7, #32]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3728      	adds	r7, #40	; 0x28
 8002700:	46bd      	mov	sp, r7
 8002702:	bc90      	pop	{r4, r7}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	08004a20 	.word	0x08004a20
 800270c:	40021000 	.word	0x40021000
 8002710:	007a1200 	.word	0x007a1200
 8002714:	003d0900 	.word	0x003d0900

08002718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800271c:	4b02      	ldr	r3, [pc, #8]	; (8002728 <HAL_RCC_GetHCLKFreq+0x10>)
 800271e:	681b      	ldr	r3, [r3, #0]
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr
 8002728:	20000048 	.word	0x20000048

0800272c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002730:	f7ff fff2 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002734:	4602      	mov	r2, r0
 8002736:	4b05      	ldr	r3, [pc, #20]	; (800274c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	0a1b      	lsrs	r3, r3, #8
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	4903      	ldr	r1, [pc, #12]	; (8002750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002742:	5ccb      	ldrb	r3, [r1, r3]
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002748:	4618      	mov	r0, r3
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021000 	.word	0x40021000
 8002750:	08004a40 	.word	0x08004a40

08002754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002758:	f7ff ffde 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 800275c:	4602      	mov	r2, r0
 800275e:	4b05      	ldr	r3, [pc, #20]	; (8002774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	0adb      	lsrs	r3, r3, #11
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	4903      	ldr	r1, [pc, #12]	; (8002778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800276a:	5ccb      	ldrb	r3, [r1, r3]
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002770:	4618      	mov	r0, r3
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000
 8002778:	08004a40 	.word	0x08004a40

0800277c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002784:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <RCC_Delay+0x34>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <RCC_Delay+0x38>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	0a5b      	lsrs	r3, r3, #9
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	fb02 f303 	mul.w	r3, r2, r3
 8002796:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002798:	bf00      	nop
  }
  while (Delay --);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	1e5a      	subs	r2, r3, #1
 800279e:	60fa      	str	r2, [r7, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f9      	bne.n	8002798 <RCC_Delay+0x1c>
}
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	20000048 	.word	0x20000048
 80027b4:	10624dd3 	.word	0x10624dd3

080027b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e041      	b.n	800284e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe fe52 	bl	8001488 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3304      	adds	r3, #4
 80027f4:	4619      	mov	r1, r3
 80027f6:	4610      	mov	r0, r2
 80027f8:	f000 fc28 	bl	800304c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b01      	cmp	r3, #1
 800286a:	d001      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e03a      	b.n	80028e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0201 	orr.w	r2, r2, #1
 8002886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a18      	ldr	r2, [pc, #96]	; (80028f0 <HAL_TIM_Base_Start_IT+0x98>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00e      	beq.n	80028b0 <HAL_TIM_Base_Start_IT+0x58>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289a:	d009      	beq.n	80028b0 <HAL_TIM_Base_Start_IT+0x58>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d004      	beq.n	80028b0 <HAL_TIM_Base_Start_IT+0x58>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a13      	ldr	r2, [pc, #76]	; (80028f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d111      	bne.n	80028d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2b06      	cmp	r3, #6
 80028c0:	d010      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0201 	orr.w	r2, r2, #1
 80028d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d2:	e007      	b.n	80028e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0201 	orr.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr
 80028f0:	40012c00 	.word	0x40012c00
 80028f4:	40000400 	.word	0x40000400
 80028f8:	40000800 	.word	0x40000800

080028fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e041      	b.n	8002992 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f839 	bl	800299a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3304      	adds	r3, #4
 8002938:	4619      	mov	r1, r3
 800293a:	4610      	mov	r0, r2
 800293c:	f000 fb86 	bl	800304c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d109      	bne.n	80029d0 <HAL_TIM_PWM_Start+0x24>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	bf14      	ite	ne
 80029c8:	2301      	movne	r3, #1
 80029ca:	2300      	moveq	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	e022      	b.n	8002a16 <HAL_TIM_PWM_Start+0x6a>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d109      	bne.n	80029ea <HAL_TIM_PWM_Start+0x3e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	bf14      	ite	ne
 80029e2:	2301      	movne	r3, #1
 80029e4:	2300      	moveq	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	e015      	b.n	8002a16 <HAL_TIM_PWM_Start+0x6a>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d109      	bne.n	8002a04 <HAL_TIM_PWM_Start+0x58>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	bf14      	ite	ne
 80029fc:	2301      	movne	r3, #1
 80029fe:	2300      	moveq	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	e008      	b.n	8002a16 <HAL_TIM_PWM_Start+0x6a>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	bf14      	ite	ne
 8002a10:	2301      	movne	r3, #1
 8002a12:	2300      	moveq	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e05e      	b.n	8002adc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d104      	bne.n	8002a2e <HAL_TIM_PWM_Start+0x82>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a2c:	e013      	b.n	8002a56 <HAL_TIM_PWM_Start+0xaa>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d104      	bne.n	8002a3e <HAL_TIM_PWM_Start+0x92>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a3c:	e00b      	b.n	8002a56 <HAL_TIM_PWM_Start+0xaa>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d104      	bne.n	8002a4e <HAL_TIM_PWM_Start+0xa2>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a4c:	e003      	b.n	8002a56 <HAL_TIM_PWM_Start+0xaa>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2202      	movs	r2, #2
 8002a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	6839      	ldr	r1, [r7, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 fd74 	bl	800354c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a1e      	ldr	r2, [pc, #120]	; (8002ae4 <HAL_TIM_PWM_Start+0x138>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d107      	bne.n	8002a7e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a18      	ldr	r2, [pc, #96]	; (8002ae4 <HAL_TIM_PWM_Start+0x138>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d00e      	beq.n	8002aa6 <HAL_TIM_PWM_Start+0xfa>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a90:	d009      	beq.n	8002aa6 <HAL_TIM_PWM_Start+0xfa>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a14      	ldr	r2, [pc, #80]	; (8002ae8 <HAL_TIM_PWM_Start+0x13c>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d004      	beq.n	8002aa6 <HAL_TIM_PWM_Start+0xfa>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a12      	ldr	r2, [pc, #72]	; (8002aec <HAL_TIM_PWM_Start+0x140>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d111      	bne.n	8002aca <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b06      	cmp	r3, #6
 8002ab6:	d010      	beq.n	8002ada <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac8:	e007      	b.n	8002ada <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0201 	orr.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40012c00 	.word	0x40012c00
 8002ae8:	40000400 	.word	0x40000400
 8002aec:	40000800 	.word	0x40000800

08002af0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d122      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d11b      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0202 	mvn.w	r2, #2
 8002b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fa6f 	bl	8003016 <HAL_TIM_IC_CaptureCallback>
 8002b38:	e005      	b.n	8002b46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fa62 	bl	8003004 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 fa71 	bl	8003028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d122      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d11b      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0204 	mvn.w	r2, #4
 8002b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2202      	movs	r2, #2
 8002b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fa45 	bl	8003016 <HAL_TIM_IC_CaptureCallback>
 8002b8c:	e005      	b.n	8002b9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fa38 	bl	8003004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 fa47 	bl	8003028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d122      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d11b      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0208 	mvn.w	r2, #8
 8002bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2204      	movs	r2, #4
 8002bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fa1b 	bl	8003016 <HAL_TIM_IC_CaptureCallback>
 8002be0:	e005      	b.n	8002bee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fa0e 	bl	8003004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 fa1d 	bl	8003028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	2b10      	cmp	r3, #16
 8002c00:	d122      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b10      	cmp	r3, #16
 8002c0e:	d11b      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0210 	mvn.w	r2, #16
 8002c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2208      	movs	r2, #8
 8002c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f9f1 	bl	8003016 <HAL_TIM_IC_CaptureCallback>
 8002c34:	e005      	b.n	8002c42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f9e4 	bl	8003004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f9f3 	bl	8003028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d10e      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d107      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0201 	mvn.w	r2, #1
 8002c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fe f866 	bl	8000d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7e:	2b80      	cmp	r3, #128	; 0x80
 8002c80:	d10e      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8c:	2b80      	cmp	r3, #128	; 0x80
 8002c8e:	d107      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fce1 	bl	8003662 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002caa:	2b40      	cmp	r3, #64	; 0x40
 8002cac:	d10e      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb8:	2b40      	cmp	r3, #64	; 0x40
 8002cba:	d107      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f9b7 	bl	800303a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	d10e      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	2b20      	cmp	r3, #32
 8002ce6:	d107      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0220 	mvn.w	r2, #32
 8002cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fcac 	bl	8003650 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e0ac      	b.n	8002e74 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b0c      	cmp	r3, #12
 8002d26:	f200 809f 	bhi.w	8002e68 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002d2a:	a201      	add	r2, pc, #4	; (adr r2, 8002d30 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d30:	08002d65 	.word	0x08002d65
 8002d34:	08002e69 	.word	0x08002e69
 8002d38:	08002e69 	.word	0x08002e69
 8002d3c:	08002e69 	.word	0x08002e69
 8002d40:	08002da5 	.word	0x08002da5
 8002d44:	08002e69 	.word	0x08002e69
 8002d48:	08002e69 	.word	0x08002e69
 8002d4c:	08002e69 	.word	0x08002e69
 8002d50:	08002de7 	.word	0x08002de7
 8002d54:	08002e69 	.word	0x08002e69
 8002d58:	08002e69 	.word	0x08002e69
 8002d5c:	08002e69 	.word	0x08002e69
 8002d60:	08002e27 	.word	0x08002e27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 f9d0 	bl	8003110 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0208 	orr.w	r2, r2, #8
 8002d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0204 	bic.w	r2, r2, #4
 8002d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6999      	ldr	r1, [r3, #24]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	691a      	ldr	r2, [r3, #16]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	619a      	str	r2, [r3, #24]
      break;
 8002da2:	e062      	b.n	8002e6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68b9      	ldr	r1, [r7, #8]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fa16 	bl	80031dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699a      	ldr	r2, [r3, #24]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699a      	ldr	r2, [r3, #24]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6999      	ldr	r1, [r3, #24]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	021a      	lsls	r2, r3, #8
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	619a      	str	r2, [r3, #24]
      break;
 8002de4:	e041      	b.n	8002e6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 fa5f 	bl	80032b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69da      	ldr	r2, [r3, #28]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0208 	orr.w	r2, r2, #8
 8002e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	69da      	ldr	r2, [r3, #28]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0204 	bic.w	r2, r2, #4
 8002e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69d9      	ldr	r1, [r3, #28]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	61da      	str	r2, [r3, #28]
      break;
 8002e24:	e021      	b.n	8002e6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68b9      	ldr	r1, [r7, #8]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 faa9 	bl	8003384 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	69da      	ldr	r2, [r3, #28]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	69da      	ldr	r2, [r3, #28]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69d9      	ldr	r1, [r3, #28]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	021a      	lsls	r2, r3, #8
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	61da      	str	r2, [r3, #28]
      break;
 8002e66:	e000      	b.n	8002e6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002e68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_TIM_ConfigClockSource+0x18>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e0b3      	b.n	8002ffc <HAL_TIM_ConfigClockSource+0x180>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002eb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ecc:	d03e      	beq.n	8002f4c <HAL_TIM_ConfigClockSource+0xd0>
 8002ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed2:	f200 8087 	bhi.w	8002fe4 <HAL_TIM_ConfigClockSource+0x168>
 8002ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eda:	f000 8085 	beq.w	8002fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee2:	d87f      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x168>
 8002ee4:	2b70      	cmp	r3, #112	; 0x70
 8002ee6:	d01a      	beq.n	8002f1e <HAL_TIM_ConfigClockSource+0xa2>
 8002ee8:	2b70      	cmp	r3, #112	; 0x70
 8002eea:	d87b      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x168>
 8002eec:	2b60      	cmp	r3, #96	; 0x60
 8002eee:	d050      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0x116>
 8002ef0:	2b60      	cmp	r3, #96	; 0x60
 8002ef2:	d877      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x168>
 8002ef4:	2b50      	cmp	r3, #80	; 0x50
 8002ef6:	d03c      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0xf6>
 8002ef8:	2b50      	cmp	r3, #80	; 0x50
 8002efa:	d873      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x168>
 8002efc:	2b40      	cmp	r3, #64	; 0x40
 8002efe:	d058      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x136>
 8002f00:	2b40      	cmp	r3, #64	; 0x40
 8002f02:	d86f      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x168>
 8002f04:	2b30      	cmp	r3, #48	; 0x30
 8002f06:	d064      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x156>
 8002f08:	2b30      	cmp	r3, #48	; 0x30
 8002f0a:	d86b      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x168>
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	d060      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x156>
 8002f10:	2b20      	cmp	r3, #32
 8002f12:	d867      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x168>
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d05c      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x156>
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d05a      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f1c:	e062      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	6899      	ldr	r1, [r3, #8]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f000 faee 	bl	800350e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	609a      	str	r2, [r3, #8]
      break;
 8002f4a:	e04e      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	6899      	ldr	r1, [r3, #8]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f000 fad7 	bl	800350e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f6e:	609a      	str	r2, [r3, #8]
      break;
 8002f70:	e03b      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	6859      	ldr	r1, [r3, #4]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f000 fa4e 	bl	8003420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2150      	movs	r1, #80	; 0x50
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 faa5 	bl	80034da <TIM_ITRx_SetConfig>
      break;
 8002f90:	e02b      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6859      	ldr	r1, [r3, #4]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f000 fa6c 	bl	800347c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2160      	movs	r1, #96	; 0x60
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fa95 	bl	80034da <TIM_ITRx_SetConfig>
      break;
 8002fb0:	e01b      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6859      	ldr	r1, [r3, #4]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f000 fa2e 	bl	8003420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2140      	movs	r1, #64	; 0x40
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fa85 	bl	80034da <TIM_ITRx_SetConfig>
      break;
 8002fd0:	e00b      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4610      	mov	r0, r2
 8002fde:	f000 fa7c 	bl	80034da <TIM_ITRx_SetConfig>
        break;
 8002fe2:	e002      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fe4:	bf00      	nop
 8002fe6:	e000      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fe8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr

08003016 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr

08003028 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr

0800303a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a29      	ldr	r2, [pc, #164]	; (8003104 <TIM_Base_SetConfig+0xb8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d00b      	beq.n	800307c <TIM_Base_SetConfig+0x30>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306a:	d007      	beq.n	800307c <TIM_Base_SetConfig+0x30>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a26      	ldr	r2, [pc, #152]	; (8003108 <TIM_Base_SetConfig+0xbc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d003      	beq.n	800307c <TIM_Base_SetConfig+0x30>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a25      	ldr	r2, [pc, #148]	; (800310c <TIM_Base_SetConfig+0xc0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d108      	bne.n	800308e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a1c      	ldr	r2, [pc, #112]	; (8003104 <TIM_Base_SetConfig+0xb8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d00b      	beq.n	80030ae <TIM_Base_SetConfig+0x62>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309c:	d007      	beq.n	80030ae <TIM_Base_SetConfig+0x62>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a19      	ldr	r2, [pc, #100]	; (8003108 <TIM_Base_SetConfig+0xbc>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d003      	beq.n	80030ae <TIM_Base_SetConfig+0x62>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a18      	ldr	r2, [pc, #96]	; (800310c <TIM_Base_SetConfig+0xc0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d108      	bne.n	80030c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4313      	orrs	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a07      	ldr	r2, [pc, #28]	; (8003104 <TIM_Base_SetConfig+0xb8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d103      	bne.n	80030f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	615a      	str	r2, [r3, #20]
}
 80030fa:	bf00      	nop
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr
 8003104:	40012c00 	.word	0x40012c00
 8003108:	40000400 	.word	0x40000400
 800310c:	40000800 	.word	0x40000800

08003110 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	f023 0201 	bic.w	r2, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f023 0303 	bic.w	r3, r3, #3
 8003146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	4313      	orrs	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f023 0302 	bic.w	r3, r3, #2
 8003158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a1c      	ldr	r2, [pc, #112]	; (80031d8 <TIM_OC1_SetConfig+0xc8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d10c      	bne.n	8003186 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f023 0308 	bic.w	r3, r3, #8
 8003172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f023 0304 	bic.w	r3, r3, #4
 8003184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a13      	ldr	r2, [pc, #76]	; (80031d8 <TIM_OC1_SetConfig+0xc8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d111      	bne.n	80031b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800319c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	621a      	str	r2, [r3, #32]
}
 80031cc:	bf00      	nop
 80031ce:	371c      	adds	r7, #28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40012c00 	.word	0x40012c00

080031dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	f023 0210 	bic.w	r2, r3, #16
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800320a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	021b      	lsls	r3, r3, #8
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f023 0320 	bic.w	r3, r3, #32
 8003226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a1d      	ldr	r2, [pc, #116]	; (80032ac <TIM_OC2_SetConfig+0xd0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d10d      	bne.n	8003258 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4313      	orrs	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003256:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a14      	ldr	r2, [pc, #80]	; (80032ac <TIM_OC2_SetConfig+0xd0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d113      	bne.n	8003288 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003266:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800326e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	621a      	str	r2, [r3, #32]
}
 80032a2:	bf00      	nop
 80032a4:	371c      	adds	r7, #28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr
 80032ac:	40012c00 	.word	0x40012c00

080032b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0303 	bic.w	r3, r3, #3
 80032e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	021b      	lsls	r3, r3, #8
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a1d      	ldr	r2, [pc, #116]	; (8003380 <TIM_OC3_SetConfig+0xd0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d10d      	bne.n	800332a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	021b      	lsls	r3, r3, #8
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a14      	ldr	r2, [pc, #80]	; (8003380 <TIM_OC3_SetConfig+0xd0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d113      	bne.n	800335a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	621a      	str	r2, [r3, #32]
}
 8003374:	bf00      	nop
 8003376:	371c      	adds	r7, #28
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40012c00 	.word	0x40012c00

08003384 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	021b      	lsls	r3, r3, #8
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	031b      	lsls	r3, r3, #12
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a0f      	ldr	r2, [pc, #60]	; (800341c <TIM_OC4_SetConfig+0x98>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d109      	bne.n	80033f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	019b      	lsls	r3, r3, #6
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	621a      	str	r2, [r3, #32]
}
 8003412:	bf00      	nop
 8003414:	371c      	adds	r7, #28
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr
 800341c:	40012c00 	.word	0x40012c00

08003420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	f023 0201 	bic.w	r2, r3, #1
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800344a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f023 030a 	bic.w	r3, r3, #10
 800345c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4313      	orrs	r3, r2
 8003464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	621a      	str	r2, [r3, #32]
}
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr

0800347c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	f023 0210 	bic.w	r2, r3, #16
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	031b      	lsls	r3, r3, #12
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	621a      	str	r2, [r3, #32]
}
 80034d0:	bf00      	nop
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr

080034da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034da:	b480      	push	{r7}
 80034dc:	b085      	sub	sp, #20
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f043 0307 	orr.w	r3, r3, #7
 80034fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	609a      	str	r2, [r3, #8]
}
 8003504:	bf00      	nop
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr

0800350e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800350e:	b480      	push	{r7}
 8003510:	b087      	sub	sp, #28
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003528:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	021a      	lsls	r2, r3, #8
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	431a      	orrs	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4313      	orrs	r3, r2
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	609a      	str	r2, [r3, #8]
}
 8003542:	bf00      	nop
 8003544:	371c      	adds	r7, #28
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f003 031f 	and.w	r3, r3, #31
 800355e:	2201      	movs	r2, #1
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a1a      	ldr	r2, [r3, #32]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	43db      	mvns	r3, r3
 800356e:	401a      	ands	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a1a      	ldr	r2, [r3, #32]
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f003 031f 	and.w	r3, r3, #31
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	fa01 f303 	lsl.w	r3, r1, r3
 8003584:	431a      	orrs	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	621a      	str	r2, [r3, #32]
}
 800358a:	bf00      	nop
 800358c:	371c      	adds	r7, #28
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr

08003594 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e046      	b.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a16      	ldr	r2, [pc, #88]	; (8003644 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00e      	beq.n	800360e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f8:	d009      	beq.n	800360e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a12      	ldr	r2, [pc, #72]	; (8003648 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d004      	beq.n	800360e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a10      	ldr	r2, [pc, #64]	; (800364c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d10c      	bne.n	8003628 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003614:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	4313      	orrs	r3, r2
 800361e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr
 8003644:	40012c00 	.word	0x40012c00
 8003648:	40000400 	.word	0x40000400
 800364c:	40000800 	.word	0x40000800

08003650 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr

08003662 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr

08003674 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e03f      	b.n	8003706 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fd ff66 	bl	800156c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2224      	movs	r2, #36	; 0x24
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 fc25 	bl	8003f08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695a      	ldr	r2, [r3, #20]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b08a      	sub	sp, #40	; 0x28
 8003712:	af02      	add	r7, sp, #8
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	603b      	str	r3, [r7, #0]
 800371a:	4613      	mov	r3, r2
 800371c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b20      	cmp	r3, #32
 800372c:	d17c      	bne.n	8003828 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <HAL_UART_Transmit+0x2c>
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e075      	b.n	800382a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_UART_Transmit+0x3e>
 8003748:	2302      	movs	r3, #2
 800374a:	e06e      	b.n	800382a <HAL_UART_Transmit+0x11c>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2221      	movs	r2, #33	; 0x21
 800375e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003762:	f7fe f87b 	bl	800185c <HAL_GetTick>
 8003766:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	88fa      	ldrh	r2, [r7, #6]
 800376c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	88fa      	ldrh	r2, [r7, #6]
 8003772:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377c:	d108      	bne.n	8003790 <HAL_UART_Transmit+0x82>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d104      	bne.n	8003790 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003786:	2300      	movs	r3, #0
 8003788:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	e003      	b.n	8003798 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003794:	2300      	movs	r3, #0
 8003796:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037a0:	e02a      	b.n	80037f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2200      	movs	r2, #0
 80037aa:	2180      	movs	r1, #128	; 0x80
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 fa11 	bl	8003bd4 <UART_WaitOnFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e036      	b.n	800382a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10b      	bne.n	80037da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	3302      	adds	r3, #2
 80037d6:	61bb      	str	r3, [r7, #24]
 80037d8:	e007      	b.n	80037ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	781a      	ldrb	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	3301      	adds	r3, #1
 80037e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1cf      	bne.n	80037a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2200      	movs	r2, #0
 800380a:	2140      	movs	r1, #64	; 0x40
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f9e1 	bl	8003bd4 <UART_WaitOnFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e006      	b.n	800382a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003824:	2300      	movs	r3, #0
 8003826:	e000      	b.n	800382a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003828:	2302      	movs	r3, #2
  }
}
 800382a:	4618      	mov	r0, r3
 800382c:	3720      	adds	r7, #32
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08a      	sub	sp, #40	; 0x28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003854:	2300      	movs	r3, #0
 8003856:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10d      	bne.n	8003886 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_UART_IRQHandler+0x52>
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fa99 	bl	8003db6 <UART_Receive_IT>
      return;
 8003884:	e17b      	b.n	8003b7e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80b1 	beq.w	80039f0 <HAL_UART_IRQHandler+0x1bc>
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d105      	bne.n	80038a4 <HAL_UART_IRQHandler+0x70>
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 80a6 	beq.w	80039f0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_UART_IRQHandler+0x90>
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	f043 0201 	orr.w	r2, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_UART_IRQHandler+0xb0>
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	f043 0202 	orr.w	r2, r3, #2
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_UART_IRQHandler+0xd0>
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	f043 0204 	orr.w	r2, r3, #4
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00f      	beq.n	800392e <HAL_UART_IRQHandler+0xfa>
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d104      	bne.n	8003922 <HAL_UART_IRQHandler+0xee>
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d005      	beq.n	800392e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	f043 0208 	orr.w	r2, r3, #8
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 811e 	beq.w	8003b74 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	f003 0320 	and.w	r3, r3, #32
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <HAL_UART_IRQHandler+0x11e>
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 fa32 	bl	8003db6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395c:	2b00      	cmp	r3, #0
 800395e:	bf14      	ite	ne
 8003960:	2301      	movne	r3, #1
 8003962:	2300      	moveq	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b00      	cmp	r3, #0
 8003972:	d102      	bne.n	800397a <HAL_UART_IRQHandler+0x146>
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d031      	beq.n	80039de <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f974 	bl	8003c68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	d023      	beq.n	80039d6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695a      	ldr	r2, [r3, #20]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800399c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d013      	beq.n	80039ce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	4a76      	ldr	r2, [pc, #472]	; (8003b84 <HAL_UART_IRQHandler+0x350>)
 80039ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe f8a4 	bl	8001b00 <HAL_DMA_Abort_IT>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d016      	beq.n	80039ec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039c8:	4610      	mov	r0, r2
 80039ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039cc:	e00e      	b.n	80039ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f8ec 	bl	8003bac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d4:	e00a      	b.n	80039ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f8e8 	bl	8003bac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039dc:	e006      	b.n	80039ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f8e4 	bl	8003bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80039ea:	e0c3      	b.n	8003b74 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ec:	bf00      	nop
    return;
 80039ee:	e0c1      	b.n	8003b74 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	f040 80a1 	bne.w	8003b3c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	f003 0310 	and.w	r3, r3, #16
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 809b 	beq.w	8003b3c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 8095 	beq.w	8003b3c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d04e      	beq.n	8003ad4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003a40:	8a3b      	ldrh	r3, [r7, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 8098 	beq.w	8003b78 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a4c:	8a3a      	ldrh	r2, [r7, #16]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	f080 8092 	bcs.w	8003b78 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8a3a      	ldrh	r2, [r7, #16]
 8003a58:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d02b      	beq.n	8003abc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a72:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0201 	bic.w	r2, r2, #1
 8003a82:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695a      	ldr	r2, [r3, #20]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a92:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0210 	bic.w	r2, r2, #16
 8003ab0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fd ffe7 	bl	8001a8a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	4619      	mov	r1, r3
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f876 	bl	8003bbe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ad2:	e051      	b.n	8003b78 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d047      	beq.n	8003b7c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003aec:	8a7b      	ldrh	r3, [r7, #18]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d044      	beq.n	8003b7c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b00:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695a      	ldr	r2, [r3, #20]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0201 	bic.w	r2, r2, #1
 8003b10:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0210 	bic.w	r2, r2, #16
 8003b2e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b30:	8a7b      	ldrh	r3, [r7, #18]
 8003b32:	4619      	mov	r1, r3
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f842 	bl	8003bbe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b3a:	e01f      	b.n	8003b7c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d008      	beq.n	8003b58 <HAL_UART_IRQHandler+0x324>
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f8c9 	bl	8003ce8 <UART_Transmit_IT>
    return;
 8003b56:	e012      	b.n	8003b7e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00d      	beq.n	8003b7e <HAL_UART_IRQHandler+0x34a>
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f90a 	bl	8003d86 <UART_EndTransmit_IT>
    return;
 8003b72:	e004      	b.n	8003b7e <HAL_UART_IRQHandler+0x34a>
    return;
 8003b74:	bf00      	nop
 8003b76:	e002      	b.n	8003b7e <HAL_UART_IRQHandler+0x34a>
      return;
 8003b78:	bf00      	nop
 8003b7a:	e000      	b.n	8003b7e <HAL_UART_IRQHandler+0x34a>
      return;
 8003b7c:	bf00      	nop
  }
}
 8003b7e:	3728      	adds	r7, #40	; 0x28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	08003cc1 	.word	0x08003cc1

08003b88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bc80      	pop	{r7}
 8003b98:	4770      	bx	lr

08003b9a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr

08003bac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr

08003bbe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr

08003bd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	603b      	str	r3, [r7, #0]
 8003be0:	4613      	mov	r3, r2
 8003be2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be4:	e02c      	b.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bec:	d028      	beq.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d007      	beq.n	8003c04 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bf4:	f7fd fe32 	bl	800185c <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d21d      	bcs.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c12:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695a      	ldr	r2, [r3, #20]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0201 	bic.w	r2, r2, #1
 8003c22:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e00f      	b.n	8003c60 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	461a      	mov	r2, r3
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d0c3      	beq.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c7e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695a      	ldr	r2, [r3, #20]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0201 	bic.w	r2, r2, #1
 8003c8e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d107      	bne.n	8003ca8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0210 	bic.w	r2, r2, #16
 8003ca6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr

08003cc0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f7ff ff66 	bl	8003bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ce0:	bf00      	nop
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b21      	cmp	r3, #33	; 0x21
 8003cfa:	d13e      	bne.n	8003d7a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d04:	d114      	bne.n	8003d30 <UART_Transmit_IT+0x48>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d110      	bne.n	8003d30 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d22:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	1c9a      	adds	r2, r3, #2
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	621a      	str	r2, [r3, #32]
 8003d2e:	e008      	b.n	8003d42 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	1c59      	adds	r1, r3, #1
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6211      	str	r1, [r2, #32]
 8003d3a:	781a      	ldrb	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	4619      	mov	r1, r3
 8003d50:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10f      	bne.n	8003d76 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	e000      	b.n	8003d7c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d7a:	2302      	movs	r3, #2
  }
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr

08003d86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b082      	sub	sp, #8
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff feee 	bl	8003b88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b086      	sub	sp, #24
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b22      	cmp	r3, #34	; 0x22
 8003dc8:	f040 8099 	bne.w	8003efe <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd4:	d117      	bne.n	8003e06 <UART_Receive_IT+0x50>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d113      	bne.n	8003e06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	1c9a      	adds	r2, r3, #2
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	629a      	str	r2, [r3, #40]	; 0x28
 8003e04:	e026      	b.n	8003e54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e18:	d007      	beq.n	8003e2a <UART_Receive_IT+0x74>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10a      	bne.n	8003e38 <UART_Receive_IT+0x82>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	701a      	strb	r2, [r3, #0]
 8003e36:	e008      	b.n	8003e4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	4619      	mov	r1, r3
 8003e62:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d148      	bne.n	8003efa <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0220 	bic.w	r2, r2, #32
 8003e76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695a      	ldr	r2, [r3, #20]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0201 	bic.w	r2, r2, #1
 8003e96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d123      	bne.n	8003ef0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0210 	bic.w	r2, r2, #16
 8003ebc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b10      	cmp	r3, #16
 8003eca:	d10a      	bne.n	8003ee2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ecc:	2300      	movs	r3, #0
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff fe68 	bl	8003bbe <HAL_UARTEx_RxEventCallback>
 8003eee:	e002      	b.n	8003ef6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7ff fe52 	bl	8003b9a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	e002      	b.n	8003f00 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	e000      	b.n	8003f00 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003efe:	2302      	movs	r3, #2
  }
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f42:	f023 030c 	bic.w	r3, r3, #12
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6812      	ldr	r2, [r2, #0]
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a2c      	ldr	r2, [pc, #176]	; (800401c <UART_SetConfig+0x114>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d103      	bne.n	8003f78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f70:	f7fe fbf0 	bl	8002754 <HAL_RCC_GetPCLK2Freq>
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	e002      	b.n	8003f7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f78:	f7fe fbd8 	bl	800272c <HAL_RCC_GetPCLK1Freq>
 8003f7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	009a      	lsls	r2, r3, #2
 8003f88:	441a      	add	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f94:	4a22      	ldr	r2, [pc, #136]	; (8004020 <UART_SetConfig+0x118>)
 8003f96:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	0119      	lsls	r1, r3, #4
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009a      	lsls	r2, r3, #2
 8003fa8:	441a      	add	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fb4:	4b1a      	ldr	r3, [pc, #104]	; (8004020 <UART_SetConfig+0x118>)
 8003fb6:	fba3 0302 	umull	r0, r3, r3, r2
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	2064      	movs	r0, #100	; 0x64
 8003fbe:	fb00 f303 	mul.w	r3, r0, r3
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	3332      	adds	r3, #50	; 0x32
 8003fc8:	4a15      	ldr	r2, [pc, #84]	; (8004020 <UART_SetConfig+0x118>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fd4:	4419      	add	r1, r3
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	009a      	lsls	r2, r3, #2
 8003fe0:	441a      	add	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fec:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <UART_SetConfig+0x118>)
 8003fee:	fba3 0302 	umull	r0, r3, r3, r2
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	2064      	movs	r0, #100	; 0x64
 8003ff6:	fb00 f303 	mul.w	r3, r0, r3
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	3332      	adds	r3, #50	; 0x32
 8004000:	4a07      	ldr	r2, [pc, #28]	; (8004020 <UART_SetConfig+0x118>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	f003 020f 	and.w	r2, r3, #15
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	440a      	add	r2, r1
 8004012:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004014:	bf00      	nop
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40013800 	.word	0x40013800
 8004020:	51eb851f 	.word	0x51eb851f

08004024 <__errno>:
 8004024:	4b01      	ldr	r3, [pc, #4]	; (800402c <__errno+0x8>)
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	20000060 	.word	0x20000060

08004030 <__libc_init_array>:
 8004030:	b570      	push	{r4, r5, r6, lr}
 8004032:	2600      	movs	r6, #0
 8004034:	4d0c      	ldr	r5, [pc, #48]	; (8004068 <__libc_init_array+0x38>)
 8004036:	4c0d      	ldr	r4, [pc, #52]	; (800406c <__libc_init_array+0x3c>)
 8004038:	1b64      	subs	r4, r4, r5
 800403a:	10a4      	asrs	r4, r4, #2
 800403c:	42a6      	cmp	r6, r4
 800403e:	d109      	bne.n	8004054 <__libc_init_array+0x24>
 8004040:	f000 fc5c 	bl	80048fc <_init>
 8004044:	2600      	movs	r6, #0
 8004046:	4d0a      	ldr	r5, [pc, #40]	; (8004070 <__libc_init_array+0x40>)
 8004048:	4c0a      	ldr	r4, [pc, #40]	; (8004074 <__libc_init_array+0x44>)
 800404a:	1b64      	subs	r4, r4, r5
 800404c:	10a4      	asrs	r4, r4, #2
 800404e:	42a6      	cmp	r6, r4
 8004050:	d105      	bne.n	800405e <__libc_init_array+0x2e>
 8004052:	bd70      	pop	{r4, r5, r6, pc}
 8004054:	f855 3b04 	ldr.w	r3, [r5], #4
 8004058:	4798      	blx	r3
 800405a:	3601      	adds	r6, #1
 800405c:	e7ee      	b.n	800403c <__libc_init_array+0xc>
 800405e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004062:	4798      	blx	r3
 8004064:	3601      	adds	r6, #1
 8004066:	e7f2      	b.n	800404e <__libc_init_array+0x1e>
 8004068:	08004a7c 	.word	0x08004a7c
 800406c:	08004a7c 	.word	0x08004a7c
 8004070:	08004a7c 	.word	0x08004a7c
 8004074:	08004a80 	.word	0x08004a80

08004078 <memset>:
 8004078:	4603      	mov	r3, r0
 800407a:	4402      	add	r2, r0
 800407c:	4293      	cmp	r3, r2
 800407e:	d100      	bne.n	8004082 <memset+0xa>
 8004080:	4770      	bx	lr
 8004082:	f803 1b01 	strb.w	r1, [r3], #1
 8004086:	e7f9      	b.n	800407c <memset+0x4>

08004088 <siprintf>:
 8004088:	b40e      	push	{r1, r2, r3}
 800408a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800408e:	b500      	push	{lr}
 8004090:	b09c      	sub	sp, #112	; 0x70
 8004092:	ab1d      	add	r3, sp, #116	; 0x74
 8004094:	9002      	str	r0, [sp, #8]
 8004096:	9006      	str	r0, [sp, #24]
 8004098:	9107      	str	r1, [sp, #28]
 800409a:	9104      	str	r1, [sp, #16]
 800409c:	4808      	ldr	r0, [pc, #32]	; (80040c0 <siprintf+0x38>)
 800409e:	4909      	ldr	r1, [pc, #36]	; (80040c4 <siprintf+0x3c>)
 80040a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80040a4:	9105      	str	r1, [sp, #20]
 80040a6:	6800      	ldr	r0, [r0, #0]
 80040a8:	a902      	add	r1, sp, #8
 80040aa:	9301      	str	r3, [sp, #4]
 80040ac:	f000 f868 	bl	8004180 <_svfiprintf_r>
 80040b0:	2200      	movs	r2, #0
 80040b2:	9b02      	ldr	r3, [sp, #8]
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	b01c      	add	sp, #112	; 0x70
 80040b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80040bc:	b003      	add	sp, #12
 80040be:	4770      	bx	lr
 80040c0:	20000060 	.word	0x20000060
 80040c4:	ffff0208 	.word	0xffff0208

080040c8 <__ssputs_r>:
 80040c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040cc:	688e      	ldr	r6, [r1, #8]
 80040ce:	4682      	mov	sl, r0
 80040d0:	429e      	cmp	r6, r3
 80040d2:	460c      	mov	r4, r1
 80040d4:	4690      	mov	r8, r2
 80040d6:	461f      	mov	r7, r3
 80040d8:	d838      	bhi.n	800414c <__ssputs_r+0x84>
 80040da:	898a      	ldrh	r2, [r1, #12]
 80040dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040e0:	d032      	beq.n	8004148 <__ssputs_r+0x80>
 80040e2:	6825      	ldr	r5, [r4, #0]
 80040e4:	6909      	ldr	r1, [r1, #16]
 80040e6:	3301      	adds	r3, #1
 80040e8:	eba5 0901 	sub.w	r9, r5, r1
 80040ec:	6965      	ldr	r5, [r4, #20]
 80040ee:	444b      	add	r3, r9
 80040f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040f8:	106d      	asrs	r5, r5, #1
 80040fa:	429d      	cmp	r5, r3
 80040fc:	bf38      	it	cc
 80040fe:	461d      	movcc	r5, r3
 8004100:	0553      	lsls	r3, r2, #21
 8004102:	d531      	bpl.n	8004168 <__ssputs_r+0xa0>
 8004104:	4629      	mov	r1, r5
 8004106:	f000 fb53 	bl	80047b0 <_malloc_r>
 800410a:	4606      	mov	r6, r0
 800410c:	b950      	cbnz	r0, 8004124 <__ssputs_r+0x5c>
 800410e:	230c      	movs	r3, #12
 8004110:	f04f 30ff 	mov.w	r0, #4294967295
 8004114:	f8ca 3000 	str.w	r3, [sl]
 8004118:	89a3      	ldrh	r3, [r4, #12]
 800411a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800411e:	81a3      	strh	r3, [r4, #12]
 8004120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004124:	464a      	mov	r2, r9
 8004126:	6921      	ldr	r1, [r4, #16]
 8004128:	f000 face 	bl	80046c8 <memcpy>
 800412c:	89a3      	ldrh	r3, [r4, #12]
 800412e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004136:	81a3      	strh	r3, [r4, #12]
 8004138:	6126      	str	r6, [r4, #16]
 800413a:	444e      	add	r6, r9
 800413c:	6026      	str	r6, [r4, #0]
 800413e:	463e      	mov	r6, r7
 8004140:	6165      	str	r5, [r4, #20]
 8004142:	eba5 0509 	sub.w	r5, r5, r9
 8004146:	60a5      	str	r5, [r4, #8]
 8004148:	42be      	cmp	r6, r7
 800414a:	d900      	bls.n	800414e <__ssputs_r+0x86>
 800414c:	463e      	mov	r6, r7
 800414e:	4632      	mov	r2, r6
 8004150:	4641      	mov	r1, r8
 8004152:	6820      	ldr	r0, [r4, #0]
 8004154:	f000 fac6 	bl	80046e4 <memmove>
 8004158:	68a3      	ldr	r3, [r4, #8]
 800415a:	6822      	ldr	r2, [r4, #0]
 800415c:	1b9b      	subs	r3, r3, r6
 800415e:	4432      	add	r2, r6
 8004160:	2000      	movs	r0, #0
 8004162:	60a3      	str	r3, [r4, #8]
 8004164:	6022      	str	r2, [r4, #0]
 8004166:	e7db      	b.n	8004120 <__ssputs_r+0x58>
 8004168:	462a      	mov	r2, r5
 800416a:	f000 fb7b 	bl	8004864 <_realloc_r>
 800416e:	4606      	mov	r6, r0
 8004170:	2800      	cmp	r0, #0
 8004172:	d1e1      	bne.n	8004138 <__ssputs_r+0x70>
 8004174:	4650      	mov	r0, sl
 8004176:	6921      	ldr	r1, [r4, #16]
 8004178:	f000 face 	bl	8004718 <_free_r>
 800417c:	e7c7      	b.n	800410e <__ssputs_r+0x46>
	...

08004180 <_svfiprintf_r>:
 8004180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004184:	4698      	mov	r8, r3
 8004186:	898b      	ldrh	r3, [r1, #12]
 8004188:	4607      	mov	r7, r0
 800418a:	061b      	lsls	r3, r3, #24
 800418c:	460d      	mov	r5, r1
 800418e:	4614      	mov	r4, r2
 8004190:	b09d      	sub	sp, #116	; 0x74
 8004192:	d50e      	bpl.n	80041b2 <_svfiprintf_r+0x32>
 8004194:	690b      	ldr	r3, [r1, #16]
 8004196:	b963      	cbnz	r3, 80041b2 <_svfiprintf_r+0x32>
 8004198:	2140      	movs	r1, #64	; 0x40
 800419a:	f000 fb09 	bl	80047b0 <_malloc_r>
 800419e:	6028      	str	r0, [r5, #0]
 80041a0:	6128      	str	r0, [r5, #16]
 80041a2:	b920      	cbnz	r0, 80041ae <_svfiprintf_r+0x2e>
 80041a4:	230c      	movs	r3, #12
 80041a6:	603b      	str	r3, [r7, #0]
 80041a8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ac:	e0d1      	b.n	8004352 <_svfiprintf_r+0x1d2>
 80041ae:	2340      	movs	r3, #64	; 0x40
 80041b0:	616b      	str	r3, [r5, #20]
 80041b2:	2300      	movs	r3, #0
 80041b4:	9309      	str	r3, [sp, #36]	; 0x24
 80041b6:	2320      	movs	r3, #32
 80041b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041bc:	2330      	movs	r3, #48	; 0x30
 80041be:	f04f 0901 	mov.w	r9, #1
 80041c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80041c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800436c <_svfiprintf_r+0x1ec>
 80041ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041ce:	4623      	mov	r3, r4
 80041d0:	469a      	mov	sl, r3
 80041d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041d6:	b10a      	cbz	r2, 80041dc <_svfiprintf_r+0x5c>
 80041d8:	2a25      	cmp	r2, #37	; 0x25
 80041da:	d1f9      	bne.n	80041d0 <_svfiprintf_r+0x50>
 80041dc:	ebba 0b04 	subs.w	fp, sl, r4
 80041e0:	d00b      	beq.n	80041fa <_svfiprintf_r+0x7a>
 80041e2:	465b      	mov	r3, fp
 80041e4:	4622      	mov	r2, r4
 80041e6:	4629      	mov	r1, r5
 80041e8:	4638      	mov	r0, r7
 80041ea:	f7ff ff6d 	bl	80040c8 <__ssputs_r>
 80041ee:	3001      	adds	r0, #1
 80041f0:	f000 80aa 	beq.w	8004348 <_svfiprintf_r+0x1c8>
 80041f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041f6:	445a      	add	r2, fp
 80041f8:	9209      	str	r2, [sp, #36]	; 0x24
 80041fa:	f89a 3000 	ldrb.w	r3, [sl]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 80a2 	beq.w	8004348 <_svfiprintf_r+0x1c8>
 8004204:	2300      	movs	r3, #0
 8004206:	f04f 32ff 	mov.w	r2, #4294967295
 800420a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800420e:	f10a 0a01 	add.w	sl, sl, #1
 8004212:	9304      	str	r3, [sp, #16]
 8004214:	9307      	str	r3, [sp, #28]
 8004216:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800421a:	931a      	str	r3, [sp, #104]	; 0x68
 800421c:	4654      	mov	r4, sl
 800421e:	2205      	movs	r2, #5
 8004220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004224:	4851      	ldr	r0, [pc, #324]	; (800436c <_svfiprintf_r+0x1ec>)
 8004226:	f000 fa41 	bl	80046ac <memchr>
 800422a:	9a04      	ldr	r2, [sp, #16]
 800422c:	b9d8      	cbnz	r0, 8004266 <_svfiprintf_r+0xe6>
 800422e:	06d0      	lsls	r0, r2, #27
 8004230:	bf44      	itt	mi
 8004232:	2320      	movmi	r3, #32
 8004234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004238:	0711      	lsls	r1, r2, #28
 800423a:	bf44      	itt	mi
 800423c:	232b      	movmi	r3, #43	; 0x2b
 800423e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004242:	f89a 3000 	ldrb.w	r3, [sl]
 8004246:	2b2a      	cmp	r3, #42	; 0x2a
 8004248:	d015      	beq.n	8004276 <_svfiprintf_r+0xf6>
 800424a:	4654      	mov	r4, sl
 800424c:	2000      	movs	r0, #0
 800424e:	f04f 0c0a 	mov.w	ip, #10
 8004252:	9a07      	ldr	r2, [sp, #28]
 8004254:	4621      	mov	r1, r4
 8004256:	f811 3b01 	ldrb.w	r3, [r1], #1
 800425a:	3b30      	subs	r3, #48	; 0x30
 800425c:	2b09      	cmp	r3, #9
 800425e:	d94e      	bls.n	80042fe <_svfiprintf_r+0x17e>
 8004260:	b1b0      	cbz	r0, 8004290 <_svfiprintf_r+0x110>
 8004262:	9207      	str	r2, [sp, #28]
 8004264:	e014      	b.n	8004290 <_svfiprintf_r+0x110>
 8004266:	eba0 0308 	sub.w	r3, r0, r8
 800426a:	fa09 f303 	lsl.w	r3, r9, r3
 800426e:	4313      	orrs	r3, r2
 8004270:	46a2      	mov	sl, r4
 8004272:	9304      	str	r3, [sp, #16]
 8004274:	e7d2      	b.n	800421c <_svfiprintf_r+0x9c>
 8004276:	9b03      	ldr	r3, [sp, #12]
 8004278:	1d19      	adds	r1, r3, #4
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	9103      	str	r1, [sp, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	bfbb      	ittet	lt
 8004282:	425b      	neglt	r3, r3
 8004284:	f042 0202 	orrlt.w	r2, r2, #2
 8004288:	9307      	strge	r3, [sp, #28]
 800428a:	9307      	strlt	r3, [sp, #28]
 800428c:	bfb8      	it	lt
 800428e:	9204      	strlt	r2, [sp, #16]
 8004290:	7823      	ldrb	r3, [r4, #0]
 8004292:	2b2e      	cmp	r3, #46	; 0x2e
 8004294:	d10c      	bne.n	80042b0 <_svfiprintf_r+0x130>
 8004296:	7863      	ldrb	r3, [r4, #1]
 8004298:	2b2a      	cmp	r3, #42	; 0x2a
 800429a:	d135      	bne.n	8004308 <_svfiprintf_r+0x188>
 800429c:	9b03      	ldr	r3, [sp, #12]
 800429e:	3402      	adds	r4, #2
 80042a0:	1d1a      	adds	r2, r3, #4
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	9203      	str	r2, [sp, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	bfb8      	it	lt
 80042aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80042ae:	9305      	str	r3, [sp, #20]
 80042b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800437c <_svfiprintf_r+0x1fc>
 80042b4:	2203      	movs	r2, #3
 80042b6:	4650      	mov	r0, sl
 80042b8:	7821      	ldrb	r1, [r4, #0]
 80042ba:	f000 f9f7 	bl	80046ac <memchr>
 80042be:	b140      	cbz	r0, 80042d2 <_svfiprintf_r+0x152>
 80042c0:	2340      	movs	r3, #64	; 0x40
 80042c2:	eba0 000a 	sub.w	r0, r0, sl
 80042c6:	fa03 f000 	lsl.w	r0, r3, r0
 80042ca:	9b04      	ldr	r3, [sp, #16]
 80042cc:	3401      	adds	r4, #1
 80042ce:	4303      	orrs	r3, r0
 80042d0:	9304      	str	r3, [sp, #16]
 80042d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042d6:	2206      	movs	r2, #6
 80042d8:	4825      	ldr	r0, [pc, #148]	; (8004370 <_svfiprintf_r+0x1f0>)
 80042da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042de:	f000 f9e5 	bl	80046ac <memchr>
 80042e2:	2800      	cmp	r0, #0
 80042e4:	d038      	beq.n	8004358 <_svfiprintf_r+0x1d8>
 80042e6:	4b23      	ldr	r3, [pc, #140]	; (8004374 <_svfiprintf_r+0x1f4>)
 80042e8:	bb1b      	cbnz	r3, 8004332 <_svfiprintf_r+0x1b2>
 80042ea:	9b03      	ldr	r3, [sp, #12]
 80042ec:	3307      	adds	r3, #7
 80042ee:	f023 0307 	bic.w	r3, r3, #7
 80042f2:	3308      	adds	r3, #8
 80042f4:	9303      	str	r3, [sp, #12]
 80042f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042f8:	4433      	add	r3, r6
 80042fa:	9309      	str	r3, [sp, #36]	; 0x24
 80042fc:	e767      	b.n	80041ce <_svfiprintf_r+0x4e>
 80042fe:	460c      	mov	r4, r1
 8004300:	2001      	movs	r0, #1
 8004302:	fb0c 3202 	mla	r2, ip, r2, r3
 8004306:	e7a5      	b.n	8004254 <_svfiprintf_r+0xd4>
 8004308:	2300      	movs	r3, #0
 800430a:	f04f 0c0a 	mov.w	ip, #10
 800430e:	4619      	mov	r1, r3
 8004310:	3401      	adds	r4, #1
 8004312:	9305      	str	r3, [sp, #20]
 8004314:	4620      	mov	r0, r4
 8004316:	f810 2b01 	ldrb.w	r2, [r0], #1
 800431a:	3a30      	subs	r2, #48	; 0x30
 800431c:	2a09      	cmp	r2, #9
 800431e:	d903      	bls.n	8004328 <_svfiprintf_r+0x1a8>
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0c5      	beq.n	80042b0 <_svfiprintf_r+0x130>
 8004324:	9105      	str	r1, [sp, #20]
 8004326:	e7c3      	b.n	80042b0 <_svfiprintf_r+0x130>
 8004328:	4604      	mov	r4, r0
 800432a:	2301      	movs	r3, #1
 800432c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004330:	e7f0      	b.n	8004314 <_svfiprintf_r+0x194>
 8004332:	ab03      	add	r3, sp, #12
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	462a      	mov	r2, r5
 8004338:	4638      	mov	r0, r7
 800433a:	4b0f      	ldr	r3, [pc, #60]	; (8004378 <_svfiprintf_r+0x1f8>)
 800433c:	a904      	add	r1, sp, #16
 800433e:	f3af 8000 	nop.w
 8004342:	1c42      	adds	r2, r0, #1
 8004344:	4606      	mov	r6, r0
 8004346:	d1d6      	bne.n	80042f6 <_svfiprintf_r+0x176>
 8004348:	89ab      	ldrh	r3, [r5, #12]
 800434a:	065b      	lsls	r3, r3, #25
 800434c:	f53f af2c 	bmi.w	80041a8 <_svfiprintf_r+0x28>
 8004350:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004352:	b01d      	add	sp, #116	; 0x74
 8004354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004358:	ab03      	add	r3, sp, #12
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	462a      	mov	r2, r5
 800435e:	4638      	mov	r0, r7
 8004360:	4b05      	ldr	r3, [pc, #20]	; (8004378 <_svfiprintf_r+0x1f8>)
 8004362:	a904      	add	r1, sp, #16
 8004364:	f000 f87c 	bl	8004460 <_printf_i>
 8004368:	e7eb      	b.n	8004342 <_svfiprintf_r+0x1c2>
 800436a:	bf00      	nop
 800436c:	08004a48 	.word	0x08004a48
 8004370:	08004a52 	.word	0x08004a52
 8004374:	00000000 	.word	0x00000000
 8004378:	080040c9 	.word	0x080040c9
 800437c:	08004a4e 	.word	0x08004a4e

08004380 <_printf_common>:
 8004380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004384:	4616      	mov	r6, r2
 8004386:	4699      	mov	r9, r3
 8004388:	688a      	ldr	r2, [r1, #8]
 800438a:	690b      	ldr	r3, [r1, #16]
 800438c:	4607      	mov	r7, r0
 800438e:	4293      	cmp	r3, r2
 8004390:	bfb8      	it	lt
 8004392:	4613      	movlt	r3, r2
 8004394:	6033      	str	r3, [r6, #0]
 8004396:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800439a:	460c      	mov	r4, r1
 800439c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043a0:	b10a      	cbz	r2, 80043a6 <_printf_common+0x26>
 80043a2:	3301      	adds	r3, #1
 80043a4:	6033      	str	r3, [r6, #0]
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	0699      	lsls	r1, r3, #26
 80043aa:	bf42      	ittt	mi
 80043ac:	6833      	ldrmi	r3, [r6, #0]
 80043ae:	3302      	addmi	r3, #2
 80043b0:	6033      	strmi	r3, [r6, #0]
 80043b2:	6825      	ldr	r5, [r4, #0]
 80043b4:	f015 0506 	ands.w	r5, r5, #6
 80043b8:	d106      	bne.n	80043c8 <_printf_common+0x48>
 80043ba:	f104 0a19 	add.w	sl, r4, #25
 80043be:	68e3      	ldr	r3, [r4, #12]
 80043c0:	6832      	ldr	r2, [r6, #0]
 80043c2:	1a9b      	subs	r3, r3, r2
 80043c4:	42ab      	cmp	r3, r5
 80043c6:	dc28      	bgt.n	800441a <_printf_common+0x9a>
 80043c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043cc:	1e13      	subs	r3, r2, #0
 80043ce:	6822      	ldr	r2, [r4, #0]
 80043d0:	bf18      	it	ne
 80043d2:	2301      	movne	r3, #1
 80043d4:	0692      	lsls	r2, r2, #26
 80043d6:	d42d      	bmi.n	8004434 <_printf_common+0xb4>
 80043d8:	4649      	mov	r1, r9
 80043da:	4638      	mov	r0, r7
 80043dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043e0:	47c0      	blx	r8
 80043e2:	3001      	adds	r0, #1
 80043e4:	d020      	beq.n	8004428 <_printf_common+0xa8>
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	68e5      	ldr	r5, [r4, #12]
 80043ea:	f003 0306 	and.w	r3, r3, #6
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	bf18      	it	ne
 80043f2:	2500      	movne	r5, #0
 80043f4:	6832      	ldr	r2, [r6, #0]
 80043f6:	f04f 0600 	mov.w	r6, #0
 80043fa:	68a3      	ldr	r3, [r4, #8]
 80043fc:	bf08      	it	eq
 80043fe:	1aad      	subeq	r5, r5, r2
 8004400:	6922      	ldr	r2, [r4, #16]
 8004402:	bf08      	it	eq
 8004404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004408:	4293      	cmp	r3, r2
 800440a:	bfc4      	itt	gt
 800440c:	1a9b      	subgt	r3, r3, r2
 800440e:	18ed      	addgt	r5, r5, r3
 8004410:	341a      	adds	r4, #26
 8004412:	42b5      	cmp	r5, r6
 8004414:	d11a      	bne.n	800444c <_printf_common+0xcc>
 8004416:	2000      	movs	r0, #0
 8004418:	e008      	b.n	800442c <_printf_common+0xac>
 800441a:	2301      	movs	r3, #1
 800441c:	4652      	mov	r2, sl
 800441e:	4649      	mov	r1, r9
 8004420:	4638      	mov	r0, r7
 8004422:	47c0      	blx	r8
 8004424:	3001      	adds	r0, #1
 8004426:	d103      	bne.n	8004430 <_printf_common+0xb0>
 8004428:	f04f 30ff 	mov.w	r0, #4294967295
 800442c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004430:	3501      	adds	r5, #1
 8004432:	e7c4      	b.n	80043be <_printf_common+0x3e>
 8004434:	2030      	movs	r0, #48	; 0x30
 8004436:	18e1      	adds	r1, r4, r3
 8004438:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004442:	4422      	add	r2, r4
 8004444:	3302      	adds	r3, #2
 8004446:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800444a:	e7c5      	b.n	80043d8 <_printf_common+0x58>
 800444c:	2301      	movs	r3, #1
 800444e:	4622      	mov	r2, r4
 8004450:	4649      	mov	r1, r9
 8004452:	4638      	mov	r0, r7
 8004454:	47c0      	blx	r8
 8004456:	3001      	adds	r0, #1
 8004458:	d0e6      	beq.n	8004428 <_printf_common+0xa8>
 800445a:	3601      	adds	r6, #1
 800445c:	e7d9      	b.n	8004412 <_printf_common+0x92>
	...

08004460 <_printf_i>:
 8004460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004464:	460c      	mov	r4, r1
 8004466:	7e27      	ldrb	r7, [r4, #24]
 8004468:	4691      	mov	r9, r2
 800446a:	2f78      	cmp	r7, #120	; 0x78
 800446c:	4680      	mov	r8, r0
 800446e:	469a      	mov	sl, r3
 8004470:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004472:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004476:	d807      	bhi.n	8004488 <_printf_i+0x28>
 8004478:	2f62      	cmp	r7, #98	; 0x62
 800447a:	d80a      	bhi.n	8004492 <_printf_i+0x32>
 800447c:	2f00      	cmp	r7, #0
 800447e:	f000 80d9 	beq.w	8004634 <_printf_i+0x1d4>
 8004482:	2f58      	cmp	r7, #88	; 0x58
 8004484:	f000 80a4 	beq.w	80045d0 <_printf_i+0x170>
 8004488:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800448c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004490:	e03a      	b.n	8004508 <_printf_i+0xa8>
 8004492:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004496:	2b15      	cmp	r3, #21
 8004498:	d8f6      	bhi.n	8004488 <_printf_i+0x28>
 800449a:	a001      	add	r0, pc, #4	; (adr r0, 80044a0 <_printf_i+0x40>)
 800449c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80044a0:	080044f9 	.word	0x080044f9
 80044a4:	0800450d 	.word	0x0800450d
 80044a8:	08004489 	.word	0x08004489
 80044ac:	08004489 	.word	0x08004489
 80044b0:	08004489 	.word	0x08004489
 80044b4:	08004489 	.word	0x08004489
 80044b8:	0800450d 	.word	0x0800450d
 80044bc:	08004489 	.word	0x08004489
 80044c0:	08004489 	.word	0x08004489
 80044c4:	08004489 	.word	0x08004489
 80044c8:	08004489 	.word	0x08004489
 80044cc:	0800461b 	.word	0x0800461b
 80044d0:	0800453d 	.word	0x0800453d
 80044d4:	080045fd 	.word	0x080045fd
 80044d8:	08004489 	.word	0x08004489
 80044dc:	08004489 	.word	0x08004489
 80044e0:	0800463d 	.word	0x0800463d
 80044e4:	08004489 	.word	0x08004489
 80044e8:	0800453d 	.word	0x0800453d
 80044ec:	08004489 	.word	0x08004489
 80044f0:	08004489 	.word	0x08004489
 80044f4:	08004605 	.word	0x08004605
 80044f8:	680b      	ldr	r3, [r1, #0]
 80044fa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044fe:	1d1a      	adds	r2, r3, #4
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	600a      	str	r2, [r1, #0]
 8004504:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004508:	2301      	movs	r3, #1
 800450a:	e0a4      	b.n	8004656 <_printf_i+0x1f6>
 800450c:	6825      	ldr	r5, [r4, #0]
 800450e:	6808      	ldr	r0, [r1, #0]
 8004510:	062e      	lsls	r6, r5, #24
 8004512:	f100 0304 	add.w	r3, r0, #4
 8004516:	d50a      	bpl.n	800452e <_printf_i+0xce>
 8004518:	6805      	ldr	r5, [r0, #0]
 800451a:	600b      	str	r3, [r1, #0]
 800451c:	2d00      	cmp	r5, #0
 800451e:	da03      	bge.n	8004528 <_printf_i+0xc8>
 8004520:	232d      	movs	r3, #45	; 0x2d
 8004522:	426d      	negs	r5, r5
 8004524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004528:	230a      	movs	r3, #10
 800452a:	485e      	ldr	r0, [pc, #376]	; (80046a4 <_printf_i+0x244>)
 800452c:	e019      	b.n	8004562 <_printf_i+0x102>
 800452e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004532:	6805      	ldr	r5, [r0, #0]
 8004534:	600b      	str	r3, [r1, #0]
 8004536:	bf18      	it	ne
 8004538:	b22d      	sxthne	r5, r5
 800453a:	e7ef      	b.n	800451c <_printf_i+0xbc>
 800453c:	680b      	ldr	r3, [r1, #0]
 800453e:	6825      	ldr	r5, [r4, #0]
 8004540:	1d18      	adds	r0, r3, #4
 8004542:	6008      	str	r0, [r1, #0]
 8004544:	0628      	lsls	r0, r5, #24
 8004546:	d501      	bpl.n	800454c <_printf_i+0xec>
 8004548:	681d      	ldr	r5, [r3, #0]
 800454a:	e002      	b.n	8004552 <_printf_i+0xf2>
 800454c:	0669      	lsls	r1, r5, #25
 800454e:	d5fb      	bpl.n	8004548 <_printf_i+0xe8>
 8004550:	881d      	ldrh	r5, [r3, #0]
 8004552:	2f6f      	cmp	r7, #111	; 0x6f
 8004554:	bf0c      	ite	eq
 8004556:	2308      	moveq	r3, #8
 8004558:	230a      	movne	r3, #10
 800455a:	4852      	ldr	r0, [pc, #328]	; (80046a4 <_printf_i+0x244>)
 800455c:	2100      	movs	r1, #0
 800455e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004562:	6866      	ldr	r6, [r4, #4]
 8004564:	2e00      	cmp	r6, #0
 8004566:	bfa8      	it	ge
 8004568:	6821      	ldrge	r1, [r4, #0]
 800456a:	60a6      	str	r6, [r4, #8]
 800456c:	bfa4      	itt	ge
 800456e:	f021 0104 	bicge.w	r1, r1, #4
 8004572:	6021      	strge	r1, [r4, #0]
 8004574:	b90d      	cbnz	r5, 800457a <_printf_i+0x11a>
 8004576:	2e00      	cmp	r6, #0
 8004578:	d04d      	beq.n	8004616 <_printf_i+0x1b6>
 800457a:	4616      	mov	r6, r2
 800457c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004580:	fb03 5711 	mls	r7, r3, r1, r5
 8004584:	5dc7      	ldrb	r7, [r0, r7]
 8004586:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800458a:	462f      	mov	r7, r5
 800458c:	42bb      	cmp	r3, r7
 800458e:	460d      	mov	r5, r1
 8004590:	d9f4      	bls.n	800457c <_printf_i+0x11c>
 8004592:	2b08      	cmp	r3, #8
 8004594:	d10b      	bne.n	80045ae <_printf_i+0x14e>
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	07df      	lsls	r7, r3, #31
 800459a:	d508      	bpl.n	80045ae <_printf_i+0x14e>
 800459c:	6923      	ldr	r3, [r4, #16]
 800459e:	6861      	ldr	r1, [r4, #4]
 80045a0:	4299      	cmp	r1, r3
 80045a2:	bfde      	ittt	le
 80045a4:	2330      	movle	r3, #48	; 0x30
 80045a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045ae:	1b92      	subs	r2, r2, r6
 80045b0:	6122      	str	r2, [r4, #16]
 80045b2:	464b      	mov	r3, r9
 80045b4:	4621      	mov	r1, r4
 80045b6:	4640      	mov	r0, r8
 80045b8:	f8cd a000 	str.w	sl, [sp]
 80045bc:	aa03      	add	r2, sp, #12
 80045be:	f7ff fedf 	bl	8004380 <_printf_common>
 80045c2:	3001      	adds	r0, #1
 80045c4:	d14c      	bne.n	8004660 <_printf_i+0x200>
 80045c6:	f04f 30ff 	mov.w	r0, #4294967295
 80045ca:	b004      	add	sp, #16
 80045cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045d0:	4834      	ldr	r0, [pc, #208]	; (80046a4 <_printf_i+0x244>)
 80045d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045d6:	680e      	ldr	r6, [r1, #0]
 80045d8:	6823      	ldr	r3, [r4, #0]
 80045da:	f856 5b04 	ldr.w	r5, [r6], #4
 80045de:	061f      	lsls	r7, r3, #24
 80045e0:	600e      	str	r6, [r1, #0]
 80045e2:	d514      	bpl.n	800460e <_printf_i+0x1ae>
 80045e4:	07d9      	lsls	r1, r3, #31
 80045e6:	bf44      	itt	mi
 80045e8:	f043 0320 	orrmi.w	r3, r3, #32
 80045ec:	6023      	strmi	r3, [r4, #0]
 80045ee:	b91d      	cbnz	r5, 80045f8 <_printf_i+0x198>
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	f023 0320 	bic.w	r3, r3, #32
 80045f6:	6023      	str	r3, [r4, #0]
 80045f8:	2310      	movs	r3, #16
 80045fa:	e7af      	b.n	800455c <_printf_i+0xfc>
 80045fc:	6823      	ldr	r3, [r4, #0]
 80045fe:	f043 0320 	orr.w	r3, r3, #32
 8004602:	6023      	str	r3, [r4, #0]
 8004604:	2378      	movs	r3, #120	; 0x78
 8004606:	4828      	ldr	r0, [pc, #160]	; (80046a8 <_printf_i+0x248>)
 8004608:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800460c:	e7e3      	b.n	80045d6 <_printf_i+0x176>
 800460e:	065e      	lsls	r6, r3, #25
 8004610:	bf48      	it	mi
 8004612:	b2ad      	uxthmi	r5, r5
 8004614:	e7e6      	b.n	80045e4 <_printf_i+0x184>
 8004616:	4616      	mov	r6, r2
 8004618:	e7bb      	b.n	8004592 <_printf_i+0x132>
 800461a:	680b      	ldr	r3, [r1, #0]
 800461c:	6826      	ldr	r6, [r4, #0]
 800461e:	1d1d      	adds	r5, r3, #4
 8004620:	6960      	ldr	r0, [r4, #20]
 8004622:	600d      	str	r5, [r1, #0]
 8004624:	0635      	lsls	r5, r6, #24
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	d501      	bpl.n	800462e <_printf_i+0x1ce>
 800462a:	6018      	str	r0, [r3, #0]
 800462c:	e002      	b.n	8004634 <_printf_i+0x1d4>
 800462e:	0671      	lsls	r1, r6, #25
 8004630:	d5fb      	bpl.n	800462a <_printf_i+0x1ca>
 8004632:	8018      	strh	r0, [r3, #0]
 8004634:	2300      	movs	r3, #0
 8004636:	4616      	mov	r6, r2
 8004638:	6123      	str	r3, [r4, #16]
 800463a:	e7ba      	b.n	80045b2 <_printf_i+0x152>
 800463c:	680b      	ldr	r3, [r1, #0]
 800463e:	1d1a      	adds	r2, r3, #4
 8004640:	600a      	str	r2, [r1, #0]
 8004642:	681e      	ldr	r6, [r3, #0]
 8004644:	2100      	movs	r1, #0
 8004646:	4630      	mov	r0, r6
 8004648:	6862      	ldr	r2, [r4, #4]
 800464a:	f000 f82f 	bl	80046ac <memchr>
 800464e:	b108      	cbz	r0, 8004654 <_printf_i+0x1f4>
 8004650:	1b80      	subs	r0, r0, r6
 8004652:	6060      	str	r0, [r4, #4]
 8004654:	6863      	ldr	r3, [r4, #4]
 8004656:	6123      	str	r3, [r4, #16]
 8004658:	2300      	movs	r3, #0
 800465a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800465e:	e7a8      	b.n	80045b2 <_printf_i+0x152>
 8004660:	4632      	mov	r2, r6
 8004662:	4649      	mov	r1, r9
 8004664:	4640      	mov	r0, r8
 8004666:	6923      	ldr	r3, [r4, #16]
 8004668:	47d0      	blx	sl
 800466a:	3001      	adds	r0, #1
 800466c:	d0ab      	beq.n	80045c6 <_printf_i+0x166>
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	079b      	lsls	r3, r3, #30
 8004672:	d413      	bmi.n	800469c <_printf_i+0x23c>
 8004674:	68e0      	ldr	r0, [r4, #12]
 8004676:	9b03      	ldr	r3, [sp, #12]
 8004678:	4298      	cmp	r0, r3
 800467a:	bfb8      	it	lt
 800467c:	4618      	movlt	r0, r3
 800467e:	e7a4      	b.n	80045ca <_printf_i+0x16a>
 8004680:	2301      	movs	r3, #1
 8004682:	4632      	mov	r2, r6
 8004684:	4649      	mov	r1, r9
 8004686:	4640      	mov	r0, r8
 8004688:	47d0      	blx	sl
 800468a:	3001      	adds	r0, #1
 800468c:	d09b      	beq.n	80045c6 <_printf_i+0x166>
 800468e:	3501      	adds	r5, #1
 8004690:	68e3      	ldr	r3, [r4, #12]
 8004692:	9903      	ldr	r1, [sp, #12]
 8004694:	1a5b      	subs	r3, r3, r1
 8004696:	42ab      	cmp	r3, r5
 8004698:	dcf2      	bgt.n	8004680 <_printf_i+0x220>
 800469a:	e7eb      	b.n	8004674 <_printf_i+0x214>
 800469c:	2500      	movs	r5, #0
 800469e:	f104 0619 	add.w	r6, r4, #25
 80046a2:	e7f5      	b.n	8004690 <_printf_i+0x230>
 80046a4:	08004a59 	.word	0x08004a59
 80046a8:	08004a6a 	.word	0x08004a6a

080046ac <memchr>:
 80046ac:	4603      	mov	r3, r0
 80046ae:	b510      	push	{r4, lr}
 80046b0:	b2c9      	uxtb	r1, r1
 80046b2:	4402      	add	r2, r0
 80046b4:	4293      	cmp	r3, r2
 80046b6:	4618      	mov	r0, r3
 80046b8:	d101      	bne.n	80046be <memchr+0x12>
 80046ba:	2000      	movs	r0, #0
 80046bc:	e003      	b.n	80046c6 <memchr+0x1a>
 80046be:	7804      	ldrb	r4, [r0, #0]
 80046c0:	3301      	adds	r3, #1
 80046c2:	428c      	cmp	r4, r1
 80046c4:	d1f6      	bne.n	80046b4 <memchr+0x8>
 80046c6:	bd10      	pop	{r4, pc}

080046c8 <memcpy>:
 80046c8:	440a      	add	r2, r1
 80046ca:	4291      	cmp	r1, r2
 80046cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80046d0:	d100      	bne.n	80046d4 <memcpy+0xc>
 80046d2:	4770      	bx	lr
 80046d4:	b510      	push	{r4, lr}
 80046d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046da:	4291      	cmp	r1, r2
 80046dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046e0:	d1f9      	bne.n	80046d6 <memcpy+0xe>
 80046e2:	bd10      	pop	{r4, pc}

080046e4 <memmove>:
 80046e4:	4288      	cmp	r0, r1
 80046e6:	b510      	push	{r4, lr}
 80046e8:	eb01 0402 	add.w	r4, r1, r2
 80046ec:	d902      	bls.n	80046f4 <memmove+0x10>
 80046ee:	4284      	cmp	r4, r0
 80046f0:	4623      	mov	r3, r4
 80046f2:	d807      	bhi.n	8004704 <memmove+0x20>
 80046f4:	1e43      	subs	r3, r0, #1
 80046f6:	42a1      	cmp	r1, r4
 80046f8:	d008      	beq.n	800470c <memmove+0x28>
 80046fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004702:	e7f8      	b.n	80046f6 <memmove+0x12>
 8004704:	4601      	mov	r1, r0
 8004706:	4402      	add	r2, r0
 8004708:	428a      	cmp	r2, r1
 800470a:	d100      	bne.n	800470e <memmove+0x2a>
 800470c:	bd10      	pop	{r4, pc}
 800470e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004712:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004716:	e7f7      	b.n	8004708 <memmove+0x24>

08004718 <_free_r>:
 8004718:	b538      	push	{r3, r4, r5, lr}
 800471a:	4605      	mov	r5, r0
 800471c:	2900      	cmp	r1, #0
 800471e:	d043      	beq.n	80047a8 <_free_r+0x90>
 8004720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004724:	1f0c      	subs	r4, r1, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	bfb8      	it	lt
 800472a:	18e4      	addlt	r4, r4, r3
 800472c:	f000 f8d0 	bl	80048d0 <__malloc_lock>
 8004730:	4a1e      	ldr	r2, [pc, #120]	; (80047ac <_free_r+0x94>)
 8004732:	6813      	ldr	r3, [r2, #0]
 8004734:	4610      	mov	r0, r2
 8004736:	b933      	cbnz	r3, 8004746 <_free_r+0x2e>
 8004738:	6063      	str	r3, [r4, #4]
 800473a:	6014      	str	r4, [r2, #0]
 800473c:	4628      	mov	r0, r5
 800473e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004742:	f000 b8cb 	b.w	80048dc <__malloc_unlock>
 8004746:	42a3      	cmp	r3, r4
 8004748:	d90a      	bls.n	8004760 <_free_r+0x48>
 800474a:	6821      	ldr	r1, [r4, #0]
 800474c:	1862      	adds	r2, r4, r1
 800474e:	4293      	cmp	r3, r2
 8004750:	bf01      	itttt	eq
 8004752:	681a      	ldreq	r2, [r3, #0]
 8004754:	685b      	ldreq	r3, [r3, #4]
 8004756:	1852      	addeq	r2, r2, r1
 8004758:	6022      	streq	r2, [r4, #0]
 800475a:	6063      	str	r3, [r4, #4]
 800475c:	6004      	str	r4, [r0, #0]
 800475e:	e7ed      	b.n	800473c <_free_r+0x24>
 8004760:	461a      	mov	r2, r3
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	b10b      	cbz	r3, 800476a <_free_r+0x52>
 8004766:	42a3      	cmp	r3, r4
 8004768:	d9fa      	bls.n	8004760 <_free_r+0x48>
 800476a:	6811      	ldr	r1, [r2, #0]
 800476c:	1850      	adds	r0, r2, r1
 800476e:	42a0      	cmp	r0, r4
 8004770:	d10b      	bne.n	800478a <_free_r+0x72>
 8004772:	6820      	ldr	r0, [r4, #0]
 8004774:	4401      	add	r1, r0
 8004776:	1850      	adds	r0, r2, r1
 8004778:	4283      	cmp	r3, r0
 800477a:	6011      	str	r1, [r2, #0]
 800477c:	d1de      	bne.n	800473c <_free_r+0x24>
 800477e:	6818      	ldr	r0, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	4401      	add	r1, r0
 8004784:	6011      	str	r1, [r2, #0]
 8004786:	6053      	str	r3, [r2, #4]
 8004788:	e7d8      	b.n	800473c <_free_r+0x24>
 800478a:	d902      	bls.n	8004792 <_free_r+0x7a>
 800478c:	230c      	movs	r3, #12
 800478e:	602b      	str	r3, [r5, #0]
 8004790:	e7d4      	b.n	800473c <_free_r+0x24>
 8004792:	6820      	ldr	r0, [r4, #0]
 8004794:	1821      	adds	r1, r4, r0
 8004796:	428b      	cmp	r3, r1
 8004798:	bf01      	itttt	eq
 800479a:	6819      	ldreq	r1, [r3, #0]
 800479c:	685b      	ldreq	r3, [r3, #4]
 800479e:	1809      	addeq	r1, r1, r0
 80047a0:	6021      	streq	r1, [r4, #0]
 80047a2:	6063      	str	r3, [r4, #4]
 80047a4:	6054      	str	r4, [r2, #4]
 80047a6:	e7c9      	b.n	800473c <_free_r+0x24>
 80047a8:	bd38      	pop	{r3, r4, r5, pc}
 80047aa:	bf00      	nop
 80047ac:	20000120 	.word	0x20000120

080047b0 <_malloc_r>:
 80047b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b2:	1ccd      	adds	r5, r1, #3
 80047b4:	f025 0503 	bic.w	r5, r5, #3
 80047b8:	3508      	adds	r5, #8
 80047ba:	2d0c      	cmp	r5, #12
 80047bc:	bf38      	it	cc
 80047be:	250c      	movcc	r5, #12
 80047c0:	2d00      	cmp	r5, #0
 80047c2:	4606      	mov	r6, r0
 80047c4:	db01      	blt.n	80047ca <_malloc_r+0x1a>
 80047c6:	42a9      	cmp	r1, r5
 80047c8:	d903      	bls.n	80047d2 <_malloc_r+0x22>
 80047ca:	230c      	movs	r3, #12
 80047cc:	6033      	str	r3, [r6, #0]
 80047ce:	2000      	movs	r0, #0
 80047d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047d2:	f000 f87d 	bl	80048d0 <__malloc_lock>
 80047d6:	4921      	ldr	r1, [pc, #132]	; (800485c <_malloc_r+0xac>)
 80047d8:	680a      	ldr	r2, [r1, #0]
 80047da:	4614      	mov	r4, r2
 80047dc:	b99c      	cbnz	r4, 8004806 <_malloc_r+0x56>
 80047de:	4f20      	ldr	r7, [pc, #128]	; (8004860 <_malloc_r+0xb0>)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	b923      	cbnz	r3, 80047ee <_malloc_r+0x3e>
 80047e4:	4621      	mov	r1, r4
 80047e6:	4630      	mov	r0, r6
 80047e8:	f000 f862 	bl	80048b0 <_sbrk_r>
 80047ec:	6038      	str	r0, [r7, #0]
 80047ee:	4629      	mov	r1, r5
 80047f0:	4630      	mov	r0, r6
 80047f2:	f000 f85d 	bl	80048b0 <_sbrk_r>
 80047f6:	1c43      	adds	r3, r0, #1
 80047f8:	d123      	bne.n	8004842 <_malloc_r+0x92>
 80047fa:	230c      	movs	r3, #12
 80047fc:	4630      	mov	r0, r6
 80047fe:	6033      	str	r3, [r6, #0]
 8004800:	f000 f86c 	bl	80048dc <__malloc_unlock>
 8004804:	e7e3      	b.n	80047ce <_malloc_r+0x1e>
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	1b5b      	subs	r3, r3, r5
 800480a:	d417      	bmi.n	800483c <_malloc_r+0x8c>
 800480c:	2b0b      	cmp	r3, #11
 800480e:	d903      	bls.n	8004818 <_malloc_r+0x68>
 8004810:	6023      	str	r3, [r4, #0]
 8004812:	441c      	add	r4, r3
 8004814:	6025      	str	r5, [r4, #0]
 8004816:	e004      	b.n	8004822 <_malloc_r+0x72>
 8004818:	6863      	ldr	r3, [r4, #4]
 800481a:	42a2      	cmp	r2, r4
 800481c:	bf0c      	ite	eq
 800481e:	600b      	streq	r3, [r1, #0]
 8004820:	6053      	strne	r3, [r2, #4]
 8004822:	4630      	mov	r0, r6
 8004824:	f000 f85a 	bl	80048dc <__malloc_unlock>
 8004828:	f104 000b 	add.w	r0, r4, #11
 800482c:	1d23      	adds	r3, r4, #4
 800482e:	f020 0007 	bic.w	r0, r0, #7
 8004832:	1ac2      	subs	r2, r0, r3
 8004834:	d0cc      	beq.n	80047d0 <_malloc_r+0x20>
 8004836:	1a1b      	subs	r3, r3, r0
 8004838:	50a3      	str	r3, [r4, r2]
 800483a:	e7c9      	b.n	80047d0 <_malloc_r+0x20>
 800483c:	4622      	mov	r2, r4
 800483e:	6864      	ldr	r4, [r4, #4]
 8004840:	e7cc      	b.n	80047dc <_malloc_r+0x2c>
 8004842:	1cc4      	adds	r4, r0, #3
 8004844:	f024 0403 	bic.w	r4, r4, #3
 8004848:	42a0      	cmp	r0, r4
 800484a:	d0e3      	beq.n	8004814 <_malloc_r+0x64>
 800484c:	1a21      	subs	r1, r4, r0
 800484e:	4630      	mov	r0, r6
 8004850:	f000 f82e 	bl	80048b0 <_sbrk_r>
 8004854:	3001      	adds	r0, #1
 8004856:	d1dd      	bne.n	8004814 <_malloc_r+0x64>
 8004858:	e7cf      	b.n	80047fa <_malloc_r+0x4a>
 800485a:	bf00      	nop
 800485c:	20000120 	.word	0x20000120
 8004860:	20000124 	.word	0x20000124

08004864 <_realloc_r>:
 8004864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004866:	4607      	mov	r7, r0
 8004868:	4614      	mov	r4, r2
 800486a:	460e      	mov	r6, r1
 800486c:	b921      	cbnz	r1, 8004878 <_realloc_r+0x14>
 800486e:	4611      	mov	r1, r2
 8004870:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004874:	f7ff bf9c 	b.w	80047b0 <_malloc_r>
 8004878:	b922      	cbnz	r2, 8004884 <_realloc_r+0x20>
 800487a:	f7ff ff4d 	bl	8004718 <_free_r>
 800487e:	4625      	mov	r5, r4
 8004880:	4628      	mov	r0, r5
 8004882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004884:	f000 f830 	bl	80048e8 <_malloc_usable_size_r>
 8004888:	42a0      	cmp	r0, r4
 800488a:	d20f      	bcs.n	80048ac <_realloc_r+0x48>
 800488c:	4621      	mov	r1, r4
 800488e:	4638      	mov	r0, r7
 8004890:	f7ff ff8e 	bl	80047b0 <_malloc_r>
 8004894:	4605      	mov	r5, r0
 8004896:	2800      	cmp	r0, #0
 8004898:	d0f2      	beq.n	8004880 <_realloc_r+0x1c>
 800489a:	4631      	mov	r1, r6
 800489c:	4622      	mov	r2, r4
 800489e:	f7ff ff13 	bl	80046c8 <memcpy>
 80048a2:	4631      	mov	r1, r6
 80048a4:	4638      	mov	r0, r7
 80048a6:	f7ff ff37 	bl	8004718 <_free_r>
 80048aa:	e7e9      	b.n	8004880 <_realloc_r+0x1c>
 80048ac:	4635      	mov	r5, r6
 80048ae:	e7e7      	b.n	8004880 <_realloc_r+0x1c>

080048b0 <_sbrk_r>:
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	2300      	movs	r3, #0
 80048b4:	4d05      	ldr	r5, [pc, #20]	; (80048cc <_sbrk_r+0x1c>)
 80048b6:	4604      	mov	r4, r0
 80048b8:	4608      	mov	r0, r1
 80048ba:	602b      	str	r3, [r5, #0]
 80048bc:	f7fc feee 	bl	800169c <_sbrk>
 80048c0:	1c43      	adds	r3, r0, #1
 80048c2:	d102      	bne.n	80048ca <_sbrk_r+0x1a>
 80048c4:	682b      	ldr	r3, [r5, #0]
 80048c6:	b103      	cbz	r3, 80048ca <_sbrk_r+0x1a>
 80048c8:	6023      	str	r3, [r4, #0]
 80048ca:	bd38      	pop	{r3, r4, r5, pc}
 80048cc:	20000274 	.word	0x20000274

080048d0 <__malloc_lock>:
 80048d0:	4801      	ldr	r0, [pc, #4]	; (80048d8 <__malloc_lock+0x8>)
 80048d2:	f000 b811 	b.w	80048f8 <__retarget_lock_acquire_recursive>
 80048d6:	bf00      	nop
 80048d8:	2000027c 	.word	0x2000027c

080048dc <__malloc_unlock>:
 80048dc:	4801      	ldr	r0, [pc, #4]	; (80048e4 <__malloc_unlock+0x8>)
 80048de:	f000 b80c 	b.w	80048fa <__retarget_lock_release_recursive>
 80048e2:	bf00      	nop
 80048e4:	2000027c 	.word	0x2000027c

080048e8 <_malloc_usable_size_r>:
 80048e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048ec:	1f18      	subs	r0, r3, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	bfbc      	itt	lt
 80048f2:	580b      	ldrlt	r3, [r1, r0]
 80048f4:	18c0      	addlt	r0, r0, r3
 80048f6:	4770      	bx	lr

080048f8 <__retarget_lock_acquire_recursive>:
 80048f8:	4770      	bx	lr

080048fa <__retarget_lock_release_recursive>:
 80048fa:	4770      	bx	lr

080048fc <_init>:
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fe:	bf00      	nop
 8004900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004902:	bc08      	pop	{r3}
 8004904:	469e      	mov	lr, r3
 8004906:	4770      	bx	lr

08004908 <_fini>:
 8004908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490a:	bf00      	nop
 800490c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490e:	bc08      	pop	{r3}
 8004910:	469e      	mov	lr, r3
 8004912:	4770      	bx	lr
